
sop ansible sse leap uprade dusre folder mai hai check it 
yaha baad mai manine notep ad mai likha hu code so eary copy and paste 


USING LEAPP UPGRADE ANSIBLE AUTOMATION FROM EXECUTION NODE :
1.	Run the Ansible_Authorized_Key job in Blade Logic to ensure the ansible ssh key from pwauslifapp01 is in the authorized_keys file.



yah code ahi jo BL par passwordless authorised ke liye ssh key BL GUI par rakha hai as code backend mai 


#!/bin/nsh
#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

. //pwausxpbrmgt01/usr/local/bl_depot/personal/Paul/envsetup.nsh

OS=$(GetOS)
ENV=$(GetEnv)

DEST_IP=${DESTIP}

#
# end of determine OS and env
#

#
# end of determine OS and env
#


#
# Matt Camp Request - BL Script to Setup Ansible User
#

#check for ansible user add if its not there
ANSIBLEID=`nexec $DEST "if id ansible 2&>1 /dev/null; then echo "true"; else echo "false"; fi"`
ANSSVCID=`nexec $DEST "if id anssvc 2&>1 /dev/null; then echo "true"; else echo "false"; fi"`
ANSIBLEGRP=`nexec $DEST "if grep -q ansible /etc/group; then echo "true"; else echo "false"; fi"`

#echo $ANSIBLEGRP

if [ $ANSSVCID = "true" ]
then
  nexec $DEST "usermod -l ansible anssvc ; echo \"\${?}\" > /tmp/cmd_result"
fi

#verify user rename is successful
CMD_RESULT=`cat //$DEST/tmp/cmd_result`

if [ $CMD_RESULT -ne 0 ]
then
  echo "There was an error adding the ansible account.  Please add the ansible account manually to $DEST and re-run this script.  Use this command to add the user account: useradd -u 444333 -m -d /home/ansible ansible"
  exit 1
else
  exit 0
fi

#add ansible account if it does not exit
if [ $ANSIBLEID = "false" ]
then
  if [ $ANSIBLEGRP = "true" ]
  then
    echo "ansible group exists"
    nexec $DEST "useradd -u 444333 -g ansible -m -d /home/ansible ansible"
  else
    echo "creating ansible user group"
    nexec $DEST "useradd -u 444333 -m -d /home/ansible ansible"
  fi
  nexec $DEST "echo \'\!XXL92mm\' | passwd --stdin ansible"
  ANSIBLEUID=`awk -F: '$1 == "ansible" { print $3 }' //$DEST/etc/passwd`
  ANSIBLEGID=`awk -F: '$1 == "ansible" { print $4 }' //$DEST/etc/passwd`
  nexec $DEST "chown -R ${ANSIBLEUID}:${ANSIBLEGID} /home/ansible"
  echo 'ansible         ALL=(ALL)       NOPASSWD: ALL' > //$DEST/etc/sudoers.d/ansible
fi


#add ansible user key	
ONPREM_ANSIBLE_KEY='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDomdvfW/HuvjZIpVniuPjc/kfkvplmXRZPPZscvCMqej0y2Kaws45UugHEYoJLYq5pjfr6IB///k4GghhTTZTKveQIekbFEY4dzUVTSDCZwzpT3IsAkXMSqdPMzAPnxEpQ4YPK6dqW9JzFFbe4MkiRalronUUUKZrkvvCgsgTG8aYqkxrIcnvmvEti3mikv56tcstAdN94T1FcuqfDQS/Uwri87bf4dCxIEV1lm3wJOCIGN9X/Pjl6UOFdo0S404Xzjbup1YlM5ZKwu9lyfcyG/fv4Hu6VpUZyP1kOtmQ+E/Ye6zW2B48OX6QEKXDNNwhuK/4uHBMYkJiaPeEY2eOt anssvc@twauslpdans0009'
#RSA_KEY='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFp/QqYSO663qBwybizjRoKLn2VDHYDcwTLV4TVDdBJFiPcnhMoxLIfSyLuf1n5yD62/8VrYAz2eJk1U5Bu7sThHzBSZX4/9qhUm8TtH4ErU4GxgFBSdAFkZnzpwKutOhRZ49YXJ+9f1CWB6twUtQuvib0DBAO1tIRB9fLGt3VYaeIj338N7zF29sxjLu4g+y8XekSpkpsr8Kw1gkeDlB+jmF10mUJTkP0zvTHWoQQrfbmKSvIuFOJZnwE/hwy64OOcTwMKDFWQQwYQYcMbJ71hWdEINAex0GaBDiU+yQTHTlV/5gHRh3GWBl/Tj1s9yhIyAw3+aQEa/bHXgYIuCkf ansible@pwauslifbh09'
#RSA_KEY1='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDomdvfW/HuvjZIpVniuPjc/kfkvplmXRZPPZscvCMqej0y2Kaws45UugHEYoJLYq5pjfr6IB///k4GghhTTZTKveQIekbFEY4dzUVTSDCZwzpT3IsAkXMSqdPMzAPnxEpQ4YPK6dqW9JzFFbe4MkiRalronUUUKZrkvvCgsgTG8aYqkxrIcnvmvEti3mikv56tcstAdN94T1FcuqfDQS/Uwri87bf4dCxIEV1lm3wJOCIGN9X/Pjl6UOFdo0S404Xzjbup1YlM5ZKwu9lyfcyG/fv4Hu6VpUZyP1kOtmQ+E/Ye6zW2B48OX6QEKXDNNwhuK/4uHBMYkJiaPeEY2eOt anssvc@twauslpdans0009'
#RSA_KEY2='ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDW9F+qopv65GaIlWsTcQQ9FssXAP1i3VaO64ucgatu9Rx7wuluHod3CMG2APGjAQ4MrJmaT2LWdiZ6Az8L6f1mwPmSpMYrFYQ1ZfpfG2xq2muAbqC3PCLeNzoVNneuTSd/+vHzARXglSnEvXsbp1HgPemWKrGTjKpVZDLRSqhUwm1CEPS+XIUTkjN3f8uv8o864RykCgqq9kGQnHfnoaJY/ObNLmr3I0pPZUdH/0Nvc+khhUH/iBqdaX4yHutvjr/cVte4zAr4Jl+3Rp8vOyVOHidoUVYT22tLEUL1HJeaeWmLe+PTVsAmJERl3ri2M0aRU/Ez1SG8IAiz7GG7efLv awx@pwausr21hans001.app.hcscint.net'
if [ ! -d //$DEST/home/ansible/.ssh ]
then
	mkdir -p //$DEST/home/ansible/.ssh
	chown -R 444333:1000 //$DEST/home/ansible
	chmod -R 750 //$DEST/home/ansible
	chmod -R 700 //$DEST/home/ansible/.ssh
else
	echo "Home dir and .ssh directory already exist for ansible user on $DEST."
fi

#set perms on .ssh just in case it exists and is wrong
chmod -R 700 //$DEST/home/ansible/.ssh

#echo "key is: \"${ONPREM_ANSIBLE_KEY}\""
#nexec $DEST echo key is: \"${ONPREM_ANSIBLE_KEY}\"
	
#load key locally if it doesnt exist
if grep -q "$ONPREM_ANSIBLE_KEY" //$DEST/home/ansible/.ssh/authorized_keys
then
	echo "Key already exists in authorized_keys on $DEST."
else
echo $ONPREM_ANSIBLE_KEY >> //$DEST/home/ansible/.ssh/authorized_keys
#echo $RSA_KEY >> //$DEST/home/ansible/.ssh/authorized_keys
#echo $RSA_KEY1 >> //$DEST/home/ansible/.ssh/authorized_keys
#echo $RSA_KEY2 >> //$DEST/home/ansible/.ssh/authorized_keys
#echo $RSA_KEY2 >> //$DEST/root/.ssh/authorized_keys
fi




--
4.	Now login on pwauslifapp01.app.hcscint.net with your LAN ID. This is ansible server 
5.	Create an inventory file with your list of target servers (using shortname) in the /var/tmp/stage directory.


[root@pwauslifapp01 ~]# cd /var/tmp/stage
[root@pwauslifapp01 stage]# ls -rlth
total 24K
-rw-rw-r-- 1 u542664 u542664  15 Feb 14 14:00 map_inv
-rw-rw-r-- 1 u541270 u541270  15 Feb 16 10:48 service_inv
-rw-rw-r-- 1 root    root     14 Feb 19 10:00 Podman_inv
-rw-r--r-- 1 root    root     44 Feb 20 19:30 lvp_inv
-rw-r--r-- 1 root    root     15 Feb 21 11:59 AAH_inv
-rw-rw-r-- 1 i367257 i367257  28 Feb 24 10:17 BlueCoat_Proxies
drwxrwxr-x 2 anssvc  anssvc  249 Feb 28 04:36 centrify
[root@pwauslifapp01 stage]# cat AAH_inv
twauslapweb002
[root@pwauslifapp01 stage]# cat service_inv
twauslasuapp04
[root@pwauslifapp01 stage]#

6.	Execute the script /usr/local/ecsos/bin/leapp_upgrade.bash as the anssvc user using sudo:

[root@pwauslifapp01 stage]# cat /usr/local/ecsos/bin/leapp_upgrade.bash
#!/bin/bash

export ANSIBLE_VAULT_PASSWORD_FILE=/home/ansible/ansible-automation/Leapp-Upgrade/.vault_pass.txt

if [[ -z "$1" ]]
then
   echo "Usage:  leapp_upgrade.bash /var/tmp/stage/[inventory_file_name]"
   exit 1
fi

if [ ! -f /var/tmp/stage/$1 ]
then
  echo "Inventory file $1 does not exist in /var/tmp/stage"
  exit 1
fi

cd /home/ansible/ansible-automation/Leapp-Upgrade; ansible-navigator run leapp_upgrade_8.yml --inventory /var/tmp/stage/$1  -e 'ansible_user=ansible' | tee /var/tmp/leapp_out_$$
[root@pwauslifapp01 stage]#


7.	sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash inventory_file
7.	sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash inventory_file here is AAH.inv rakha hai ajib se 



[root@pwauslifapp01 stage]# cd /home/ansible/ansible-automation/Leapp-Upgrade
[root@pwauslifapp01 Leapp-Upgrade]# ls -rlth
total 148K
-rw-rw-r--  1 anssvc anssvc   15 Feb 14 15:48 README.md
-rw-rw-r--  1 anssvc anssvc 2.2K Feb 14 15:48 fstab_remove_duplines.yml
-rw-rw-r--  1 anssvc anssvc  456 Feb 14 15:48 env_dict_demo.yml
-rw-rw-r--  1 anssvc anssvc  201 Feb 14 15:48 disable_yum_repos.yml
-rw-rw-r--  1 anssvc anssvc 2.3K Feb 14 15:48 check-for-old-packages.yml
-rw-rw-r--  1 anssvc anssvc  227 Feb 14 15:48 ansible-navigator.yml
drwxrwxr-x  3 anssvc anssvc   19 Feb 14 15:48 leapp-upgrade
-rw-rw-r--  1 anssvc anssvc 3.4K Feb 14 15:48 leapp-post-upgrade.yml
-rw-rw-r--  1 anssvc anssvc  379 Feb 14 15:48 leapp-postupgrade-only.yml
-rw-rw-r--  1 anssvc anssvc  136 Feb 14 15:48 hello_world.yml
drwxrwxr-x  2 anssvc anssvc   33 Feb 14 15:48 hcsc-powerpath
-rw-rw-r--  1 anssvc anssvc  314 Feb 14 15:48 regex-test.yml
-rw-rw-r--  1 anssvc anssvc  332 Feb 14 15:48 recovery.yml
-rw-rw-r--  1 anssvc anssvc  138 Feb 14 15:48 printfacts.yml
-rw-rw-r--  1 anssvc anssvc  268 Feb 14 15:48 nics_rename_only.yml
-rwxrwxr-x  1 anssvc anssvc  275 Feb 14 15:48 lint.bash
-rw-rw-r--  1 anssvc anssvc   61 Feb 14 15:48 leapp_vars.yml
-rw-rw-r--  1 anssvc anssvc 5.1K Feb 14 15:48 leapp_upgrade_9.yml
-rw-rw-r--  1 anssvc anssvc 5.4K Feb 14 15:48 leapp_upgrade_8.yml
-rw-rw-r--  1 anssvc anssvc 5.7K Feb 14 15:48 leapp_upgrade_8_mulesoft.yml
-rw-rw-r--  1 anssvc anssvc 5.7K Feb 14 15:48 leapp_upgrade_8_mq.yml
-rw-rw-r--  1 anssvc anssvc 5.7K Feb 14 15:48 leapp_upgrade_8_middleware.yml
-rw-rw-r--  1 anssvc anssvc  322 Feb 14 15:48 leapp_powerpath.yml
-rw-rw-r--  1 anssvc anssvc  408 Feb 14 15:48 vminfo.yml
-rw-rw-r--  1 anssvc anssvc 3.7K Feb 14 15:48 vminfo_debug.yml
-rw-rw-r--  1 anssvc anssvc  172 Feb 14 15:48 test_ulimit_files_chk.yml
-rw-rw-r--  1 anssvc anssvc  304 Feb 14 15:48 test_ssh.yml
-rw-rw-r--  1 anssvc anssvc  173 Feb 14 15:48 test_post_ulimit_files_chk.yml
-rw-rw-r--  1 anssvc anssvc  419 Feb 14 15:48 test_play.yml
-rw-rw-r--  1 anssvc anssvc  268 Feb 14 15:48 test_middleware_start.yml
-rw-rw-r--  1 anssvc anssvc  263 Feb 14 15:48 test_fstab.yml
drwxrwxr-x 27 anssvc anssvc 4.0K Feb 14 15:48 roles
-rw-r--r--  1 anssvc anssvc 1.8K Feb 14 15:49 ansible.cfg
-rw-r--r--  1 anssvc anssvc 1.4K Feb 14 16:18 ansible-navigator.log
[root@pwauslifapp01 Leapp-Upgrade]#

var/tmp/leapp_out_$$

[root@pwauslifapp01 Leapp-Upgrade]# cat ansible-navigator.yml
---
ansible-navigator:
  execution-environment:
    image: localhost/ee-initial_env:1.3
    pull:
      policy: missing
  playbook-artifact:
    enable: false
  logging:
    file: ~/ansible/ansible-navigator.log
  mode: stdout
[root@pwauslifapp01 Leapp-Upgrade]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat leapp_upgrade_8.yml
---
- name: RHEL 7 to 8 leapp
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""
  vars_files:
    - leapp_vars.yml

  tasks:

    - name: Force Reboot
      ansible.builtin.reboot:

    - name: Wait for server to come up
      ansible.builtin.wait_for_connection:
        timeout: 1200

    - name: Import Pre Ulimits role
      ansible.builtin.import_role:
        name: pre_ulimit_files_chk
      tags:
        - pre
        - capsule

    - name: Gather Facts with longer timeout
      ansible.builtin.setup:
        gather_timeout: 720
      tags:
        - pre
        - capsule

    - name: Import envsetup role - setup variable based on target host env
      ansible.builtin.import_role:
        name: envsetup
      tags:
        - pre
        - capsule

#    - name: check vars
#      ansible.builtin.debug:
#        var:  hcsc_runtime[hcsc_env_key]

#    - name: fail here
#      ansible.builtin.fail:
#        msg: "debugging"

    - name: Import VMWare role
      ansible.builtin.import_role:
        name: pre-leapp-vmware
      when: ansible_facts.virtualization_type == "VMware"
      tags:
        - pre
        - capsule

    - name: call check disk space role
      ansible.builtin.include_role:
        name: chkdskspc
      loop: "{{ chkdskspc | dict2items }}"
      loop_control:
        loop_var: chkdirs
      tags:
        - pre

    - name: print chkdskspc dict
      ansible.builtin.debug:
        var: chkdskspc_outdict
      tags:
        - pre

    - name: call resize volume role
      ansible.builtin.include_role:
        name: resizelvmfs
      loop: "{{ chkdskspc_outdict | dict2items }}"
      loop_control:
        loop_var: chkdskspc_out
      tags:
        - pre

    - name: Import pre-leapp steps
      ansible.builtin.import_role:
        name: pre-leapp
      tags:
        - pre
        - capsule

    - name: Import Pre Leapp NFS
      ansible.builtin.import_role:
        name: pre_leapp_nfs
      tags:
        - pre
        - capsule

    - name: Import Pre Leapp CIFS
      ansible.builtin.import_role:
        name: pre_leapp_cifs
      tags:
        - pre
        - capsule

    - name: Import Pre Leapp automount
      ansible.builtin.import_role:
        name: pre_leapp_automount
      tags:
        - pre
        - capsule

    - name: Import Pre Leapp powerpath
      ansible.builtin.import_role:
        name: pre_leapp_powerpath
      tags:
        - pre
        - capsule

    - name: Recursively remove directory
      ansible.builtin.file:
        path: /var/log/ripu/ripu.log
        state: absent
      tags:
        - pre
        - capsule

    - name: Import analysis-leapp steps - infra-leapp
      ansible.builtin.import_role:
        name: infra.leapp.analysis
      vars:
        satellite_organization: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
        satellite_activation_key_pre_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_pre_leapp }}"
        satellite_activation_key_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_leapp }}"
        leapp_preupg_opts: '--target 8.8'
        crypto_policy: DEFAULT
        leapp_answerfile: |
          [remove_pam_pkcs11_module_check]
          confirm = True
      tags:
        - analysis

- name: RHEL 7 to 8 leapp upgrade
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""

  tasks:

    - name: Gather Facts with longer timeout
      ansible.builtin.setup:
        gather_timeout: 720
      tags:
        - replay
        - post
        - fstab
        - finish

    - name: Include envsetup role - setup variable based on target host env
      ansible.builtin.import_role:
        name: envsetup
      tags:
        - upgrade
        - replay
        - post
        - fstab
        - finish

    - name: Import upgrade-leapp steps - infra-leapp
      ansible.builtin.import_role:
        name: infra.leapp.upgrade
      vars:
        satellite_organization: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
        satellite_activation_key_post_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_post_leapp }}"
        satellite_activation_key_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_leapp }}"
        leapp_preupg_opts: '--target 8.8'
        #update_grub_to_grub_2: true
        selinux_mode: disabled
        crypto_policy: DEFAULT
      tags:
        - upgrade
        - replay

    - name: Import Post Leapp powerpath
      ansible.builtin.import_role:
        name: post_leapp_powerpath
      tags:
        - post
        - replay

    - name: Import Post Leapp Fstab
      ansible.builtin.import_role:
        name: post_leapp_fstab
      tags:
        - post
        - replay
        - fstab


    - name: Import post upgrade tasks
      ansible.builtin.import_role:
        name: post-leapp
      tags:
        - post
        - replay
        - finish

    - name: Import Post Ulimits role
      ansible.builtin.import_role:
        name: post_ulimit_files_chk
      tags:
        - post
        - replay
        - finish

    - name: Force Reboot
      ansible.builtin.reboot:

    - name: Wait for server to come up
      ansible.builtin.wait_for_connection:
        timeout: 1200
...
[root@pwauslifapp01 Leapp-Upgrade]#

[root@pwauslifapp01 Leapp-Upgrade]# cat /home/ansible/ansible-automation/Leapp-Upgrade/.vault_pass.txt
!XXL92mm
[root@pwauslifapp01 Leapp-Upgrade]#






leaap ugrade ke liye roles mai ja kar sabka separate role define karege jo inhiboitor rmeove karega aur main playbook shift ko read kar ke 


[root@pwauslifapp01 Leapp-Upgrade]# ls -ld roles
drwxrwxr-x 27 anssvc anssvc 4096 Feb 14 15:48 roles
[root@pwauslifapp01 Leapp-Upgrade]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade
[root@pwauslifapp01 Leapp-Upgrade]#

[root@pwauslifapp01 roles]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles
[root@pwauslifapp01 roles]# ls -rlth
total 0
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post-leapp
drwxrwxr-x 4 anssvc anssvc 114 Feb 14 15:48 envsetup
drwxrwxr-x 3 anssvc anssvc  36 Feb 14 15:48 chkdskspc
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3_udev
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_middleware_startup
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_fstab
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre-leapp-vmware
drwxrwxr-x 5 anssvc anssvc  52 Feb 14 15:48 pre-leapp
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_ulimit_files_chk
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 post_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mq
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 recovery
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_ulimit_files_chk
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_symlinks
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_nfs
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mq
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_middleware_shutdown
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_cifs
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_automount
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_9
drwxrwxr-x 4 anssvc anssvc  52 Feb 14 15:48 resizelvmfs
[root@pwauslifapp01 roles]#



[root@pwauslifapp01 pre-leapp]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre-leapp
[root@pwauslifapp01 pre-leapp]# ls -rlth
total 4.0K
drwxrwxr-x 2 anssvc anssvc   41 Feb 14 15:48 templates
drwxrwxr-x 2 anssvc anssvc 4.0K Feb 14 15:48 tasks
drwxrwxr-x 2 anssvc anssvc   22 Feb 14 15:48 defaults
[root@pwauslifapp01 pre-leapp]#


[root@pwauslifapp01 pre-leapp]# cat templates/leapp_mod_blacklist.conf.j2
{% for module in kern_mods_rm %}
blacklist {{ module }}
{% endfor %}
[root@pwauslifapp01 pre-leapp]#



[root@pwauslifapp01 pre-leapp]# cat defaults/main.yml
---
kern_mods_rm:
  - pata_acpi
  - floppy

pre_leapp_cfysshrpm: "CentrifyDC-openssh"
...
[root@pwauslifapp01 pre-leapp]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre-leapp
[root@pwauslifapp01 pre-leapp]#


[root@pwauslifapp01 pre-leapp]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre-leapp
[root@pwauslifapp01 pre-leapp]# cd tasks/
[root@pwauslifapp01 tasks]# ls -rlth
total 44K
-rw-rw-r-- 1 anssvc anssvc 1.5K Feb 14 15:48 vmchk_snap.yml
-rw-rw-r-- 1 anssvc anssvc  288 Feb 14 15:48 remove_kern_mod.yml
-rw-rw-r-- 1 anssvc anssvc  327 Feb 14 15:48 os_update.yml
-rw-rw-r-- 1 anssvc anssvc 3.6K Feb 14 15:48 main.yml
-rw-rw-r-- 1 anssvc anssvc  824 Feb 14 15:48 lvmfs_check.yml
-rw-rw-r-- 1 anssvc anssvc  413 Feb 14 15:48 kernel_cleanup.yml
-rw-rw-r-- 1 anssvc anssvc  469 Feb 14 15:48 edit_yumrepo.yml
-rw-rw-r-- 1 anssvc anssvc  231 Feb 14 15:48 edit_ifcfg.yml
-rw-rw-r-- 1 anssvc anssvc  358 Feb 14 15:48 disable_yum_app_repos.yml
-rw-rw-r-- 1 anssvc anssvc  934 Feb 14 15:48 check_ssh.yml
-rw-rw-r-- 1 anssvc anssvc 1.6K Feb 14 15:48 check_space.yml
[root@pwauslifapp01 tasks]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre-leapp/tasks
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 pre-leapp]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre-leapp
[root@pwauslifapp01 pre-leapp]# ls -rlth
total 4.0K
drwxrwxr-x 2 anssvc anssvc   41 Feb 14 15:48 templates
drwxrwxr-x 2 anssvc anssvc 4.0K Feb 14 15:48 tasks
drwxrwxr-x 2 anssvc anssvc   22 Feb 14 15:48 defaults
[root@pwauslifapp01 pre-leapp]# cd tasks
[root@pwauslifapp01 tasks]# ls -rlth
total 44K
-rw-rw-r-- 1 anssvc anssvc 1.5K Feb 14 15:48 vmchk_snap.yml
-rw-rw-r-- 1 anssvc anssvc  288 Feb 14 15:48 remove_kern_mod.yml
-rw-rw-r-- 1 anssvc anssvc  327 Feb 14 15:48 os_update.yml
-rw-rw-r-- 1 anssvc anssvc 3.6K Feb 14 15:48 main.yml
-rw-rw-r-- 1 anssvc anssvc  824 Feb 14 15:48 lvmfs_check.yml
-rw-rw-r-- 1 anssvc anssvc  413 Feb 14 15:48 kernel_cleanup.yml
-rw-rw-r-- 1 anssvc anssvc  469 Feb 14 15:48 edit_yumrepo.yml
-rw-rw-r-- 1 anssvc anssvc  231 Feb 14 15:48 edit_ifcfg.yml
-rw-rw-r-- 1 anssvc anssvc  358 Feb 14 15:48 disable_yum_app_repos.yml
-rw-rw-r-- 1 anssvc anssvc  934 Feb 14 15:48 check_ssh.yml
-rw-rw-r-- 1 anssvc anssvc 1.6K Feb 14 15:48 check_space.yml
[root@pwauslifapp01 tasks]#



[root@pwauslifapp01 tasks]# cat vmchk_snap.yml
---
- name: VMWare tasks block
  block:
  - name: Gather some info from a guest using the vSphere API output schema
    community.vmware.vmware_guest_info:
      hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
      username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
      password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
      datacenter: "{{ hcsc_runtime[hcsc_env_key].datacentername }}"
      name: "{{ ansible_facts['hostname'] }}"
      schema: "vsphere"
      validate_certs: false
    delegate_to: localhost
    register: vm_facts

  - name: fail on VM version lower than 19
    fail:
      msg: "The VM Version is below 19 and must be upgraded before the leapp-upgrade."
    when: (vm_facts.instance.config.version.split('-')[1] | int) < 19


  - name: Create a snapshot
    community.vmware.vmware_guest_snapshot:
      hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
      username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
      password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
      datacenter: "{{ hcsc_runtime[hcsc_env_key].datacentername }}"
      uuid: "{{ vm_facts.instance.config.uuid }}"
      state: present
      snapshot_name: leappsnap
      description: preupgrade_snap
      validate_certs: false
    delegate_to: localhost
  when: ansible_facts.virtualization_type == "VMware"
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat remove_kern_mod.yml
---

- name: "Check for mod {{ item }}"
  ansible.builtin.shell:
    cmd: "lsmod | grep {{ item }}"
  changed_when: false
  register: grep_result
  ignore_errors: true

- name: "Remove mod {{ item }}"
  ansible.builtin.command:
    cmd: "rmmod {{ item }}"
  when: grep_result.rc == 0
  [root@pwauslifapp01 tasks]#


-rw-rw-r-- 1 anssvc anssvc 1.6K Feb 14 15:48 check_space.yml
[root@pwauslifapp01 tasks]# cat remove_kern_mod.yml
---

- name: "Check for mod {{ item }}"
  ansible.builtin.shell:
    cmd: "lsmod | grep {{ item }}"
  changed_when: false
  register: grep_result
  ignore_errors: true

- name: "Remove mod {{ item }}"
  ansible.builtin.command:
    cmd: "rmmod {{ item }}"
  when: grep_result.rc == 0
  [root@pwauslifapp01 tasks]# cat ^C
[root@pwauslifapp01 tasks]# cat  os_update.yml
---
- name: Update OS
  ansible.builtin.package:
    name: '*'
    state: latest
  register: update_result

#- name: Reboot if needed
#  when: update_result.changed
#  block:
#    - name: Reboot if needed
#      ansible.builtin.reboot:
#
#    - name: Wait for server to come up
#      ansible.builtin.wait_for_connection:

...
[root@pwauslifapp01 tasks]#
[root@pwauslifapp01 tasks]# cat main.yml
---
- name: Check For More Than 30 Logical Volumes
  ansible.builtin.import_tasks: lvmfs_check.yml

#- name: Check /var and /usr for free space, add if needed and available
#  ansible.builtin.import_tasks: check_space.yml
#  vars:
#    rootvgfreespc: "{{ ansible_facts.lvm.vgs.rootvg.free_g | float }}"

- name: Check for and remove centrify ssh verify PermitRootLogin
  ansible.builtin.import_tasks: check_ssh.yml
  vars:
    centrify_service_name: "centrify-sshd.service"

- name: Find yum repo Files
  ansible.builtin.find:
    paths: /etc/yum.repos.d
    patterns: '*.repo'
    recurse: false
  register: pre_leapp_yumrepo_files

- name: Edit yum repo Files
  ansible.builtin.include_tasks:
    edit_yumrepo.yml
  loop: "{{ pre_leapp_yumrepo_files.files | map(attribute='path') }}"
  loop_control:
    loop_var: repofile_to_edit

- name: Convert NIC naming to predictable NIC names
  ansible.builtin.import_role:
    name: 4067471_predictable-nics_3

#- name: Remove udev rule file
#  ansible.builtin.file:
#    path: /etc/udev/rules.d/70-rhosp-persistent-net.rules
#    state: absent

- name: Find ifcfg-em Files
  ansible.builtin.find:
    paths: /etc/sysconfig/network-scripts
    patterns: 'ifcfg-em*'
    recurse: false
  register: ifcfg_em_files

- name: Edit ifcfg-em Files
  ansible.builtin.include_tasks:
    edit_ifcfg.yml
  loop: "{{ ifcfg_em_files.files | map(attribute='path') }}"
  loop_control:
    loop_var: file_to_edit

- name: Force Register to preleapp activation key
  community.general.redhat_subscription:
    state: present
    activationkey: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_pre_leapp }}"
    org_id: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
    force_register: true

- name: Update OS
  ansible.builtin.import_tasks: os_update.yml

- name: Force Reboot
  ansible.builtin.reboot:

- name: Wait for server to come up
  ansible.builtin.wait_for_connection:
    timeout: 1200

- name: Clean-up old kernels /boot
  ansible.builtin.import_tasks: kernel_cleanup.yml

- name: Copy mod blacklist template into place
  ansible.builtin.template:
    src: leapp_mod_blacklist.conf.j2
    dest: /etc/modprobe.d/leapp_mod_blacklist.conf
    owner: root
    group: root
    mode: '0644'

- name: Remove kernel mods
  ansible.builtin.include_tasks: remove_kern_mod.yml
  loop: "{{ kern_mods_rm }}"

- name: List Existing initramfs Files
  ansible.builtin.find:
    path: /boot
    patterns: "initramfs*"
  register: pre_leapp_existing_initramfs

- name: Backup Existing initramfs Files
  ansible.builtin.file:
    path: /var/tmp/stage/boot
    owner: root
    group: root
    mode: '0640'
    state: directory

- name: Backup Existing initramfs Files
  ansible.builtin.copy:
    src: "{{ item['path'] }}"
    dest: "/var/tmp/stage{{ item['path'] }}"
    owner: root
    group: root
    mode: '0640'
    remote_src: true
  loop: "{{ pre_leapp_existing_initramfs['files'] }}"

- name: Regenerate initramfs Files
  ansible.builtin.command:
    cmd: /usr/bin/dracut -f --regenerate-all

- name: Populate ansible service facts
  ansible.builtin.service_facts:

- name: Shutdown and Disable docker if installed or enabled
  ansible.builtin.service:
    name: docker.service
    state: stopped
    enabled: no
  when: '"docker.service" in (ansible_facts.services.keys() | list)'

- name: Check For Docker Socket
  ansible.builtin.stat:
    path: /var/run/docker.sock
  register: pre_leapp_docker_socket_check

- name: Shutdown and Disable docker if installed or enabled
  ansible.builtin.service:
    name: docker.socket
    state: stopped
    enabled: no
  when: pre_leapp_docker_socket_check.stat.exists
...
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat lvmfs_check.yml
---
# Per https://access.redhat.com/solutions/6988142
- name: Get number of mounted Logical Volumes
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      #/usr/bin/lsblk -l | /usr/bin/grep lvm | /usr/bin/tr -s " "| /usr/bin/cut -d " " -f7 | /usr/bin/grep -v ^$ | /usr/bin/wc -l
      lsblk -l |tail -n +2 |grep -v SWAP |awk '{print $7}' |grep -v ^$ |wc -l
  register: logvol_count

- name: Display Number of Logical Volumes
  ansible.builtin.debug:
    var: logvol_count.stdout | int

- name: Check Number of Logical Volumes
  ansible.builtin.assert:
    that:
      - logvol_count.stdout | int <= 22
    success_msg: "There are less than 23 mounted filesystems .  Upgrade will continue."
    fail_msg: "There are more than 22 mounted filesystems.  Please reduce the number of mounted filesystems and try again."

[root@pwauslifapp01 tasks]#

[root@pwauslifapp01 tasks]# cat kernel_cleanup.yml
---
# Reference:  https://access.redhat.com/solutions/1227

- name: RHEL 7 kernel cleanup
  ansible.builtin.command:
    cmd: "package-cleanup -y --oldkernels --count=1"
  when: ansible_facts.distribution_major_version <= "7"

- name: RHEL 8 or 9 kernel cleanup
  ansible.builtin.command:
    cmd: "yum -y remove --oldinstallonly"
  when: ansible_facts.distribution_major_version > "7"
  ignore_errors: true

...
[root@pwauslifapp01 tasks]#


oot@pwauslifapp01 tasks]# cat edit_yumrepo.yml
---
- name: "Disable repos in {{ repofile_to_edit }}"
  ansible.builtin.replace:
    path: "{{ repofile_to_edit }}"
    regexp: '^enabled {0,1}= {0,1}1'
    replace: 'enabled = 0'
  when:
    repofile_to_edit != "/etc/yum.repos.d/redhat.repo"

#- name: "Disable repos in {{ repofile_to_edit }}"
#  ansible.builtin.replace:
#    path: "{{ repofile_to_edit }}"
#    regexp: '^enabled = 1'
#    replace: 'enabled = 0'
#  when:
#    repofile_to_edit != "redhat.repo"
...
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat edit_ifcfg.yml
---
- name: "Remove Entries from {{ file_to_edit }}"
  ansible.builtin.lineinfile:
    path: "{{ file_to_edit }}"
    regexp: '(^{{ item }}=.*)'
    line: '#\1'
    backrefs: true
    state: present
  loop:
    - DEVICE
    - NAME
[root@pwauslifapp01 tasks]#

[root@pwauslifapp01 tasks]# cat disable_yum_app_repos.yml
- name: Find yum repo Files
  ansible.builtin.find:
    paths: /etc/yum.repos.d
    patterns: '*.repo'
    recurse: false
  register: pre_leapp_yumrepo_files

- name: Edit yum repo Files
  ansible.builtin.include_tasks:
    edit_yumrepo.yml
  loop: "{{ pre_leapp_yumrepo_files.files | map(attribute='path') }}"
  loop_control:
    loop_var: repofile_to_edit
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat check_ssh.yml
---
- name: Ensure PermitRootLogin is yes
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin '
    line: 'PermitRootLogin yes'
    insertafter: '^# Authentication:'
  register: permit_login_comment

- name: Populate service facts
  ansible.builtin.service_facts:

#- name: print ansible_facts.services.keys
#  ansible.builtin.debug:
#    msg: "{{ item }}"
#  with_items: "{{ ansible_facts.services }}"
#  when: centrify_service_name in ansible_facts.services

- name: Disable centrify-ssh
  ansible.builtin.systemd:
    name: "{{ centrify_service_name }}"
    state: stopped
    enabled: false
  when: centrify_service_name in ansible_facts.services.keys() | list

- name: Enable OpenSSH
  ansible.builtin.systemd:
    name: sshd.service
    state: started
    enabled: true

- name: Remove centrify-ssh package
  ansible.builtin.yum:
    name: "{{ pre_leapp_cfysshrpm }}"
    state: absent
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat check_space.yml
---
- name: Get free space in GB of var
  ansible.builtin.set_fact:
    varfree: "{{ (item.size_available / 1073741824) | round(0, 'floor') | float }}"
  when: item.mount == "/var"
  with_items: '{{ ansible_facts.mounts }}'

- name: Get free space in GB of usr
  ansible.builtin.set_fact:
    usrfree: "{{ (item.size_available / 1073741824) | round(0, 'floor') | float }}"
  when: item.mount == "/usr"
  with_items: '{{ ansible_facts.mounts }}'

- name: Display var free space
  ansible.builtin.debug:
    var: rootvgfreespc

- name: Display var free space
  ansible.builtin.debug:
    var: usrfree

- name: Display var free space
  ansible.builtin.debug:
    var: varfree

- name: Var check - fail if we need to increase space and rootvg doesnt have enough freespace
  ansible.builtin.fail:
    msg: "/var needs to be increased by 4GB and rootvg does not have enough space"
  when:
    - varfree | float < 5
    - rootvgfreespc | float < 5.1

- name: Usr check - fail if we need to increase space and rootvg doesnt have enough freespace
  ansible.builtin.fail:
    msg: "/usr needs to be increased by 2GB and rootvg does not have enough space"
  when:
    - usrfree | float < 2
    - rootvgfreespc | float < 2.1

- name: Extend /var if less than 4gb is free
  community.general.lvol:
    vg: rootvg
    lv: varlv
    size: +4g
    resizefs: true
  when: varfree | float < 4

- name: Extend /var if less than 2gb is free
  community.general.lvol:
    vg: rootvg
    lv: usrlv
    size: +2g
    resizefs: true
  when: usrfree | float < 2

...
[root@pwauslifapp01 tasks]#


yah eak pre-leapp vmware ka roles bana hai jisme task hai ...yah extra precheck hai to check vmware version if lower than skip kar dega aisa 

[root@pwauslifapp01 roles]# cd pre-leapp-vmware/
[root@pwauslifapp01 pre-leapp-vmware]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre-leapp-vmware
[root@pwauslifapp01 pre-leapp-vmware]# ls -rlth
total 0
drwxrwxr-x 2 anssvc anssvc 22 Feb 14 15:48 tasks
[root@pwauslifapp01 pre-leapp-vmware]# cd tasks
[root@pwauslifapp01 tasks]# ls -rlth
total 8.0K
-rw-rw-r-- 1 anssvc anssvc 4.4K Feb 14 15:48 main.yml
[root@pwauslifapp01 tasks]# cat main.yml
---
- name: VMWare tasks block
  block:
  - name: vm_info get data about target VM
    community.vmware.vmware_vm_info:
      hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
      username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
      password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
      vm_name: "{{ ansible_facts['hostname'] }}"
      validate_certs: false
    delegate_to: localhost
    register: vminfo

  - name: Fail if more than 1 VM is in list
    ansible.builtin.fail:
      msg: Too many results found. More than one VM returned.
    when:
      - vminfo.virtual_machines | length != 1

  - name: set datacenter and moid variables
    ansible.builtin.set_fact:
      #vminfo_datacenter: "{{ vminfo | community.general.json_query('virtual_machines[*].datacenter') }}"
      vminfo_datacenter: "{{ vminfo.virtual_machines[0].datacenter }}"
      vminfo_moid: "{{ vminfo.virtual_machines[0].moid }}"

  - name: Gather some info from a guest using the vSphere API output schema
    community.vmware.vmware_guest_info:
      hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
      username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
      password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
      datacenter: "{{ vminfo_datacenter }}"
      name: "{{ ansible_facts['hostname'] }}"
      schema: "vsphere"
      validate_certs: false
    delegate_to: localhost
    register: vm_facts

  #- name: fail on VM version lower than 19
  #  fail:
  #    msg: "The VM Version is below 19 and must be upgraded before the leapp-upgrade."
  #  when: (vm_facts.instance.config.version.split('-')[1] | int) < 19

  - name: Upgrade VM Machine Version Block
    block:
    - name: Upgrade the VM hardware version
      vmware.vmware_rest.vcenter_vm_hardware:
        vcenter_hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
        vcenter_username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
        vcenter_password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
        upgrade_policy: AFTER_CLEAN_SHUTDOWN
        upgrade_version: VMX_19
        vm: "{{ vminfo_moid }}"
        #vm: "{{ (lookup('vmware.vmware_rest.vm_moid', vminfo_path))[0] }}"
        vcenter_validate_certs: false
      delegate_to: localhost
      register: _result

    #- name: debug out
    #  ansible.builtin.debug:
    #    var: _result

    - name: Gracefully Shutting Down VM
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
        username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
        password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
        #moid: "{{ vminfo_moid }}"
        uuid: "{{ vm_facts.instance.config.uuid }}"
        state: shutdown-guest
        validate_certs: false
      delegate_to: localhost

    - name: Wait for shutdown
      ansible.builtin.wait_for:
        timeout: 300
      delegate_to: localhost

    - name: Power on VM
      community.vmware.vmware_guest_powerstate:
        hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
        username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
        password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
        #moid: "{{ vminfo_moid }}"
        uuid: "{{ vm_facts.instance.config.uuid }}"
        state: powered-on
        validate_certs: false
      delegate_to: localhost
    when: (vm_facts.instance.config.version.split('-')[1] | int) < 19

  - name: Wait for connection
    ansible.builtin.wait_for_connection:
      timeout: 600

  - name: Create preleapp upgrade snapshot
    community.vmware.vmware_guest_snapshot:
      hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
      username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
      password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
      datacenter: "{{ vminfo_datacenter }}"
      uuid: "{{ vm_facts.instance.config.uuid }}"
      state: present
      snapshot_name: leappsnap
      description: preupgrade_snap
      validate_certs: false
    delegate_to: localhost
  when: ansible_facts.virtualization_type == "VMware"
...
[root@pwauslifapp01 tasks]#

























































====================full asnsible hcsc ka ansible server all yml playbook syntax setup may be kaam ayega code atleast ===


[root@pwauslifapp01 Leapp-Upgrade]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade
[root@pwauslifapp01 Leapp-Upgrade]# ls -rlth
total 148K
-rw-rw-r--  1 anssvc anssvc   15 Feb 14 15:48 README.md
-rw-rw-r--  1 anssvc anssvc 2.2K Feb 14 15:48 fstab_remove_duplines.yml
-rw-rw-r--  1 anssvc anssvc  456 Feb 14 15:48 env_dict_demo.yml
-rw-rw-r--  1 anssvc anssvc  201 Feb 14 15:48 disable_yum_repos.yml
-rw-rw-r--  1 anssvc anssvc 2.3K Feb 14 15:48 check-for-old-packages.yml
-rw-rw-r--  1 anssvc anssvc  227 Feb 14 15:48 ansible-navigator.yml
drwxrwxr-x  3 anssvc anssvc   19 Feb 14 15:48 leapp-upgrade
-rw-rw-r--  1 anssvc anssvc 3.4K Feb 14 15:48 leapp-post-upgrade.yml
-rw-rw-r--  1 anssvc anssvc  379 Feb 14 15:48 leapp-postupgrade-only.yml
-rw-rw-r--  1 anssvc anssvc  136 Feb 14 15:48 hello_world.yml
drwxrwxr-x  2 anssvc anssvc   33 Feb 14 15:48 hcsc-powerpath
-rw-rw-r--  1 anssvc anssvc  314 Feb 14 15:48 regex-test.yml
-rw-rw-r--  1 anssvc anssvc  332 Feb 14 15:48 recovery.yml
-rw-rw-r--  1 anssvc anssvc  138 Feb 14 15:48 printfacts.yml
-rw-rw-r--  1 anssvc anssvc  268 Feb 14 15:48 nics_rename_only.yml
-rwxrwxr-x  1 anssvc anssvc  275 Feb 14 15:48 lint.bash
-rw-rw-r--  1 anssvc anssvc   61 Feb 14 15:48 leapp_vars.yml
-rw-rw-r--  1 anssvc anssvc 5.1K Feb 14 15:48 leapp_upgrade_9.yml
-rw-rw-r--  1 anssvc anssvc 5.4K Feb 14 15:48 leapp_upgrade_8.yml
-rw-rw-r--  1 anssvc anssvc 5.7K Feb 14 15:48 leapp_upgrade_8_mulesoft.yml
-rw-rw-r--  1 anssvc anssvc 5.7K Feb 14 15:48 leapp_upgrade_8_mq.yml
-rw-rw-r--  1 anssvc anssvc 5.7K Feb 14 15:48 leapp_upgrade_8_middleware.yml
-rw-rw-r--  1 anssvc anssvc  322 Feb 14 15:48 leapp_powerpath.yml
-rw-rw-r--  1 anssvc anssvc  408 Feb 14 15:48 vminfo.yml
-rw-rw-r--  1 anssvc anssvc 3.7K Feb 14 15:48 vminfo_debug.yml
-rw-rw-r--  1 anssvc anssvc  172 Feb 14 15:48 test_ulimit_files_chk.yml
-rw-rw-r--  1 anssvc anssvc  304 Feb 14 15:48 test_ssh.yml
-rw-rw-r--  1 anssvc anssvc  173 Feb 14 15:48 test_post_ulimit_files_chk.yml
-rw-rw-r--  1 anssvc anssvc  419 Feb 14 15:48 test_play.yml
-rw-rw-r--  1 anssvc anssvc  268 Feb 14 15:48 test_middleware_start.yml
-rw-rw-r--  1 anssvc anssvc  263 Feb 14 15:48 test_fstab.yml
drwxrwxr-x 27 anssvc anssvc 4.0K Feb 14 15:48 roles
-rw-r--r--  1 anssvc anssvc 1.8K Feb 14 15:49 ansible.cfg
-rw-r--r--  1 anssvc anssvc 1.4K Feb 14 16:18 ansible-navigator.log
[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat fstab_remove_duplines.yml
---
- name: Get fstab lines
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      basename -a `cat /etc/fstab | grep -v -e '^#' -e '^$' -e 'UUID' -e 'rootlv' -e 'usrlv' -e 'varlv' -e 'optlv' -e 'swap' -e 'home' -e 'tmp' | awk '{ print $1 }'` | sed 's/^.*-//'
  register: fstab_out

#cat /etc/fstab | grep -v -e '^#' -e '^$' -e 'UUID' -e 'rootlv' | awk '{ print $1 }'

#- name: Get unique fstab lines
#  ansible.builtin.shell:
#    cmd: cat /etc/fstab | grep -v '^#' | grep -v '^$' |  sort -u
#  register: fstab_uniq_out

- name: Print fstab
  ansible.builtin.debug:
    msg: "{{ item }}"
  loop: "{{ fstab_out.stdout_lines }}"

- name: Remove entries to fstab
  ansible.builtin.lineinfile:
    backup: true
    path: /etc/fstab
    #search_string: "{{ item }}"
    regexp: '^.*{{ item }}.*$'
    state: absent
    #backrefs: true
  loop: "{{ fstab_out.stdout_lines }}"


#- name: Remove entries from fstab
#  ansible.builtin.lineinfile:
#    backup: true
#    path: /etc/fstab
#    regexp: '^.*{{ item }}.*$'
#    state: absent
#    backrefs: true
#  loop:
#    - fstab_out.stdout_lines


# multi line
#cmd: |
#     set -o pipefail
#     cat /etc/fstab
# sed statement tested produced \\ intead of \ because of yaml
# | sed "s:/:\\\/:g"
# get single column from fstab without comments and empty lines
#| grep -v '^#' | grep -v '^$' | awk '{ print $1 }'

#- name: try to fix yaml escape
#  ansible.builtin.debug:
#    var: item | regex_replace('\\', '\')
#  loop:
#    - fstab_mntdir_out.stdout_lines

#- name: Get unique fstab lines
#  ansible.builtin.shell:
#    cmd: cat /etc/fstab | grep -v '^#' | grep -v '^$' |  sort -u
#  register: fstab_uniq_out

#- name: Print fstab unique lines
#  ansible.builtin.debug:
#    var: fstab_uniq_out.stdout_lines


#- name: Add unique entries to fstab
 # ansible.builtin.lineinfile:
 #   backup: true
 #   path: /etc/fstab
 #   regexp: '(^.*{{ item }}.*$)'
    #search_string: "{{ item }}"
    #line: '\1'
 #   state: present
 #   backrefs: true
 # loop:
 #   - "{{ fstab_out.stdout_lines }}"

#- name: Remove list name from fstab
#  ansible.builtin.lineinfile:
#    path: /etc/fstab
#    search_string: fstab_out.stdout_lines
#    state: absent
...[root@pwauslifapp01 Leapp-Upgrade]#


...[root@pwauslifapp01 Leapp-Upgrade]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat cat  env_dict_demo.yml
cat: cat: No such file or directory
---
- name: Demonstrate Setting Variables by runtime Environment
  hosts: localhost
  gather_facts: true

  tasks:
    - name: Run envsetup.dictionary
      ansible.builtin.import_role:
        name: envsetup.dictionary

    - name: Display Hostname
      ansible.builtin.debug:
        var: ansible_facts.hostname

    - name: Display the env variable from the dictionary
      ansible.builtin.debug:
        var: hcsc_runtime[hcsc_env_key].hcsc_env

...
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat disable_yum_repos.yml
---
- hosts: all
  gather_facts: true
  become: true
  tasks:

    - name: Disable YUM Repos
      ansible.builtin.import_tasks:
        file: roles/pre-leapp/tasks/disable_yum_app_repos.yml




[root@pwauslifapp01 Leapp-Upgrade]#

eski ka repos ymk file logciaton 

[root@pwauslifapp01 Leapp-Upgrade]# cat roles/pre-leapp/tasks/disable_yum_app_repos.yml
- name: Find yum repo Files
  ansible.builtin.find:
    paths: /etc/yum.repos.d
    patterns: '*.repo'
    recurse: false
  register: pre_leapp_yumrepo_files

- name: Edit yum repo Files
  ansible.builtin.include_tasks:
    edit_yumrepo.yml
  loop: "{{ pre_leapp_yumrepo_files.files | map(attribute='path') }}"
  loop_control:
    loop_var: repofile_to_edit
[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat check-for-old-packages.yml
---
# TODO: Use ansible facts.
- name: Search for old packages and packages not versioned by rhel release
  ansible.builtin.shell:
    cmd: >-
      export PATH={{ os_path }};
      set -o pipefail;
      rpm -qa |
      grep -ve '[\.|+]el{{ ansible_distribution_major_version }}' |
      grep -vE '^(gpg-pubkey|libmodulemd|katello-ca-consumer)' |
      sort
  register: unsigned_packages_post
  changed_when: false
  failed_when:
    - unsigned_packages_post.rc != 0
    - unsigned_packages_post.stderr != ""

- name: Set a fact that lists the old packages and packages not versioned by rhel release
  ansible.builtin.set_fact:
    unsigned_packages_post: "{{ unsigned_packages_post.stdout_lines }}"
    cacheable: true

- name: Diff the list of current un-versioned packages and the previous list of un-versioned packages and set fact for missing packages
  ansible.builtin.set_fact:
    missing_non_rhel_packages: "{{ ansible_facts.ansible_local.non_rhel_packages | difference(unsigned_packages_post) }}"

- name: Display warning message if there are any missing non-rhel versioned packages from the pre-upgrade
  ansible.builtin.debug:
    msg:
      - "Warning!! There are non-rhel packages that were removed during the upgrade. Please review the list of missing packages"
      - "{{ missing_non_rhel_packages }}"
  when: missing_non_rhel_packages | length >= 1

- name: Save list of missing packages for future use/review
  ansible.builtin.copy:
    content: "{{ missing_non_rhel_packages }}"
    dest: /etc/ansible/facts.d/missing_packages.fact
    mode: '0644'
    owner: root
    group: root

- name: Display results of search for old packages and packages not versioned by rhel release
  ansible.builtin.debug:
    msg: "{{ unsigned_packages_post }}"

- name: Search for packages from previous os release, packages not versioned by rhel release and all dependent packages
  ansible.builtin.package:
    name: "{{ unsigned_packages_post }}"
    state: absent
  check_mode: true
  register: search_packages_result

- name: Display results of the search for packages from the previous os release, packages not versioned by rhel release and all dependent packages
  ansible.builtin.debug:
    msg: "{{ search_packages_result.changes.removed | default(search_packages_result.results) | default([]) | regex_replace('Removed: ', '') }}"

...
[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat leapp-post-upgrade.yml
---
# /etc/dnf/dnf.conf is an ini file and could be parsed to check if exclude has value and run this conditionally.
- name: Clean dnf exclude list
  ansible.builtin.shell: >
    export PATH={{ os_path }};
    dnf config-manager --save --setopt exclude=''

# leapp 7 to 8 documentation cleans up old kernels
- name: Block for RHEL 7 kernel cleanup
  #when: "ansible_facts.ansible_local.pre_ripu.distribution_major_version | int == 7"
  block:
    - name: Find old kernels
      ansible.builtin.find:
        paths:
          - /lib/modules
        patterns: '*.el7*'
        file_type: directory
      register: old_kernels

    - name: Remove weak modules from old kernels
      ansible.builtin.shell: |
        export PATH={{ os_path }}
        set -o pipefail
        [ -x /usr/sbin/weak-modules ] && /usr/sbin/weak-modules --remove-kernel {{ item.path | basename }}
      loop: "{{ old_kernels.files }}"
      failed_when: false

    - name: Remove the old kernels from the boot loader entry
      ansible.builtin.shell: |
        export PATH={{ os_path }}
        set -o pipefail
        /bin/kernel-install remove {{ item.path | basename }} {{ item.path }}/vmlinuz
      loop: "{{ old_kernels.files }}"

    - name: Remove any remaining old kernel module directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_kernels.files }}"

- name: Include check-for-old-packages.yml
  ansible.builtin.include_tasks: check-for-old-packages.yml

- name: Remove leapp related packages
  ansible.builtin.package:
    name:
      - leapp
      - leapp-deps
      - leapp-deps-el{{ ansible_distribution_major_version }}
      - leapp-repository-deps-el{{ ansible_distribution_major_version }}
      - kernel-workaround
      - python2-leapp
    state: absent
  register: result

- name: Report leapp related packages that were removed
  ansible.builtin.debug:
    var: result

- name: Unset subscription-manager release
  ansible.builtin.shell: >
    export PATH={{ os_path }};
    subscription-manager release --unset
  when: leapp_upgrade_type == 'satellite' or leapp_upgrade_type == 'cdn'

# TODO: Unset rhui release.

- name: "Register to post leapp activation key"
  community.general.redhat_subscription:
    state: present
    activationkey: "{{ satellite_activation_key_post_leapp }}"
    org_id: "{{ satellite_organization }}"
    force_register: true
  when:
    - leapp_upgrade_type == 'satellite'
    - satellite_organization is defined
    - satellite_activation_key_post_leapp is defined

#- name: Include update-and-reboot.yml
#  ansible.builtin.include_tasks: update-and-reboot.yml

# TODO: Validate RHEL OS versions again?

# Only found in RHEL 7 to 8 documentation
- name:  Old kernels have been removed from the bootloader entry for RHEL 7 to 8
  ansible.builtin.shell: |
    export PATH={{ os_path }}
    grubby --info=ALL | grep "\.el7" || echo "Old kernels are not present in the bootloader."
  register: grubby_check
  #when: ansible_facts.ansible_local.pre_ripu.distribution_major_version | int == 7
  changed_when: false
  failed_when: grubby_check.stdout != 'Old kernels are not present in the bootloader.'

#- name: Include tasks for leapp post upgrade selinux
#  ansible.builtin.include_tasks: leapp-post-upgrade-selinux.yml

#- name: Include tasks for leapp post upgrade crypto policies
#  ansible.builtin.include_tasks: leapp-post-upgrade-crypto.yml
#  when: set_crypto_policies
...
[root@pwauslifapp01 Leapp-Upgrade]#

[root@pwauslifapp01 Leapp-Upgrade]# cat leapp-postupgrade-only.yml
---
- name: Leapp Post Install
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true

  tasks:
  - name: Leapp Post Install
    ansible.builtin.include_tasks: leapp-post-upgrade.yml
    vars:
      os_path: "/usr/share/Modules/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin"
      ansible_distribution_major_version: 7

...
[root@pwauslifapp01 Leapp-Upgrade]#   yah wala postugrade upar wala klo read yml kar rha  leapp-post-upgrade.yml



[root@pwauslifapp01 Leapp-Upgrade]# cat hello_world.yml
---
- hosts: localhost
  gather_facts: false

  tasks:
    - name: Hello World
      ansible.builtin.debug:
        msg: "Hello World"

[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat  regex-test.yml
name: RHEL 7 to 8 leapp
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""
  vars_files:
    - leapp_vars.yml
ansible_facts['hostname'] | regex_search('^pftw.*$', ignorecase=True)^
[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat recovery.yml
---
- name: Recovery of Physical Server
  hosts: all
  strategy: free
  gather_facts: true
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""

  tasks:
    - name: Recovery After OS Remidiation
      ansible.builtin.import_role:
        name: recovery
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# ls -rlth printfacts.yml
-rw-rw-r-- 1 anssvc anssvc 138 Feb 14 15:48 printfacts.yml
[root@pwauslifapp01 Leapp-Upgrade]# cat printfacts.yml
---
- hosts: all
  gather_facts: true
  become: true
  tasks:
   - name: Print facts
     ansible.builtin.debug:
      var: ansible_facts
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat leapp_vars.yml
chkdskspc:
  var:
    required: 6.5
  usr:
    required: 2.0
[root@pwauslifapp01 Leapp-Upgrade]#




[root@pwauslifapp01 Leapp-Upgrade]# cat  leapp_upgrade_9.yml   for rhel8 to rhel9 ugprade playbook code 
---
- name: RHEL 8 to 9 leapp
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""
  vars_files:
    - leapp_vars.yml
  vars:
    upgrade_version: upgrade9

  tasks:

    - name: Force Reboot
      ansible.builtin.reboot:

    - name: Wait for server to come up
      ansible.builtin.wait_for_connection:
        timeout: 1200

    - name: Import Pre Ulimits role
      ansible.builtin.import_role:
        name: pre_ulimit_files_chk
      tags:
        - pre

    - name: Gather Facts with longer timeout
      ansible.builtin.setup:
        gather_timeout: 720
      tags:
        -pre

    - name: Import envsetup role - setup variable based on target host env
      ansible.builtin.import_role:
        name: envsetup
      tags:
        - pre

    - name: Import VMWare role
      ansible.builtin.import_role:
        name: pre-leapp-vmware
      when: ansible_facts.virtualization_type == "VMware"
      tags:
        - pre

    - name: call check disk space role
      ansible.builtin.include_role:
        name: chkdskspc
      loop: "{{ chkdskspc | dict2items }}"
      loop_control:
        loop_var: chkdirs
      tags:
        - pre

    - name: print chkdskspc dict
      ansible.builtin.debug:
        var: chkdskspc_outdict
      tags:
        - pre

    - name: call resize volume role
      ansible.builtin.include_role:
        name: resizelvmfs
      loop: "{{ chkdskspc_outdict | dict2items }}"
      loop_control:
        loop_var: chkdskspc_out
      tags:
        - pre

    - name: Import pre-leapp RHEL9 steps
      ansible.builtin.import_role:
        name: pre_leapp_9
      tags:
        - pre

    - name: Import Pre Leapp NFS
      ansible.builtin.import_role:
        name: pre_leapp_nfs
      tags:
        - pre

    - name: Import Pre Leapp CIFS
      ansible.builtin.import_role:
        name: pre_leapp_cifs
      tags:
        - pre

    - name: Import Pre Leapp automount
      ansible.builtin.import_role:
        name: pre_leapp_automount
      tags:
        - pre

    - name: Import Pre Leapp powerpath
      ansible.builtin.import_role:
        name: pre_leapp_powerpath
      tags:
        - pre

    - name: Recursively remove directory
      ansible.builtin.file:
        path: /var/log/ripu/ripu.log
        state: absent
      tags:
        - pre

    - name: Import analysis-leapp steps - infra-leapp
      ansible.builtin.import_role:
        name: infra.leapp.analysis
      vars:
        satellite_organization: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
        satellite_activation_key_pre_leapp: "{{ hcsc_runtime[hcsc_env_key].os[upgrade_version].satellite_activation_key_pre_leapp }}"
        satellite_activation_key_leapp: "{{ hcsc_runtime[hcsc_env_key].os[upgrade_version].satellite_activation_key_leapp }}"
        leapp_preupg_opts: '--target 9.3'
        leapp_answerfile: |
          [check_vdo]
          confirm = True
      tags:
        - analysis

- name: RHEL 8 to 9 leapp upgrade
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""
  vars:
    upgrade_version: upgrade9

  tasks:

    - name: Gather Facts with longer timeout
      ansible.builtin.setup:
        gather_timeout: 720
      tags:
        - replay
        - post
        - fstab
        - finish

    - name: Include envsetup role - setup variable based on target host env
      ansible.builtin.import_role:
        name: envsetup
      tags:
        - upgrade
        - replay
        - post
        - fstab
        - finish

    - name: Import upgrade-leapp steps - infra-leapp
      ansible.builtin.import_role:
        name: infra.leapp.upgrade
      vars:
        satellite_organization: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
        satellite_activation_key_post_leapp: "{{ hcsc_runtime[hcsc_env_key].os[upgrade_version].satellite_activation_key_post_leapp }}"
        satellite_activation_key_leapp: "{{ hcsc_runtime[hcsc_env_key].os[upgrade_version].satellite_activation_key_leapp }}"
        leapp_preupg_opts: '--target 9.3'
        #update_grub_to_grub_2: true
        selinux_mode: disabled
      tags:
        - upgrade
        - replay

    - name: Import Post Leapp powerpath
      ansible.builtin.import_role:
        name: post_leapp_powerpath
      tags:
        - post
        - replay

    - name: Import Post Leapp Fstab
      ansible.builtin.import_role:
        name: post_leapp_fstab
      tags:
        - post
        - replay
        - fstab

    - name: Import post upgrade tasks
      ansible.builtin.import_role:
        name: post-leapp
      tags:
        - post
        - replay
        - finish

    - name: Import Post Ulimits role
      ansible.builtin.import_role:
        name: post_ulimit_files_chk
      tags:
        - post
        - replay
        - finish

    - name: Force Reboot
      ansible.builtin.reboot:

    - name: Wait for server to come up
      ansible.builtin.wait_for_connection:
        timeout: 1200
...[root@pwauslifapp01 Leapp-Upgrade]#





[root@pwauslifapp01 Leapp-Upgrade]# cat cat leapp_upgrade_8_mulesoft.yml
cat: cat: No such file or directory
---
- name: RHEL 7 to 8 Leapp Mulesoft
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""

  tasks:
    - name: Force Reboot
      ansible.builtin.reboot:

    - name: Wait for server to come up
      ansible.builtin.wait_for_connection:
        timeout: 1200

    - name: Include Variables from File
      ansible.builtin.include_vars:
        file: leapp_vars.yml

    - name: Import Pre Ulimits role
      ansible.builtin.import_role:
        name: pre_ulimit_files_chk
      tags:
        - pre

    - name: Gather Facts with longer timeout
      ansible.builtin.setup:
        gather_timeout: 720
      tags:
        -pre

    - name: Import envsetup role - setup variable based on target host env
      ansible.builtin.import_role:
        name: envsetup
      tags:
        - pre

#    - name: check vars
#      ansible.builtin.debug:
#        var:  hcsc_runtime[hcsc_env_key]

#    - name: fail here
#      ansible.builtin.fail:
#        msg: "debugging"

    - name: Import VMWare role
      ansible.builtin.import_role:
        name: pre-leapp-vmware
      when: ansible_facts.virtualization_type == "VMware"
      tags:
        - pre

    - name: call check disk space role
      ansible.builtin.include_role:
        name: chkdskspc
      loop: "{{ chkdskspc | dict2items }}"
      loop_control:
        loop_var: chkdirs
      tags:
        - pre

    - name: print chkdskspc dict
      ansible.builtin.debug:
        var: chkdskspc_outdict
      tags:
        - pre

    - name: call resize volume role
      ansible.builtin.include_role:
        name: resizelvmfs
      vars:
        rootvgfreespc: "{{ ansible_facts.lvm.vgs.rootvg.free_g | float }}"
      loop: "{{ chkdskspc_outdict | dict2items }}"
      loop_control:
        loop_var: chkdskspc_out
      tags:
        - pre

    - name: Import pre-leapp steps
      ansible.builtin.import_role:
        name: pre-leapp
      tags:
        - pre

    - name: Import Pre Leapp Mulesoft Steps
      ansible.builtin.import_role:
        name: pre_leapp_mulesoft
      tags:
        - pre

    - name: Import Pre Leapp NFS
      ansible.builtin.import_role:
        name: pre_leapp_nfs
      tags:
        - pre

    - name: Import Pre Leapp CIFS
      ansible.builtin.import_role:
        name: pre_leapp_cifs
      tags:
        - pre

    - name: Import Pre Leapp automount
      ansible.builtin.import_role:
        name: pre_leapp_automount
      tags:
        - pre

    - name: Import Pre Leapp powerpath
      ansible.builtin.import_role:
        name: pre_leapp_powerpath
      tags:
        - pre

    - name: Recursively remove directory
      ansible.builtin.file:
        path: /var/log/ripu/ripu.log
        state: absent
      tags:
        - pre

    - name: Import analysis-leapp steps - infra-leapp
      ansible.builtin.import_role:
        name: infra.leapp.analysis
      vars:
        satellite_organization: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
        satellite_activation_key_pre_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_pre_leapp }}"
        satellite_activation_key_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_leapp }}"
        leapp_preupg_opts: '--target 8.8'
        crypto_policy: LEGACY
        leapp_answerfile: |
          [remove_pam_pkcs11_module_check]
          confirm = True
      tags:
        - analysis
        - pre

- name: RHEL 7 to 8 leapp upgrade
  hosts: all
  strategy: free
  gather_facts: false
  become: true
  force_handlers: true
  environment:
    http_proxy: ""
    https_proxy: ""
    HTTPS_PROXY: ""
    HTTP_PROXY: ""

  tasks:

    - name: Gather Facts with longer timeout
      ansible.builtin.setup:
        gather_timeout: 720
      tags:
        - replay
        - post
        - fstab
        - finish

    - name: Include envsetup role - setup variable based on target host env
      ansible.builtin.import_role:
        name: envsetup
      tags:
        - upgrade
        - replay
        - post
        - fstab
        - finish

    - name: Import upgrade-leapp steps - infra-leapp
      ansible.builtin.import_role:
        name: infra.leapp.upgrade
      vars:
        satellite_organization: "{{ hcsc_runtime[hcsc_env_key].satellite_organization }}"
        satellite_activation_key_post_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_post_leapp }}"
        satellite_activation_key_leapp: "{{ hcsc_runtime[hcsc_env_key].satellite_activation_key_leapp }}"
        leapp_preupg_opts: '--target 8.8'
        #update_grub_to_grub_2: true
        selinux_mode: disabled
        crypto_policy: LEGACY
      tags:
        - upgrade
        - replay

    - name: Import Post Leapp powerpath
      ansible.builtin.import_role:
        name: post_leapp_powerpath
      tags:
        - post
        - replay

    - name: Import Post Leapp Fstab
      ansible.builtin.import_role:
        name: post_leapp_fstab
      tags:
        - post
        - replay
        - fstab


    - name: Import post upgrade tasks
      ansible.builtin.import_role:
        name: post-leapp
      tags:
        - post
        - replay
        - finish

    - name: Import Post Ulimits role
      ansible.builtin.import_role:
        name: post_ulimit_files_chk
      tags:
        - post
        - replay
        - finish

    - name: Import Post Mulesoft Steps
      ansible.builtin.import_role:
        name: post_leapp_mulesoft
      tags:
        - post
        - replay
        - finish

    - name: Force Reboot
      ansible.builtin.reboot:

    - name: Wait for server to come up
      ansible.builtin.wait_for_connection:
        timeout: 1200
...
[root@pwauslifapp01 Leapp-Upgrade]# 
[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat leapp_powerpath.yml |more
---
- name: Pre and Post Leapp PowerPath
  hosts: all
  gather_facts: true
  become: true

  tasks:
    - name: Import Pre Leapp Powerpath
      ansible.builtin.import_role:
        name: pre_leapp_powerpath

#    - name: Import Post Leapp Powerpath
#      ansible.builtin.import_role:
#        name: post_leapp_powerpath
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat vminfo.yml
---
- hosts: all
  gather_facts: true
  become: true
  tasks:
   - name: Run envsetup role
     ansible.builtin.import_role:
      name: envsetup

   - name: print ansible facts
     ansible.builtin.debug:
       var: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
     tags:
       - never
       - debug

   - name: Run vminfo role
     ansible.builtin.import_tasks:
       file: vminfo_debug.yml


[root@pwauslifapp01 Leapp-Upgrade]#


-rw-r--r--  1 anssvc anssvc 1.4K Feb 14 16:18 ansible-navigator.log
[root@pwauslifapp01 Leapp-Upgrade]# cat vminfo_debug.yml
---
- name: vm_info get data about target VM
  community.vmware.vmware_vm_info:
    hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
    username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
    password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
    vm_name: "{{ ansible_facts['hostname'] }}"
    validate_certs: false
  delegate_to: localhost
  register: vminfo

- name: Fail if more than 1 VM is in list
  ansible.builtin.fail:
    msg: Too many results found.
  when:
    - vminfo.virtual_machines | length != 1

- name: set datacenter variable
  ansible.builtin.set_fact:
    vminfo_datacenter: "{{ vminfo | community.general.json_query('virtual_machines[*].datacenter') }}"
    #vminfo_folder: "{{ vminfo | community.general.json_query('virtual_machines[*].folder') }}"
    #vminfo_folder: "{{ vminfo.virtual_machines[0].folder }}"
    vminfo_moid: "{{ vminfo.virtual_machines[0].moid }}"
    #vminfo_guest_name: "{{ vminfo | community.general.json_query('virtual_machines[*].guest_name') }}"
    #vminfo_guest_name: "{{ vminfo.virtual_machines[0].guest_name }}"

- name: debug out
  ansible.builtin.debug:
    #msg: "{{ vminfo_folder }}/{{ vminfo_guest_name }}"
    var: vminfo_moid


- name: Gather some info from a guest using the vSphere API output schema
  community.vmware.vmware_guest_info:
    hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
    username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
    password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
    datacenter: "{{ vminfo_datacenter }}"
    name: "{{ ansible_facts['hostname'] }}"
    schema: "vsphere"
    validate_certs: false
  delegate_to: localhost
  register: vm_facts

#- name: set datacenter variable
#  ansible.builtin.set_fact:
#    #vminfo_moid: "{{ vminfo | community.general.json_query('virtual_machines[*].moid') }}"
#    vminfo_path: "{{ vminfo_folder }}/{{ vminfo_guest_name }}"


#- name: debug out
#  ansible.builtin.debug:
#    var: vminfo_path

- name: Upgrade the VM hardware version
  vmware.vmware_rest.vcenter_vm_hardware:
    vcenter_hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
    vcenter_username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
    vcenter_password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
    upgrade_policy: AFTER_CLEAN_SHUTDOWN
    upgrade_version: VMX_19
    vm: "{{ vminfo_moid }}"
    #vm: "{{ (lookup('vmware.vmware_rest.vm_moid', vminfo_path))[0] }}"
    vcenter_validate_certs: false
  delegate_to: localhost
  register: _result

- name: debug out
  ansible.builtin.debug:
    var: _result

- name: Set the state of a virtual machine to poweroff
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
    username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
    password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
    #moid: "{{ vminfo_moid }}"
    uuid: "{{ vm_facts.instance.config.uuid }}"
    state: shutdown-guest
    validate_certs: false
  delegate_to: localhost

- name: Set the state of a virtual machine to poweron
  community.vmware.vmware_guest_powerstate:
    hostname: "{{ hcsc_runtime[hcsc_env_key].vcenter_name }}"
    username: "{{ hcsc_runtime[hcsc_env_key].ad_domain }}\\{{ hcsc_runtime[hcsc_env_key].vcenter_ro_user }}"
    password: "{{ hcsc_runtime[hcsc_env_key].vcenter_ro_passwd }}"
    #moid: "{{ vminfo_moid }}"
    uuid: "{{ vm_facts.instance.config.uuid }}"
    state: powered-on
    validate_certs: false
  delegate_to: localhost

[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat test_ulimit_files_chk.yml
---
- hosts: all
  gather_facts: false
  become: true
  tasks:
   - name: Call Ulimits Files Check Role
     ansible.builtin.import_role:
      name: pre_ulimit_files_chk
[root@pwauslifapp01 Leapp-Upgrade]#



[root@pwauslifapp01 Leapp-Upgrade]# cat test_ssh.yml
---
- name: RHEL 7 to 8 leapp analysis
  hosts: all
  strategy: free
  gather_facts: true
  become: true
  force_handlers: true

  tasks:
    - name: test sshd check
      ansible.builtin.import_tasks: roles/pre-leapp/tasks/check_ssh.yml
      vars:
        centrify_service_name: centrify-sshd.service
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat test_play.yml
---
- hosts: all
  gather_facts: true
  become: true
  tasks:
   - name: Run Envsetup Role
     ansible.builtin.import_role:
      name: envsetup

   - name: Preserve Permit Root Login
     ansible.builtin.lineinfile:
       backup: true
       path: /etc/ssh/sshd_config
       regexp: '^PermitRootLogin.*$'
       line: "PermitRootLogin yes  #rootlogin is required"
       state: present
       #backrefs: true
     [root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat test_play.yml
---
- hosts: all
  gather_facts: true
  become: true
  tasks:
   - name: Run Envsetup Role
     ansible.builtin.import_role:
      name: envsetup

   - name: Preserve Permit Root Login
     ansible.builtin.lineinfile:
       backup: true
       path: /etc/ssh/sshd_config
       regexp: '^PermitRootLogin.*$'
       line: "PermitRootLogin yes  #rootlogin is required"
       state: present
       #backrefs: true
     [root@pwauslifapp01 Leapp-Upgrade]# cat test_middleware_start.yml
---
- name: RHEL 7 to 8 leapp Middleware
  hosts: all
  #strategy: free
  gather_facts: false
  become: true
  force_handlers: true

  tasks:

    - name: Import Post Middleware Steps
      ansible.builtin.import_role:
        name: post_leapp_middleware_startup

...
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cat test_fstab.yml
---
- hosts: all
  gather_facts: true
  become: true
  tasks:
   - name: Run envsetup role
     ansible.builtin.import_role:
      name: envsetup

   - name: Run vminfo role
     ansible.builtin.import_tasks:
       file: fstab_remove_duplines.yml  ----yah code playbook upper mil jayega 


[root@pwauslifapp01 Leapp-Upgrade]#

[root@pwauslifapp01 Leapp-Upgrade]# cat  ansible.cfg
# Since Ansible 2.12 (core):
# To generate an example config file (a "disabled" one with all default settings, commented out):
#               $ ansible-config init --disabled > ansible.cfg
#
# Also you can now have a more complete file by including existing plugins:
# ansible-config init --disabled -t all > ansible.cfg

# For previous versions of Ansible you can check for examples in the 'stable' branches of each version
# Note that this file was always incomplete  and lagging changes to configuration settings

# for example, for 2.9: https://github.com/ansible/ansible/blob/stable-2.9/examples/ansible.cfg
[galaxy]
server_list = automationhub,galaxy

[galaxy_server.galaxy]
url=https://galaxy.ansible.com/

[galaxy_server.automationhub]
url=https://console.redhat.com/api/automation-hub/
auth_url=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
token=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJhZDUyMjdhMy1iY2ZkLTRjZjAtYTdiNi0zOTk4MzVhMDg1NjYifQ.eyJpYXQiOjE2OTk5ODQyNDUsImp0aSI6Ijc4NTQzNTY0LWE2NjctNDVlYS1iMmE3LTgwMGY4Y2RmNzgyMCIsImlzcyI6Imh0dHBzOi8vc3NvLnJlZGhhdC5jb20vYXV0aC9yZWFsbXMvcmVkaGF0LWV4dGVybmFsIiwiYXVkIjoiaHR0cHM6Ly9zc28ucmVkaGF0LmNvbS9hdXRoL3JlYWxtcy9yZWRoYXQtZXh0ZXJuYWwiLCJzdWIiOiJmOjUyOGQ3NmZmLWY3MDgtNDNlZC04Y2Q1LWZlMTZmNGZlMGNlNjpoY3NjX29wZW5zeXN0ZW1zMTIiLCJ0eXAiOiJPZmZsaW5lIiwiYXpwIjoiY2xvdWQtc2VydmljZXMiLCJub25jZSI6IjhjZDI2ZGQ2LTljYjMtNGI3My04NmI5LTk3OWFjZWYyN2VlNCIsInNlc3Npb25fc3RhdGUiOiI1OGM5ZTU3Ni1mNzkzLTQ5YjctOTFkZC01ZGIxMDVmNTU3OWQiLCJzY29wZSI6Im9wZW5pZCBhcGkuaWFtLnNlcnZpY2VfYWNjb3VudHMgb2ZmbGluZV9hY2Nlc3MiLCJzaWQiOiI1OGM5ZTU3Ni1mNzkzLTQ5YjctOTFkZC01ZGIxMDVmNTU3OWQifQ.16Jjy7XGLclC0DBKu0n98DHxFduN0PJnG-3479WcFS0

[defaults]
callbacks_enabled=timer, profile_tasks, profile_roles
[root@pwauslifapp01 Leapp-Upgrade]#


[root@pwauslifapp01 Leapp-Upgrade]# cd roles
[root@pwauslifapp01 roles]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles
[root@pwauslifapp01 roles]# ls -rlth
total 0
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post-leapp
drwxrwxr-x 4 anssvc anssvc 114 Feb 14 15:48 envsetup
drwxrwxr-x 3 anssvc anssvc  36 Feb 14 15:48 chkdskspc
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3_udev
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_middleware_startup
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_fstab
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre-leapp-vmware
drwxrwxr-x 5 anssvc anssvc  52 Feb 14 15:48 pre-leapp
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_ulimit_files_chk
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 post_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mq
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 recovery
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_ulimit_files_chk
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_symlinks
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_nfs
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mq
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_middleware_shutdown
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_cifs
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_automount
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_9
drwxrwxr-x 4 anssvc anssvc  52 Feb 14 15:48 resizelvmfs
[root@pwauslifapp01 roles]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles
[root@pwauslifapp01 roles]#


roles folder ke under sab ka roles bana huya hai 

[root@pwauslifapp01 roles]# cat post-leapp/tasks/
main.yml               regenerate_rescue.yml
[root@pwauslifapp01 roles]# cat post-leapp/tasks/


[root@pwauslifapp01 roles]# cat post-leapp/tasks/main.yml
---
- name: Regenerate rescue boot image after upgrade
  ansible.builtin.include_tasks: regenerate_rescue.yml

...
[root@pwauslifapp01 roles]#

[root@pwauslifapp01 roles]# cat post-leapp/tasks/regenerate_rescue.yml
---
- name: Find rescue kernels
  ansible.builtin.find:
    paths: /boot
    patterns: 'vmlinuz-*rescue*,initramfs-*rescue*'
  register: rescue_kernels

- name: Remove rescue kernels
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ rescue_kernels.files | map(attribute='path') }}"

- name: "Recreate rescue kernel by re-installing kernel-core-{{ ansible_kernel }}"
  ansible.builtin.shell:
    cmd: "dnf reinstall -y kernel-core-{{ ansible_kernel }}"

...
[root@pwauslifapp01 roles]#

 main yml file ke ke baad niche roles mai define hai yml for all 

====


[root@pwauslifapp01 roles]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles
[root@pwauslifapp01 roles]# ls -rlth
total 0
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post-leapp
drwxrwxr-x 4 anssvc anssvc 114 Feb 14 15:48 envsetup
drwxrwxr-x 3 anssvc anssvc  36 Feb 14 15:48 chkdskspc
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3_udev
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_middleware_startup
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_fstab
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre-leapp-vmware
drwxrwxr-x 5 anssvc anssvc  52 Feb 14 15:48 pre-leapp
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_ulimit_files_chk
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 post_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mq
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 recovery
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_ulimit_files_chk
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_symlinks
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_nfs
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mq
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_middleware_shutdown
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_cifs
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_automount
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_9
drwxrwxr-x 4 anssvc anssvc  52 Feb 14 15:48 resizelvmfs
[root@pwauslifapp01 roles]#

[root@pwauslifapp01 roles]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles
[root@pwauslifapp01 roles]# ls -rlth
total 0
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post-leapp
drwxrwxr-x 4 anssvc anssvc 114 Feb 14 15:48 envsetup
drwxrwxr-x 3 anssvc anssvc  36 Feb 14 15:48 chkdskspc
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3_udev
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 4067471_predictable-nics_3
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_middleware_startup
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_fstab
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre-leapp-vmware
drwxrwxr-x 5 anssvc anssvc  52 Feb 14 15:48 pre-leapp
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_ulimit_files_chk
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 post_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 post_leapp_mq
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 recovery
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_ulimit_files_chk
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_symlinks
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_powerpath
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_nfs
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mulesoft
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_mq
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_middleware_shutdown
drwxrwxr-x 3 anssvc anssvc  19 Feb 14 15:48 pre_leapp_cifs
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_automount
drwxrwxr-x 4 anssvc anssvc  35 Feb 14 15:48 pre_leapp_9
drwxrwxr-x 4 anssvc anssvc  52 Feb 14 15:48 resizelvmfs
[root@pwauslifapp01 roles]# cd post-leapp
[root@pwauslifapp01 post-leapp]# ls -rlth
total 0
drwxrwxr-x 2 anssvc anssvc 51 Feb 14 15:48 tasks
[root@pwauslifapp01 post-leapp]# cd tasks
[root@pwauslifapp01 tasks]# ls -rlth
total 8.0K
-rw-rw-r-- 1 anssvc anssvc 484 Feb 14 15:48 regenerate_rescue.yml
-rw-rw-r-- 1 anssvc anssvc 115 Feb 14 15:48 main.yml
[root@pwauslifapp01 tasks]# cat regenerate_rescue.yml
---
- name: Find rescue kernels
  ansible.builtin.find:
    paths: /boot
    patterns: 'vmlinuz-*rescue*,initramfs-*rescue*'
  register: rescue_kernels

- name: Remove rescue kernels
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ rescue_kernels.files | map(attribute='path') }}"

- name: "Recreate rescue kernel by re-installing kernel-core-{{ ansible_kernel }}"
  ansible.builtin.shell:
    cmd: "dnf reinstall -y kernel-core-{{ ansible_kernel }}"

...
[root@pwauslifapp01 tasks]# cat main.yml
---
- name: Regenerate rescue boot image after upgrade
  ansible.builtin.include_tasks: regenerate_rescue.yml

...
[root@pwauslifapp01 tasks]#




Yah rhel8 to rhel9 ka roles task hai ----


[root@pwauslifapp01 roles]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles
[root@pwauslifapp01 roles]# ls -ld pre_leapp_9
drwxrwxr-x 4 anssvc anssvc 35 Feb 14 15:48 pre_leapp_9
[root@pwauslifapp01 roles]# cd  pre_leapp_9
[root@pwauslifapp01 pre_leapp_9]# ls -rlth
total 0
drwxrwxr-x 2 anssvc anssvc  22 Feb 14 15:48 defaults
drwxrwxr-x 2 anssvc anssvc 118 Feb 14 15:48 tasks
[root@pwauslifapp01 pre_leapp_9]# cat defaults/main.yml
pre_leapp_9_mods_install:
  - vdo
  - kmod-kvdo

pre_leapp_cfysshrpm: "CentrifyDC-openssh"[root@pwauslifapp01 pre_leapp_9]#


[root@pwauslifapp01 pre_leapp_9]# cd tasks
[root@pwauslifapp01 tasks]# ls -rlth
total 20K
-rw-rw-r-- 1 anssvc anssvc  327 Feb 14 15:48 os_update.yml
-rw-rw-r-- 1 anssvc anssvc  407 Feb 14 15:48 nmcli_convert_nics.yml
-rw-rw-r-- 1 anssvc anssvc 2.4K Feb 14 15:48 main.yml
-rw-rw-r-- 1 anssvc anssvc  469 Feb 14 15:48 edit_yumrepo.yml
-rw-rw-r-- 1 anssvc anssvc  934 Feb 14 15:48 check_ssh.yml
[root@pwauslifapp01 tasks]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre_leapp_9/tasks

[root@pwauslifapp01 tasks]# cat os_update.yml
---
- name: Update OS
  ansible.builtin.package:
    name: '*'
    state: latest
  register: update_result

#- name: Reboot if needed
#  when: update_result.changed
#  block:
#    - name: Reboot if needed
#      ansible.builtin.reboot:
#
#    - name: Wait for server to come up
#      ansible.builtin.wait_for_connection:

...
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat os_update.yml
---
- name: Update OS
  ansible.builtin.package:
    name: '*'
    state: latest
  register: update_result

#- name: Reboot if needed
#  when: update_result.changed
#  block:
#    - name: Reboot if needed
#      ansible.builtin.reboot:
#
#    - name: Wait for server to come up
#      ansible.builtin.wait_for_connection:

...
[root@pwauslifapp01 tasks]# cat nmcli_convert_nics.yml
---
- name: Print Interface Config File Names
  ansible.builtin.debug:
    msg: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"

- name: Check For ifcfg File
  ansible.builtin.stat:
    path: "/etc/sysconfig/network-scripts/ifcfg-{{ item }}"
  register: nmcli_ifcfgfile_check

- name: Convert NICs
  ansible.builtin.shell:
    cmd: "nmcli con migrate {{ item }}"
  when: nmcli_ifcfgfile_check.stat.exists[root@pwauslifapp01 tasks]#

[root@pwauslifapp01 tasks]# cat main.yml
---
- name: Remove noexec from fstab
  block:
    - name: Check For Backup Fstab
      ansible.builtin.stat:
        path: /var/tmp/stage/fstab.preleapp
      register: pre_leapp_noexec_existing_fstab_check

    - name: Backup Fstab
      ansible.builtin.copy:
        src: /etc/fstab
        dest: /var/tmp/stage/fstab.preleapp
        owner: root
        group: root
        mode: '0644'
        remote_src: true
      when: not pre_leapp_noexec_existing_fstab_check.stat.exists

    - name: Remove Noexec from varlv mount
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: 'noexec,'
        replace: ''

- name: Check for and remove centrify ssh verify PermitRootLogin
  ansible.builtin.import_tasks: check_ssh.yml
  vars:
    centrify_service_name: "centrify-sshd.service"

- name: Find yum repo Files
  ansible.builtin.find:
    paths: /etc/yum.repos.d
    patterns: '*.repo'
    recurse: false
  register: pre_leapp_yumrepo_files

- name: Edit yum repo Files
  ansible.builtin.include_tasks:
    edit_yumrepo.yml
  loop: "{{ pre_leapp_yumrepo_files.files | map(attribute='path') }}"
  loop_control:
    loop_var: repofile_to_edit

- name: Preserve Permit Root Login
  ansible.builtin.lineinfile:
    backup: true
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin.*$'
    line: "PermitRootLogin yes  #rootlogin is required"
    state: present

- name: Install Required Network Manager
  ansible.builtin.yum:
    name: NetworkManager
    state: latest

- name: Remove VDO and KVDO package to prevent patching issues
  ansible.builtin.yum:
    name: "{{ item }}"
    state: absent
  loop: "{{ pre_leapp_9_mods_install }}"

- name: Start and Enable Newtork Manager
  ansible.builtin.service:
    name: NetworkManager.service
    state: started
    enabled: yes

- name: nmcli Get List of Connected NICs
  ansible.builtin.command:
    cmd: /usr/bin/nmcli -c no -t -f name con
  register: nmcli_out

- name: Run Play
  ansible.builtin.include_tasks:
    file: nmcli_convert_nics.yml
  loop: "{{ nmcli_out.stdout_lines }}"

- name: Update OS
  ansible.builtin.import_tasks: os_update.yml

- name: Force Reboot
  ansible.builtin.reboot:

- name: Wait for server to come up
  ansible.builtin.wait_for_connection:
    timeout: 1200

- name: Reinstall VDO and KVDO packages
  ansible.builtin.yum:
    name: "{{ item }}"
    state: present
  loop: "{{ pre_leapp_9_mods_install }}"
[root@pwauslifapp01 tasks]#


[root@pwauslifapp01 tasks]# cat edit_yumrepo.yml
---
- name: "Disable repos in {{ repofile_to_edit }}"
  ansible.builtin.replace:
    path: "{{ repofile_to_edit }}"
    regexp: '^enabled {0,1}= {0,1}1'
    replace: 'enabled = 0'
  when:
    repofile_to_edit != "/etc/yum.repos.d/redhat.repo"

#- name: "Disable repos in {{ repofile_to_edit }}"
#  ansible.builtin.replace:
#    path: "{{ repofile_to_edit }}"
#    regexp: '^enabled = 1'
#    replace: 'enabled = 0'
#  when:
#    repofile_to_edit != "redhat.repo"
...
[root@pwauslifapp01 tasks]#

[root@pwauslifapp01 tasks]# cat check_ssh.yml
---
- name: Ensure PermitRootLogin is yes
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^PermitRootLogin '
    line: 'PermitRootLogin yes'
    insertafter: '^# Authentication:'
  register: permit_login_comment

- name: Populate service facts
  ansible.builtin.service_facts:

#- name: print ansible_facts.services.keys
#  ansible.builtin.debug:
#    msg: "{{ item }}"
#  with_items: "{{ ansible_facts.services }}"
#  when: centrify_service_name in ansible_facts.services

- name: Disable centrify-ssh
  ansible.builtin.systemd:
    name: "{{ centrify_service_name }}"
    state: stopped
    enabled: false
  when: centrify_service_name in ansible_facts.services.keys() | list

- name: Enable OpenSSH
  ansible.builtin.systemd:
    name: sshd.service
    state: started
    enabled: true

- name: Remove centrify-ssh package
  ansible.builtin.yum:
    name: "{{ pre_leapp_cfysshrpm }}"
    state: absent
[root@pwauslifapp01 tasks]#




now rhel9 ka leap ka role end 


aab kuch pending yml ka uska roles hai wah bhi code likh leta hu 

-----

post leap ka yah hai roles 

[root@pwauslifapp01 roles]# cd post-leapp/
[root@pwauslifapp01 post-leapp]# ls -rlht
total 0
drwxrwxr-x 2 anssvc anssvc 51 Feb 14 15:48 tasks
[root@pwauslifapp01 post-leapp]# cat tasks/
main.yml               regenerate_rescue.yml
[root@pwauslifapp01 post-leapp]# cat tasks/
cat: tasks/: Is a directory
[root@pwauslifapp01 post-leapp]# cat tasks/main.yml
---
- name: Regenerate rescue boot image after upgrade
  ansible.builtin.include_tasks: regenerate_rescue.yml

...
[root@pwauslifapp01 post-leapp]# cat tasks/regenerate_rescue.yml
---
- name: Find rescue kernels
  ansible.builtin.find:
    paths: /boot
    patterns: 'vmlinuz-*rescue*,initramfs-*rescue*'
  register: rescue_kernels

- name: Remove rescue kernels
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop: "{{ rescue_kernels.files | map(attribute='path') }}"

- name: "Recreate rescue kernel by re-installing kernel-core-{{ ansible_kernel }}"
  ansible.builtin.shell:
    cmd: "dnf reinstall -y kernel-core-{{ ansible_kernel }}"

...
[root@pwauslifapp01 post-leapp]#


check disk space ka roles 

[root@pwauslifapp01 roles]# cd chkdskspc/
[root@pwauslifapp01 chkdskspc]# ls -rlth
total 4.0K
drwxrwxr-x 2 anssvc anssvc   22 Feb 14 15:48 tasks
-rw-rw-r-- 1 anssvc anssvc 1.6K Feb 14 15:48 README.md
[root@pwauslifapp01 chkdskspc]# cat tasks/main.yml
- name: Get free space in GB of target dir
  ansible.builtin.set_fact:
    freeg: "{{ (item.size_available / 1073741824) | round(0, 'floor') | float }}"
  when: item.mount == "/{{ chkdirs.key }}"
  with_items: "{{ ansible_facts.mounts }}"

- name: put original record value into in the hold dict
  ansible.builtin.set_fact:
    holddict: "{ '{{ chkdirs.key }}': { 'required': '{{ chkdirs.value.required }}' } }"

- name:
  ansible.builtin.set_fact:
    chkdskspc_outdict: "{{ holddict }}"
  when:
    - chkdskspc_outdict is undefined
    - holddict is defined

- name: append holddict to hold output dict
  ansible.builtin.set_fact:
    chkdskspc_outdict: "{{ chkdskspc_outdict | combine(holddict, recursive=true) }}"
  when: holddict is defined

- name: create results record
  ansible.builtin.set_fact:
    holddict: "{ '{{ chkdirs.key }}': { 'difference': '{{ (chkdirs.value.required | float) - (freeg | float) }}' } }"
  when: freeg | float < chkdirs.value.required | float

- name: append holddict to hold output dict
  ansible.builtin.set_fact:
    chkdskspc_outdict: "{{ chkdskspc_outdict | combine(holddict, recursive=true) }}"
  when: holddict is defined

- name: create status record failed
  ansible.builtin.set_fact:
    holddict: "{ '{{ chkdirs.key }}': { 'chkresult': 'fail' } }"
  when: freeg | float < chkdirs.value.required | float

- name: create status record success
  ansible.builtin.set_fact:
    holddict: "{ '{{ chkdirs.key }}': { 'chkresult': 'success' } }"
  when: freeg | float >= chkdirs.value.required | float

- name: append holddict to hold output dict
  ansible.builtin.set_fact:
    chkdskspc_outdict: "{{ chkdskspc_outdict | combine(holddict, recursive=true) }}"
  when: holddict is defined[root@pwauslifapp01 chkdskspc]#



--

[root@pwauslifapp01 roles]# cat post_leapp_fstab/tasks/main.yml
---
- name: Check if Backup Fstab Exists
  ansible.builtin.stat:
    path: /var/tmp/stage/fstab.preleapp
  register: post_leapp_fstab_existing_fstab_check

- name: Restore Fstab if Needed
  when: post_leapp_fstab_existing_fstab_check.stat.exists
  block:
    - name: Restore Fstab
      ansible.builtin.copy:
        src: /var/tmp/stage/fstab.preleapp
        dest: /etc/fstab
        owner: root
        group: root
        mode: '0644'
        remote_src: true

    - name: Reload Systemd
      ansible.builtin.systemd_service:
        daemon_reload: true

    - name: Remount All Filesystems
      ansible.builtin.command:
        cmd: "mount -a"

    - name: Get systemd automounts
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          grep x-systemd.automount /etc/fstab | tr -s " " | cut -d " " -f2

      register: post_leapp_fstab_systemd_mounts
      ignore_errors: true

    - name: Reboot for automounts
      when: post_leapp_fstab_systemd_mounts.rc == 0
      block:
        - name: Reboot
          ansible.builtin.reboot:

        - name: Wait for connectivity
          ansible.builtin.wait_for_connection:
            timeout: 600
[root@pwauslifapp01 roles]#


 post ulimit file chek ka roles 


[root@pwauslifapp01 roles]# cat post_ulimit_files_chk/tasks/main.yml
---
- name: Check if Backup limits.conf Exists
  ansible.builtin.stat:
    path: /var/tmp/stage/limits.conf.pre
  register: post_existing_limitsconf_check

- name: Restore limits.conf if Needed
  when: post_existing_limitsconf_check.stat.exists
  block:
    - name: Restore limits.conf
      ansible.builtin.copy:
        src: /var/tmp/stage/limits.conf.pre
        dest: /etc/security/limits.conf
        owner: root
        group: root
        mode: '0644'
        remote_src: true

    - name: Remove limits.conf backup file
      ansible.builtin.file:
        path: /var/tmp/stage/limits.conf.pre
        state: absent
[root@pwauslifapp01 roles]#




post leap muleshoft app ka roles 
[root@pwauslifapp01 roles]# cat post_leapp_mulesoft/tasks/main.yml
---
- name: Move Root Cron
  ansible.builtin.copy:
    src: /var/tmp/root_cron
    dest: /var/spool/cron/root
    remote_src: true

# - name: Delete Root Cron
#   ansible.builtin.file:
#     path: /var/tmp/root_cron
#     state: absent

- name: Get Service Facts
  ansible.builtin.service_facts:

- name: Initialize Service List
  set_fact:
    existing_services: "{{ ansible_facts.services.keys() | list }}"

- name: Start and Enable Services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  when: item in existing_services
  loop:
    - filebeat.service
    - filebeat-2.service
    - mule.service

- name: Restart Cron
  ansible.builtin.service:
    name: crond
    state: restarted
  when: "'crond.service' in existing_services"

# - name: Start and Enable Mule Service
#   ansible.builtin.service:
#     name: mule
#     state: started
#     enabled: true

# - name: Start and Enable Filebeat Service
#   ansible.builtin.service:
#     name: filebeat
#     state: started
#     enabled: true

# - name: Start and Enable Filebeat 2 Service
#   ansible.builtin.service:
#     name: filebeat-2
#     state: started
#     enabled: true
[root@pwauslifapp01 roles]#


psot leap mq ka roles 

[root@pwauslifapp01 roles]# cat post_leapp_mq/tasks/main.yml
---
- name: Get Service Facts
  ansible.builtin.service_facts:

- name: Initialize Service List
  ansible.builtin.set_fact:
    existing_services: "{{ ansible_facts.services.keys() | list }}"

- name: Enable and Start Services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  when: item in existing_services
  loop:
    - mqcontrol

- name: Collect queue name(s)
  become_user: mqm
  ansible.builtin.shell:
    cmd: "dspmq"
  register: dspmq_results

- name: Extract queue name(s)
  ansible.builtin.set_fact:
    mq_list: '{{ dspmq_results.stdout_lines | map("regex_replace", "QMNAME\(([A-Z]+)\).*$", "\1") }}'

- name: Display queue name(s)
  ansible.builtin.debug:
    var: mq_list

- name: Start queue(s)
  become_user: mqm
  ibm_messaging.ibmmq.queue_manager:
    qmname: "{{ item }}"
    state: running
  loop: "{{ mq_list }}"

[root@pwauslifapp01 roles]#



recoery wala roels 


[root@pwauslifapp01 roles]# cat recovery/
defaults/ tasks/
[root@pwauslifapp01 roles]# cat recovery/defaults/main.yml
---
# defaults file for upgrade
leapp_upgrade_type: satellite
# leapp_upgrade_type: cdn
# leapp_upgrade_type: rhui
# TODO: Add support for custom repositories?
# leapp_upgrade_type: custom

leapp_upgrade_opts: "{{ '--no-rhsm' if leapp_upgrade_type == 'rhui' else '' }}"

leapp_repos_enabled: []
# leapp_repos_enabled:
#   - satellite-client-6-for-rhel-{{ ansible_distribution_major_version | int + 1 }}-x86_64-rpms

rhel_7_network_install_repo_url: http://capsule1.example.com/pub/ISO/RHEL7.9

# Satellite Organization and Activation Keys are required if using Satellite to change content views
# unless the content view already in use has all required repositories.
# satellite_organization: Example
# satellite_activation_key_post_leapp: rhel{{ ansible_distribution_major_version }}_prod

# Desired selinux mode post Leapp upgrade.
# selinux_mode: enforcing
# selinux_mode: permissive
# selinux_mode: disabled
# Default selinux_mode to what was found during the pre-upgrade analysis automation.
# The config_mode fact is not created if selinux is disabled so default the variable to "disabled"
selinux_mode: "{{ ansible_facts.ansible_local.pre_ripu.selinux.config_mode | default('disabled') }}"

# System-wide cryptographic policies
# set_crypto_policies: false
set_crypto_policies: true
crypto_policy: DEFAULT
# crypto_policy: FUTURE
# crypto_policy: DEFAULT:SHA1

# Whether or not to update from legacy grub to grub2 in post-upgrade steps from RHEL 6 -> 7.
update_grub_to_grub_2: false

# Used by grub to grub2 upgrade in RHEL 6 to 7 post upgrade, and RHEL 7 to 8 post upgrade.
# For grub to grub2 upgrade, if grub_boot_device is not defined, the parent device of /boot
# will be used if present, else the parent device of / will be used.
# For RHEL 7 to 8 post upgrade, used to grub2-install on a device other than the disk
# /boot is on.
# grub_boot_device: /dev/sda

post_reboot_delay: 120

os_path: $PATH

async_timeout_maximum: 7200
async_poll_interval: 60

...
[root@pwauslifapp01 roles]# cat recovery/
defaults/ tasks/
[root@pwauslifapp01 roles]# cat recovery/tasks/
check-for-old-packages.yml      leapp-post-upgrade-selinux.yml  update-and-reboot.yml
leapp-post-upgrade-crypto.yml   main.yml


[root@pwauslifapp01 roles]# cat recovery/tasks/check-for-old-packages.yml
---
# TODO: Use ansible facts.
- name: Search for old packages and packages not versioned by rhel release
  ansible.builtin.shell:
    cmd: >-
      export PATH={{ os_path }};
      set -o pipefail;
      rpm -qa |
      grep -ve '[\.|+]el{{ ansible_distribution_major_version }}' |
      grep -vE '^(gpg-pubkey|libmodulemd|katello-ca-consumer)' |
      sort
  register: unsigned_packages_post
  changed_when: false
  failed_when:
    - unsigned_packages_post.rc != 0
    - unsigned_packages_post.stderr != ""

- name: Set a fact that lists the old packages and packages not versioned by rhel release
  ansible.builtin.set_fact:
    unsigned_packages_post: "{{ unsigned_packages_post.stdout_lines }}"
    cacheable: true

- name: Diff the list of current un-versioned packages and the previous list of un-versioned packages and set fact for missing packages
  ansible.builtin.set_fact:
    missing_non_rhel_packages: "{{ ansible_facts.ansible_local.non_rhel_packages | difference(unsigned_packages_post) }}"

- name: Display warning message if there are any missing non-rhel versioned packages from the pre-upgrade
  ansible.builtin.debug:
    msg:
      - "Warning!! There are non-rhel packages that were removed during the upgrade. Please review the list of missing packages"
      - "{{ missing_non_rhel_packages }}"
  when: missing_non_rhel_packages | length >= 1

- name: Save list of missing packages for future use/review
  ansible.builtin.copy:
    content: "{{ missing_non_rhel_packages }}"
    dest: /etc/ansible/facts.d/missing_packages.fact
    mode: '0644'
    owner: root
    group: root

- name: Display results of search for old packages and packages not versioned by rhel release
  ansible.builtin.debug:
    msg: "{{ unsigned_packages_post }}"

- name: Search for packages from previous os release, packages not versioned by rhel release and all dependent packages
  ansible.builtin.package:
    name: "{{ unsigned_packages_post }}"
    state: absent
  check_mode: true
  register: search_packages_result

- name: Display results of the search for packages from the previous os release, packages not versioned by rhel release and all dependent packages
  ansible.builtin.debug:
    msg: "{{ search_packages_result.changes.removed | default(search_packages_result.results) | default([]) | regex_replace('Removed: ', '') }}"

...
[root@pwauslifapp01 roles]#

[root@pwauslifapp01 roles]# cat recovery/tasks/leapp-post-upgrade-selinux.yml
---
# TODO: Relocate to validation and compare to previous selinux state.
# - name: Ensure there are no SELinux denials
#   ansible.builtin.shell: >
#     export PATH={{ os_path }};
#     ausearch -m AVC,USER_AVC -ts boot 2>&1
#   register: ausearch_results
#   changed_when: false
#   failed_when: ausearch_results.stdout != "<no matches>"

- name: SELinux mode is set to {{ selinux_mode }}
  ansible.posix.selinux:
    policy: targeted
    state: "{{ selinux_mode }}"
  register: selinux_results

- name: Reboot when required for SELinux change
  ansible.builtin.reboot:
    reboot_timeout: 7200
    post_reboot_delay: "{{ post_reboot_delay }}"
  timeout: 7260
  when: selinux_results.reboot_required

- name: Verify SELinux is set to {{ selinux_mode }}
  ansible.posix.selinux:
    policy: targeted
    state: "{{ selinux_mode }}"
  check_mode: true
  register: selinux_check_results
  failed_when: selinux_check_results.changed
...
[root@pwauslifapp01 roles]#


[root@pwauslifapp01 roles]# cat recovery/tasks/update-and-reboot.yml
---
- name: Ensure all updates are applied
  ansible.builtin.package:
    name: '*'
    state: latest
  register: updates_available
  async: "{{ async_timeout_maximum | int }}"
  poll: "{{ async_poll_interval | int }}"

- name: Reboot when updates applied
  ansible.builtin.reboot:
    reboot_timeout: 7200
    post_reboot_delay: "{{ post_reboot_delay }}"
  when: updates_available.changed # noqa: no-handler

...
[root@pwauslifapp01 roles]#


[root@pwauslifapp01 roles]# cat recovery/tasks/leapp-post-upgrade-crypto.yml
---
- name: Include rhel_system_roles.crypto_policies role
  ansible.builtin.include_role:
    name: fedora.linux_system_roles.crypto_policies
  vars:
    crypto_policies_policy: "{{ crypto_policy }}"
...
[root@pwauslifapp01 roles]#


[root@pwauslifapp01 roles]# cat recovery/tasks/main.yml
---
# /etc/dnf/dnf.conf is an ini file and could be parsed to check if exclude has value and run this conditionally.
- name: Clean dnf exclude list
  ansible.builtin.shell: >
    export PATH={{ os_path }};
    dnf config-manager --save --setopt exclude=''

# leapp 7 to 8 documentation cleans up old kernels
- name: Block for RHEL 7 kernel cleanup
  when: "ansible_facts.ansible_local.pre_ripu.distribution_major_version | int == 7"
  block:
    - name: Find old kernels
      ansible.builtin.find:
        paths:
          - /lib/modules
        patterns: '*.el7*'
        file_type: directory
      register: old_kernels

    - name: Remove weak modules from old kernels
      ansible.builtin.shell: |
        export PATH={{ os_path }}
        set -o pipefail
        [ -x /usr/sbin/weak-modules ] && /usr/sbin/weak-modules --remove-kernel {{ item.path | basename }}
      loop: "{{ old_kernels.files }}"
      failed_when: false

    - name: Remove the old kernels from the boot loader entry
      ansible.builtin.shell: |
        export PATH={{ os_path }}
        set -o pipefail
        /bin/kernel-install remove {{ item.path | basename }} {{ item.path }}/vmlinuz
      loop: "{{ old_kernels.files }}"

    - name: Remove any remaining old kernel module directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_kernels.files }}"

- name: Include check-for-old-packages.yml
  ansible.builtin.include_tasks: check-for-old-packages.yml

- name: Remove leapp related packages
  ansible.builtin.package:
    name:
      - leapp
      - leapp-deps
      - leapp-deps-el{{ ansible_distribution_major_version }}
      - leapp-repository-deps-el{{ ansible_distribution_major_version }}
      - kernel-workaround
      - python2-leapp
    state: absent
  register: result

- name: Report leapp related packages that were removed
  ansible.builtin.debug:
    var: result

- name: Unset subscription-manager release
  ansible.builtin.shell: >
    export PATH={{ os_path }};
    subscription-manager release --unset
  when: leapp_upgrade_type == 'satellite' or leapp_upgrade_type == 'cdn'

# TODO: Unset rhui release.

- name: "Register to post leapp activation key"
  community.general.redhat_subscription:
    state: present
    activationkey: "{{ satellite_activation_key_post_leapp }}"
    org_id: "{{ satellite_organization }}"
    force_register: true
  when:
    - leapp_upgrade_type == 'satellite'
    - satellite_organization is defined
    - satellite_activation_key_post_leapp is defined

- name: Include update-and-reboot.yml
  ansible.builtin.include_tasks: update-and-reboot.yml

# TODO: Validate RHEL OS versions again?

# Only found in RHEL 7 to 8 documentation
- name:  Old kernels have been removed from the bootloader entry for RHEL 7 to 8
  ansible.builtin.shell: |
    export PATH={{ os_path }}
    grubby --info=ALL | grep "\.el7" || echo "Old kernels are not present in the bootloader."
  register: grubby_check
  when: ansible_facts.ansible_local.pre_ripu.distribution_major_version | int == 7
  changed_when: false
  failed_when: grubby_check.stdout != 'Old kernels are not present in the bootloader.'

- name: Include tasks for leapp post upgrade selinux
  ansible.builtin.include_tasks: leapp-post-upgrade-selinux.yml

- name: Include tasks for leapp post upgrade crypto policies
  ansible.builtin.include_tasks: leapp-post-upgrade-crypto.yml
  when: set_crypto_policies
...
[root@pwauslifapp01 roles]#



[root@pwauslifapp01 roles]# cd pre_ulimit_files_chk
[root@pwauslifapp01 pre_ulimit_files_chk]# ls -rlht
total 0
drwxrwxr-x 2 anssvc anssvc 22 Feb 14 15:48 tasks
[root@pwauslifapp01 pre_ulimit_files_chk]# cat tasks/main.yml
- name: Get ulimit value for open files
  ansible.builtin.shell:
    cmd: ulimit -n
  register:  pre_ulimit_nofiles

- name: Print ulimit value
  ansible.builtin.debug:
    var: pre_ulimit_nofiles.stdout

- name: Backup limits.conf file
  when: pre_ulimit_nofiles.stdout | int > 1024
  block:
    - name: Check For Backup limits.conf
      ansible.builtin.stat:
        path: /var/tmp/stage/limits.conf.pre
      register: pre_existing_limitsconf_check

    - name: Backup limits.conf
      ansible.builtin.copy:
        src: /etc/security/limits.conf
        dest: /var/tmp/stage/limits.conf.pre
        owner: root
        group: root
        mode: '0644'
        remote_src: true
      when: not pre_existing_limitsconf_check.stat.exists

    - name: Set hard files limit to 1024
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        regexp: '(^root.*hard.*nofile).*'
        line: '\1 1024'
        backrefs: true
        state: present

    - name: Set soft files limit to 1024
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        regexp: '(^root.*soft.*nofile).*'
        line: '\1 1024'
        backrefs: true
        state: present

[root@pwauslifapp01 pre_ulimit_files_chk]# pwd
/home/ansible/ansible-automation/Leapp-Upgrade/roles/pre_ulimit_files_chk
[root@pwauslifapp01 pre_ulimit_files_chk]#


[root@pwauslifapp01 roles]# cd pre_leapp_nfs
[root@pwauslifapp01 pre_leapp_nfs]# ls -rlth
total 0
drwxrwxr-x 2 anssvc anssvc 22 Feb 14 15:48 tasks
[root@pwauslifapp01 pre_leapp_nfs]# cat tasks/main.yml
---
- name: Check For NFS Mounts
  ansible.builtin.set_fact:
    pre_leapp_nfs_nfs_mounts: "{{ ansible_facts.mounts | selectattr('fstype', 'contains', 'nfs') | map(attribute='mount') | list }}"

- name: "Display NFS Mounts"
  ansible.builtin.debug:
    var: pre_leapp_nfs_nfs_mounts

- name: Backup FStab if NFS Mounts Exist
  when: pre_leapp_nfs_nfs_mounts | length > 0
  block:
    - name: Check For Backup Fstab
      ansible.builtin.stat:
        path: /var/tmp/stage/fstab.preleapp
      register: pre_leapp_nfs_existing_fstab_check

    - name: Backup Fstab
      ansible.builtin.copy:
        src: /etc/fstab
        dest: /var/tmp/stage/fstab.preleapp
        owner: root
        group: root
        mode: '0644'
        remote_src: true
      when: not pre_leapp_nfs_existing_fstab_check.stat.exists

    - name: "Unmount NFS Mounts"
      ansible.posix.mount:
        path: "{{ item }}"
        state: unmounted
      loop: "{{ pre_leapp_nfs_nfs_mounts }}"

    - name: "Remove NFS Mounts From Fstab"
      ansible.posix.mount:
        path: "{{ item }}"
        state: absent_from_fstab
      loop: "{{ pre_leapp_nfs_nfs_mounts }}"
[root@pwauslifapp01 pre_leapp_nfs]#



[root@pwauslifapp01 roles]# cat pre_leapp_symlinks/tasks/main.yml
# don't run
#---
#- name: Find All Symlinks In / (Root)
#  find:
#    paths: "/"
#    recurse: no
#    file_type: "link"
#  register: symlink_list
#
#- name: Show Symlinks
#  debug:
#    var: symlink_list.files
#
#- name: Recreate Symlinks With Relative Paths
#  file:
#    src: "{{ item.path | basename }}"
#    dest: "{{ item.path }}"
#    state: link
#    force: yes
#  with_items: "{{ symlink_list.files }}"
[root@pwauslifapp01 roles]#


[root@pwauslifapp01 roles]# cat pre_leapp_mulesoft/tasks/main.yml
---
- name: Move Root Cron
  ansible.builtin.copy:
    src: /var/spool/cron/root
    dest: /var/tmp/root_cron
    remote_src: true

- name: Delete Root Cron
  ansible.builtin.file:
    path: /var/spool/cron/root
    state: absent

- name: Get Service Facts
  ansible.builtin.service_facts:

- name: Initialize Service List
  set_fact:
    existing_services: "{{ ansible_facts.services.keys() | list }}"

- name: Restart Cron
  ansible.builtin.service:
    name: crond
    state: restarted
  when: "'crond.service' in existing_services"

- name: Stop and Disable Services
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  when: item in existing_services
  loop:
    - mule.service
    - filebeat.service
    - filebeat-2.service

# - name: Stop and Disable Mule Service
#   ansible.builtin.service:
#     name: mule
#     state: stopped
#     enabled: false

# - name: Stop and Disable Filebeat Service
#   ansible.builtin.service:
#     name: filebeat
#     state: stopped
#     enabled: false

# - name: Stop and Disable Filebeat 2 Service
#   ansible.builtin.service:
#     name: filebeat-2
#     state: stopped
#     enabled: false
[root@pwauslifapp01 roles]#




mq 


[root@pwauslifapp01 roles]# cat pre_leapp_mq/tasks/main.yml
---
- name: Get Service Facts
  ansible.builtin.service_facts:

- name: Initialize Service List
  ansible.builtin.set_fact:
    existing_services: "{{ ansible_facts.services.keys() | list }}"

- name: Collect queue name(s)
  become_user: mqm
  ansible.builtin.shell:
    cmd: "dspmq"
  register: dspmq_results

- name: Extract queue name(s)
  ansible.builtin.set_fact:
    mq_list: '{{ dspmq_results.stdout_lines | map("regex_replace", "QMNAME\(([A-Z]+)\).*$", "\1") }}'

- name: Display queue name(s)
  ansible.builtin.debug:
    var: mq_list

- name: Stop queue(s)
  become_user: mqm
  ibm_messaging.ibmmq.queue_manager:
    qmname: "{{ item }}"
    state: stopped
  loop: "{{ mq_list }}"

- name: Stop and Disable Services
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  when: item in existing_services
  loop:
    - mqcontrol
[root@pwauslifapp01 roles]#

middleare ka roles 


[root@pwauslifapp01 roles]# cat pre_leapp_middleware_shutdown/tasks/main.yml
---
#############
# Websphere #
#############

- name: Shutdown and Disable IBM Websphere Systemd
  ansible.builtin.service:
    name: websphere
    state: stopped
    enabled: no
  register: websphere_stop_service
  failed_when:
    - websphere_stop_service.failed == true
    - '"Could not find the requested service" not in websphere_stop_service.msg'

- name: Check for IBM Websphere Initd
  ansible.builtin.stat:
    path: /etc/init.d/websphere
  register: pre_leapp_shutdown_services_websphere

- name: Shutdown and Disable IBM Websphere Initd
  ansible.builtin.sysvinit:
    name: websphere
    state: stopped
    enabled: no
  when: pre_leapp_shutdown_services_websphere.stat.exists


##########
# Tomcat #
##########

- name: Shutdown and Disable Tomcat Systemd
  ansible.builtin.service:
    name: tomcat
    state: stopped
    enabled: no
  register: tomcat_stop_service
  failed_when:
    - tomcat_stop_service.failed == true
    - '"Could not find the requested service" not in tomcat_stop_service.msg'

- name: Check for Tomcat Initd
  ansible.builtin.stat:
    path: /etc/init.d/tomcat
  register: pre_leapp_shutdown_services_tomcat

- name: Shutdown and Disable Tomcat Initd
  ansible.builtin.sysvinit:
    name: tomcat
    state: stopped
    enabled: no
  when: pre_leapp_shutdown_services_tomcat.stat.exists

#########
# JBOSS #
#########

- name: Shutdown and Disable JBoss
  ansible.builtin.service:
    name: jboss
    state: stopped
    enabled: no
  register: jboss_stop_service
  failed_when:
    - jboss_stop_service.failed == true
    - '"Could not find the requested service" not in jboss_stop_service.msg'

- name: Check For Jboss Initd
  ansible.builtin.stat:
    path: /etc/init.d/jboss_stop_start_ALL
  register: pre_leapp_shutdown_services_jboss

- name: Shutdown and Disable Jboss Initd
  ansible.builtin.sysvinit:
    name: jboss_stop_start_ALL
    state: stopped
    enabled: no
  when: pre_leapp_shutdown_services_jboss.stat.exists

- name: Check For Jboss EAP Initd
  ansible.builtin.stat:
    path: /etc/init.d/jboss-eap-rhel
  register: pre_leapp_shutdown_services_jboss_eap

- name: Shutdown and Disable Jboss EAP Initd
  ansible.builtin.sysvinit:
    name: jboss-eap-rhel
    state: stopped
    enabled: no
  when: pre_leapp_shutdown_services_jboss_eap.stat.exists

##########
# APACHE #
##########

- name: Shutdown and Disable Apache
  ansible.builtin.service:
    name: apache
    state: stopped
    enabled: no
  register: apache_stop_service
  failed_when:
    - apache_stop_service.failed == true
    - '"Could not find the requested service" not in apache_stop_service.msg'

- name: Check For Apache Initd
  ansible.builtin.stat:
    path: /etc/init.d/apache_stop_start_ALL
  register: pre_leapp_shutdown_services_apache

- name: Shutdown and Disable Apache Initd
  ansible.builtin.sysvinit:
    name: apache_stop_start_ALL
    state: stopped
    enabled: no
  when: pre_leapp_shutdown_services_apache.stat.exists

############
# IBM HTTP #
############

- name: Shutdown and Disable IBM HTTP
  ansible.builtin.service:
    name: ihs
    state: stopped
    enabled: no
  register: ihs_stop_service
  failed_when:
    - ihs_stop_service.failed == true
    - '"Could not find the requested service" not in ihs_stop_service.msg'

- name: Check For IBM HTTP Initd
  ansible.builtin.stat:
    path: /etc/init.d/ihs
  register: pre_leapp_shutdown_services_ihs

- name: Shutdown and Disable IBM HTTP
  ansible.builtin.sysvinit:
    name: ihs
    state: stopped
    enabled: no
  when: pre_leapp_shutdown_services_ihs.stat.exists

- name: Shutdown and Disable IBM HTTP
  ansible.builtin.service:
    name: ihs
    state: stopped
    enabled: no
  register: ihs_stop_service
  failed_when:
    - ihs_stop_service.failed == true
    - '"Could not find the requested service" not in ihs_stop_service.msg'
[root@pwauslifapp01 roles]#


umount cifs on fstab ka roles 


[root@pwauslifapp01 roles]# cat pre_leapp_cifs/tasks/main.ymlg
---
- name: Check For cifs Mounts
  ansible.builtin.set_fact:
    pre_leapp_cifs_cifs_mounts: "{{ ansible_facts.mounts | selectattr('fstype', 'contains', 'cifs') | map(attribute='mount') | list }}"

- name: "Display cifs Mounts"
  ansible.builtin.debug:
    var: pre_leapp_cifs_cifs_mounts

- name: Backup FStab if cifs Mounts Exist
  when: pre_leapp_cifs_cifs_mounts | length > 0
  block:
    - name: Check For Backup Fstab
      ansible.builtin.stat:
        path: /var/tmp/stage/fstab.preleapp
      register: pre_leapp_cifs_existing_fstab_check

    - name: Backup Fstab
      ansible.builtin.copy:
        src: /etc/fstab
        dest: /var/tmp/stage/fstab.preleapp
        owner: root
        group: root
        mode: '0644'
        remote_src: true
      when: not pre_leapp_cifs_existing_fstab_check.stat.exists

    - name: "Unmount cifs Mounts"
      ansible.posix.mount:
        path: "{{ item }}"
        state: unmounted
      loop: "{{ pre_leapp_cifs_cifs_mounts }}"

    - name: "Remove cifs Mounts From Fstab"
      ansible.posix.mount:
        path: "{{ item }}"
        state: absent_from_fstab
      loop: "{{ pre_leapp_cifs_cifs_mounts }}"
[root@pwauslifapp01 roles]#




automoutne ka roels 
[root@pwauslifapp01 roles]# cat pre_leapp_automount/tasks/main.yml
---
- name: Get systemd automounts
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      grep x-systemd.automount /etc/fstab | awk '{ print $2 }'

  register: pre_leapp_automount_systemd_mounts
  ignore_errors: true
  changed_when: false

- name: Show systemd automounts
  ansible.builtin.debug:
    var: pre_leapp_automount_systemd_mounts.stdout_lines

- name: Disable systemd automounts
  when: pre_leapp_automount_systemd_mounts.rc == 0
  block:
    - name: Check For Backedup Fstab
      ansible.builtin.stat:
        path: /var/tmp/stage/fstab.preleapp
      register: pre_leapp_automount_existing_fstab_check

    - name: Backup fstab
      ansible.builtin.copy:
        src: /etc/fstab
        dest: /var/tmp/stage/fstab.preleapp
        owner: root
        group: root
        mode: '0644'
        remote_src: true
      when: not pre_leapp_automount_existing_fstab_check.stat.exists

    - name: Display Automount Systemd Units
      ansible.builtin.debug:
        var: ( item | split('/') )[1:] | join('-') + '.automount'
      loop: "{{ pre_leapp_automount_systemd_mounts.stdout_lines }}"

    - name: Stop Sytemd Automount Units
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          systemctl stop {{ (item | split('/'))[1:] | join('-') + '.automount' }}

      loop: "{{ pre_leapp_automount_systemd_mounts.stdout_lines }}"

    - name: "Remove Systemd Automounts From Fstab"
      ansible.posix.mount:
        path: "{{ item }}"
        state: absent_from_fstab
      loop: "{{ pre_leapp_automount_systemd_mounts.stdout_lines }}"

    - name: Reload Systemd
      ansible.builtin.systemd_service:
        daemon_reload: true
        daemon_reexec: true
...
[root@pwauslifapp01 roles]#



resizerlvm ka roels 


[root@pwauslifapp01 roles]# cat resizelvmfs/
defaults/  README.md  tasks/
[root@pwauslifapp01 roles]# cat resizelvmfs/
defaults/  README.md  tasks/
[root@pwauslifapp01 roles]# cat resizelvmfs/defaults/main.yml
resizelvmfs_vg: 'rootvg'
rootvgfreespc: "{{ ansible_facts.lvm.vgs.rootvg.free_g | float }}"
[root@pwauslifapp01 roles]#

[root@pwauslifapp01 roles]# cat resizelvmfs/tasks/main.yml
---
- name: debug vg free
  ansible.builtin.debug:
    var: rootvgfreespc

- name: Resize LVM Tasks block
  block:
  - name: debug difference
    ansible.builtin.debug:
      var: chkdskspc_out.value.difference

  - name: Exit if there is not enough free space in rootvg
    ansible.builtin.fail:
      msg: There is not enough space in rootvg to meet required space increase.
    when:
      - rootvgfreespc | float <= chkdskspc_out.value.difference | float

  - name: "Extend {{ chkdskspc_out.key }} if less than {{ chkdskspc_out.value.difference }} gb is free"
    community.general.lvol:
      vg: "{{ resizelvmfs_vg }}"
      lv: "{{ chkdskspc_out.key }}lv"
      size: "+{{ chkdskspc_out.value.difference }}g"
      resizefs: true
  when:
    - chkdskspc_out.value.difference is defined



[root@pwauslifapp01 roles]#























===== anshible hcsc ka server history ===

[root@pwauslifapp01 roles]# crontab -l
### NMON Settings - post-install,Tue Oct 24 14:32:39 2023
0 0 * * * umask 0022;cd /var/log/nmon; /usr/local/bin/nmon -ft -s 60 -c 1440
20 0 * * * find /var/log/nmon/*.nmon -mtime +14 -exec rm {} \;
### sysinfo collector - run weekly - post-install,Tue Oct 24 14:32:39 2023
0 05 * * 6 /usr/local/bin/sysinfo.sh dts_disaster_recovery_mid@bcbsil.com
0 9 * * * /usr/sbin/logrotate  --force /etc/logrotate.d/centrifydc
0 21 * * * /usr/sbin/logrotate  --force /etc/logrotate.d/centrifydc
[root@pwauslifapp01 roles]#



[root@pwauslifapp01 roles]# history |more
  163  rpm -qa | grep -i centrify
  164  ls /usr/share/centrifydc/bin/ldapsearch
  165  top
  166  exit
  167  cp /etc/sudoers.d/ansible /etc/sudoers.d/i312337
  168  vi /etc/sudoers.d/i312337
  169  exit
  170  vi /etc/subuid
  171  vi /etc/subgid
  172  exit
  173  vi /etc/subuid
  174  vi /etc/subgid
  175  vi /etc/subuid
  176  vi /etc/subgid
  177  exit
  178  pwd
  179  cd /home/ansible/.ssh
  180  cp /home/i312337/.ssh/*rsa* .
  181  ls -ltr
  182  id anssvc
  183  chown anssvc:anssvc id_rsa id_rsa.pub
  184  ls -ltr
  185  ls -ltr /home/i312337
  186  cd ..
  187  pwd
  188  mv /home/i312337/Leapp-Upgrade .
  189  ls
  190  ls -ltr
  191  chown -R anssvc: Leapp-Upgrade/
  192  ls --ltr
  193  ls -ltr
  194  exit
  195  su - anssvc
  196  exit
  197  ls -ltr /home/i312337
  198  cp Leapp-Upgrade-INF-4085.zip /home/ansible
  199  cp /home/i312337/Leapp-Upgrade-INF-4085.zip /home/ansible
  200  chown anssvc: /home/ansible/Leapp-Upgrade-INF-4085.zip
  201  exit
  202  cat /etc/ansible/ansible.cfg


[root@pwauslifapp01 roles]# cat /etc/ansible/ansible.cfg
# Since Ansible 2.12 (core):
# To generate an example config file (a "disabled" one with all default settings, commented out):
#               $ ansible-config init --disabled > ansible.cfg
#
# Also you can now have a more complete file by including existing plugins:
# ansible-config init --disabled -t all > ansible.cfg

# For previous versions of Ansible you can check for examples in the 'stable' branches of each version
# Note that this file was always incomplete  and lagging changes to configuration settings

# for example, for 2.9: https://github.com/ansible/ansible/blob/stable-2.9/examples/ansible.cfg
[galaxy]
server_list = automationhub,validated,galaxy

[galaxy_server.galaxy]
url=https://galaxy.ansible.com/api/

[galaxy_server.automationhub]
url=https://console.redhat.com/api/automation-hub/content/published/
auth_url=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
token=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJhZDUyMjdhMy1iY2ZkLTRjZjAtYTdiNi0zOTk4MzVhMDg1NjYifQ.eyJpYXQiOjE3MDcxNjIxMzgsImp0aSI6IjEwY2QyOTdlLWE3MTItNGMxOS04N2JhLTUxMzE0ZDA4ZmNhOSIsImlzcyI6Imh0dHBzOi8vc3NvLnJlZGhhdC5jb20vYXV0aC9yZWFsbXMvcmVkaGF0LWV4dGVybmFsIiwiYXVkIjoiaHR0cHM6Ly9zc28ucmVkaGF0LmNvbS9hdXRoL3JlYWxtcy9yZWRoYXQtZXh0ZXJuYWwiLCJzdWIiOiJmOjUyOGQ3NmZmLWY3MDgtNDNlZC04Y2Q1LWZlMTZmNGZlMGNlNjpoY3NjX29wZW5zeXN0ZW1zMTIiLCJ0eXAiOiJPZmZsaW5lIiwiYXpwIjoiY2xvdWQtc2VydmljZXMiLCJub25jZSI6IjQ1MDBkNGNhLWY3ZGYtNGNkYi04YTc3LWY3M2RjYjllYTMxYSIsInNlc3Npb25fc3RhdGUiOiI0ZDI0MTM1Zi00OWFkLTQ5YjktOGVhMy00ZjhiMzRlNWVmOTAiLCJzY29wZSI6Im9wZW5pZCBhcGkuaWFtLnNlcnZpY2VfYWNjb3VudHMgb2ZmbGluZV9hY2Nlc3MiLCJzaWQiOiI0ZDI0MTM1Zi00OWFkLTQ5YjktOGVhMy00ZjhiMzRlNWVmOTAifQ.NJTRsku8QS-5EHgF4ylbhRFu08dhxGKMGfEpO5jt6hU

[galaxy_server.validated]
url=https://console.redhat.com/api/automation-hub/content/validated/
auth_url=https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
token=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJhZDUyMjdhMy1iY2ZkLTRjZjAtYTdiNi0zOTk4MzVhMDg1NjYifQ.eyJpYXQiOjE3MDcxNjIxMzgsImp0aSI6IjEwY2QyOTdlLWE3MTItNGMxOS04N2JhLTUxMzE0ZDA4ZmNhOSIsImlzcyI6Imh0dHBzOi8vc3NvLnJlZGhhdC5jb20vYXV0aC9yZWFsbXMvcmVkaGF0LWV4dGVybmFsIiwiYXVkIjoiaHR0cHM6Ly9zc28ucmVkaGF0LmNvbS9hdXRoL3JlYWxtcy9yZWRoYXQtZXh0ZXJuYWwiLCJzdWIiOiJmOjUyOGQ3NmZmLWY3MDgtNDNlZC04Y2Q1LWZlMTZmNGZlMGNlNjpoY3NjX29wZW5zeXN0ZW1zMTIiLCJ0eXAiOiJPZmZsaW5lIiwiYXpwIjoiY2xvdWQtc2VydmljZXMiLCJub25jZSI6IjQ1MDBkNGNhLWY3ZGYtNGNkYi04YTc3LWY3M2RjYjllYTMxYSIsInNlc3Npb25fc3RhdGUiOiI0ZDI0MTM1Zi00OWFkLTQ5YjktOGVhMy00ZjhiMzRlNWVmOTAiLCJzY29wZSI6Im9wZW5pZCBhcGkuaWFtLnNlcnZpY2VfYWNjb3VudHMgb2ZmbGluZV9hY2Nlc3MiLCJzaWQiOiI0ZDI0MTM1Zi00OWFkLTQ5YjktOGVhMy00ZjhiMzRlNWVmOTAifQ.NJTRsku8QS-5EHgF4ylbhRFu08dhxGKMGfEpO5jt6hU

[defaults]
callbacks_enabled=timer, profile_tasks, profile_roles
[root@pwauslifapp01 roles]#


[root@pwauslifapp01 roles]# history
  164  ls /usr/share/centrifydc/bin/ldapsearch
  165  top
  166  exit
  167  cp /etc/sudoers.d/ansible /etc/sudoers.d/i312337
  168  vi /etc/sudoers.d/i312337
  169  exit
  170  vi /etc/subuid
  171  vi /etc/subgid
  172  exit
  173  vi /etc/subuid
  174  vi /etc/subgid
  175  vi /etc/subuid
  176  vi /etc/subgid
  177  exit
  178  pwd
  179  cd /home/ansible/.ssh
  180  cp /home/i312337/.ssh/*rsa* .
  181  ls -ltr
  182  id anssvc
  183  chown anssvc:anssvc id_rsa id_rsa.pub
  184  ls -ltr
  185  ls -ltr /home/i312337
  186  cd ..
  187  pwd
  188  mv /home/i312337/Leapp-Upgrade .
  189  ls
  190  ls -ltr
  191  chown -R anssvc: Leapp-Upgrade/
  192  ls --ltr
  193  ls -ltr
  194  exit
  195  su - anssvc
  196  exit
  197  ls -ltr /home/i312337
  198  cp Leapp-Upgrade-INF-4085.zip /home/ansible
  199  cp /home/i312337/Leapp-Upgrade-INF-4085.zip /home/ansible

[root@pwauslifapp01 ansible]# pwd
/home/ansible
[root@pwauslifapp01 ansible]# ls -rld Lea*
-rw-r--r-- 1 anssvc anssvc  74523 Nov 13 12:45 Leapp-Upgrade-INF-4085.zip
-rw-rw-r-- 1 anssvc anssvc 245760 Jan 23 19:32 LeappUpgrade_01232024.tar
[root@pwauslifapp01 ansible]# pwd
/home/ansible


  200  chown anssvc: /home/ansible/Leapp-Upgrade-INF-4085.zip
  201  exit
  202  cat /etc/ansible/ansible.cfg
  203  top
  204  vi /etc/ansible/ansible.cfg
  205  vi /etc/environment
  206  exit
  207  passwd anssvc
  208  exit
  209  vi /etc/environment
  210  exit
  211  cat /etc/ansible/ansible.cfg
  212  curl https://registry.redhat.io/v2/
  213  curl -v https://registry.redhat.io/v2/
  214  exit
  215  vi /etc/environment
  216  exit
  217  vi /etc/environment
  218  exit
  219  su - anssvc
  220  su - anssvc
  221  sudo su -
  222  passwd root
  223  uname -r
  224  mount -a
  225  cd /tmp
  226  ls -ltr
  227  scp -pr rscd21_3 root@pwauslapp131.app.hcscint.net:/tmp/
  228  exit
  229  cd /tmp
  230  yum list rsync
  231  yum repolist
  232  subscription manager repo list
  233  subscription-manager repo
  234  subscription-manager repos
  235  subscription-manager status
  236  subscription-manager register --org="Health_Care_Service_Corporation" --activationkey=ak-rhel7-leg-os-prod --force
  237  ls
  238  pwd
  239  exit
  240  cd /usr/local
  241  ls
  242  mkdir -p ecsos/bin
  243  mkdir ecsos/data
  244  ls -ltr
  245  cd ecsos
  246  ls -ltr
  247  cd bin
  248  ls
  249  cd /var/tmp/stage
  250  ls -ltrd
  251  cd /
  252  cd /usr/local/ecsos/bin
  253  ls
  254  vi leapp_upgrade.bash
  255  chmod 755 ./leapp_upgrade.bash
  256  l -ltr
  257  ls -ltr
  258  chown anssvc:anssvc leapp_upgrade.bash
  259  ls -ltr
  260  ./leapp_upgrade.bash
  261  vi leapp_upgrade.bash
  262  ./leapp_upgrade.bash
  263  vi leapp_upgrade.bash
  264  ./leapp_upgrade.bash
  265  ./leapp_upgrade.bash fifo
  266  vi leapp_upgrade.bash
  267  top
  268  ls -ltra
  269  pwd
  270  ssh dwauslpocapp08
  271  pwd
  272  top
  273  cd /home/ansible
  274  ls -ltr
  275  cd ansible_projecs
  276  cd ansible_projects
  277  ls
  278  cd /home/ansible/.ssh
  279  ls
  280  ls -ltr
  281  chmod 600 config
  282  chgrp anssvc autorized_keys
  283  chgrp anssvc authorized_keys
  284  ls -ltr
  285  ls -ltra
  286  top
  287  ls -ltr
  288  passwd anssvc
  289  vi /etc/sudoers
  290  cd /etc/sudoers.d
  291  ls -ltr
  292  vi i312337
  293  ls -ltr
  294  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  295  su - i312337
  296  ls -ltr
  297  exit
  298  ls -ltr
  299  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  300  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  301  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  302  ls -ltr
  303  vi /etc/sudoers
  304  vi /etc/sudoers.d/i312337
  305  su - i312337
  306  vi /etc/sudoers.d/i312337
  307  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  308  ls -ltr /var/tmp/stage
  309  su - i312337
  310  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  311  /usr/local/ecsos/bin/leapp_upgrade.bash
  312  /usr/local/ecsos/bin/leapp_upgrade.bash inventory
  313  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  314  pwd
  315  ls -ltr
  316  su - i312337
  317  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  318  ls -ltr
  319  vi /etc/sudoers/i312337
  320  vi /etc/sudoers.d/i312337
  321  su - i312337
  322  vi /etc/sudoers.d/i312337
  323  su - i312337
  324  vi /etc/sudoers.d/i312337
  325  su - i312337
  326  vi /etc/sudoers.d/i312337
  327  exit
  328  su - i312337
  329  vi /etc/sudoers.d/i312337
  330  grep root /etc/sudoers
  331  vi /etc/sudoer.d/i312337
  332  vi /etc/sudoers.d/i312337
  333  top
  334  ls -ltr
  335  exit
  336  id
  337  su - i312337
  338  vi
  339  vi /etc/sudoers.d/i312337
  340  su - i312337
  341  dvi /usr/local/ecsos/bin/leapp_upgrade.bash
  342  su - i312337
  343  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  344  pwd
  345  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  346  su - i312337
  347  exit
  348  su - i312337
  349  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  350  su - i312337
  351  pwd
  352  exit
  353  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  354  ls
  355  ls -ltr /var/tmp/stage
  356  grep -i emc /var/tmp/stage/phys_host_info.csv
  357  grep -i emc /var/tmp/stage/phys_host_info.csv | awk -F, '{ print $4 }'
  358  grep -i emc /var/tmp/stage/phys_host_info.csv | awk -F, '{ print $4 }' | sort -u
  359  exit
  360  passwd root
  361  vi /etc/sudoers
  362  vi /etc/sudoers.d/i312337
  363  which sudo
  364  vi /etc/sudoers.d/i312337
  365  su - i312337
  366  man sudoers
  367  vi /etc/sudoers
  368  vi /etc/sudoers.d/i312337
  369  su - i312337
  370  vi /etc/sudoers.d/i312337
  371  su - i312337
  372  ls /usr/local/ecsos/bin/
  373  vi /etc/sudoers.d/i312337
  374  su - i312337
  375  vi /etc/sudoers.d/i312337
  376  su - i312337
  377  vi /etc/sudoers.d/i312337
  378  man sudo
  379  su - i312337
  380  id
  381  cd /etc/sudoers.d
  382  ls -ltrt
  383  top
  384  ls -ltr
  385  exit
  386  ls -ltr
  387  pwd
  388  cd /etc/sudoers.d
  389  ls -ltr
  390  getent passwd | grep -i kumar
  391  cp i312337 i364128
  392  vi i364128
  393  getent passwd | grep -i basant
  394  cp i364128 u407934
  395  vi u407934
  396  exit
  397  su -
  398  su - i312337
  399  exit
  400  ls -ltr
  401  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  402  ls -ltr
  403  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  404  exit
  405  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  406  exit
  407  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  408  pwd
  409  exit
  410  vi /usr/local/ecsos/bin/leapp_upgrade.bash
  411  exit
  412  cd /etc/sudoers
  413  ls -ltr
  414  pwd
  415  cd /etc/sudoers.d
  416  ls
  417  cat u407934
  418  cat i312337
  419  exit
  420  passwd root
  421  cd /etc/sudoers.d
  422  ls -ltr
  423  getent passwd | grep -i dickerson
  424  cp i312337 u540702
  425  vi u540702
  426  getent passwd | grep -i dicks
  427  cp u540702 u540778
  428  vi u540778
  429  ls -ltr
  430  cp ansible u540702
  431  vi u540702
  432  cp u540702 u540778
  433  vi u540778
  434  #getent passwd | grep -i dicks
  435  getent passwd | grep -i redman
  436  cp u540778 u540703
  437  vi u540703
  438  exit
  439  su anssvc
  440  su - anssvc
  441  exit
  442  ls -ltr
  443  ps aux | grep bash
  444  exit
  445  ps aux | grep bash
  446  exit
  447  ps aux | grep bash
  448  id
  449  exit
  450  ls /home/ansible/ansible-automation/
  451  ls /home/ansible/ansible-automation/Leapp-Upgrade
  452  exit
  453  ls /usr/local/ecsos/bin
  454  exit
  455  ls -ltr
  456  cd /usr/local/ecsos/bin
  457  ls
  458  cat leapp_upgrade.bash
  459  cp leapp_upgrade.bash update_nic_names.bash
  460  vi update_nic_names.bash
  461  ls -ltr
  462  cd /etc/sudoers.d
  463  ls -ltr
  464  getent passwd | grep -i niranjan
  465  vi i364128
  466  top
  467  ssh twauslsnap02
  468  ssh twauslsnap02.app.test.hcscint.net
  469  ssh 10.134.232.183
  470  ping 10.134.232.183
  471  ssh PWAUSLPAMAP01
  472  uptime
  473  id i367257
  474  exit
  475  visudo
  476  id u407934
  477  id I365817
  478  id i365817
  479  id U412638
  480  id u412638
  481  id u436244
  482  id u445250
  483  lspci
  484  lspci | grep ethernet
  485  lspci | grep -i ethernet
  486  man lspci
  487  ssh pwauslifapp01
  488  ssh dwauslapp19
  489  exit
  490  lspci | grep -i ethernet
  491  lspci -s 0b:00.0
  492  lspci -d 0b:00.0
  493  lspci -s 0b:00.0
  494  lspci -xxxx -s 0b:00.0
  495  lspci -xx -s 0b:00.0
  496  lspci -vvv -s 0b:00.0
  497  dmesg | grep vmxnet3
  498  lspci
  499  lspci | grep -i ethernet
  500  cd /etc/udev
  501  ls
  502  ls rules.d
  503  exit
  504  setenv
  505  set
  506  set | grep http
  507  cd /etc
  508  ls -ltr
  509  grep http *
  510  cd /root
  511  ls -ltra
  512  grep http*
  513  grep http *
  514  cd /etc
  515  ls
  516  ls bash*
  517  vi bashrc
  518  cd /root
  519  ls
  520  ls -tra
  521  ls -ltra
  522  vi .bashrc
  523  vi .bash_profile
  524  cd /etc
  525  ls *profile*
  526  vi profile
  527  vi dzsh_profile
  528  grep http *
  529  grep http_ *
  530  clear
  531  grep http_ *
  532  vi /etc/environment
  533  cd /etc/rhsm
  534  ls
  535  ls pluginconf.d
  536  ls /etc/yum.repos.d
  537  cat /etc/environment
  538  vi /etc/environment
  539  exit
  540  ls -ltr /etc/ansible/ansible.cfg
  541  cat /etc/ansible/ansible.cfg
  542  id
  543  exit
  544  visudo
  545  vi /etc/sudoers
  546  upate-crypto-policies --show
  547  update-crypto-policies --show
  548  update-crypto-policies --set LEGACY
  549  update-crypto-policies --show
  550  exit
  551  vi /etc/environment
  552  exit
  553  vi /etc/environment
  554  yum list
  555  exit
  556  pwd
  557  ls
  558  cd $HOME
  559  ls -ltr
  560  exit
  561  vi /etc/environment
  562  update-crypto-policies show
  563  update-crypto-policies --show

[root@pwauslifapp01 ansible]# update-crypto-policies --show
DEFAULT


  564  update-crypto-policies --set DEFAULT
  565  update-crypto-policies --show
  566  ls -ltr /etc/sudoers.d
  567  cat ansible
  568  cat /etc/sudoers.d/ansible
  569  exit
  570  pwd
  571  ls -ltr
  572  ls -ltr /usr/home/ansible
  573  ls -ltr /usr/home/anssbc
  574  ls -ltr /usr/home/anssvc
  575  ls -ltr /home/anssvc
  576  ls -ltr /home/ansible
  577  cp active_ops_ids .
  578  cp /home/ansible/active_ops_ids .
  579  ls -ltr
  580  exit
  581  awk '{ print $1 }' active_ops_ids
  582  awk -F: '{ print $1 }' active_ops_ids
  583  exit
  584  ls
  585  exit
  586  cd /usr/local/ecsos/bin
  587  ls
  588  cp leapp_upgrade.bash mq_leapp_upgrade.bash
  589  cp leapp_upgrade.bash middleware_leapp_upgrade.bash
  590  cp leapp_upgrade.bash mulesoft_leapp_upgrade.bash
  591  ls -ltr
  592  vi mq_leapp_upgrade.bash
  593  vi mulesoft_leapp_upgrade.bash
  594  vi middleware_leapp_upgrade.bash
  595  cd /var/tmp
  596  ls -ltr
  597  ls -ltr leapp_out_*
  598  mkdir leapp_upgrade_out
  599  mv leapp_out_* leapp_upgrade_out/
  600  ls
  601  ls -ltr
  602  pwd
  603  cd /usr/local/ecsos/bin
  604  ls
  605  grep leapp_upgrade_8 *
  606  vi middleware_leapp_upgrade.bash
  607  ls -ltr
  608  cd /root
  609  ls
  610  pwd
  611  ls -ltr /etc/sudoers.d
  612  cat /etc/sudoers.d/i364128
  613  cat /etc/sudoers.d/i364128 > sudoers_tmplt
  614  ls -ltr
  615  vi sudoers_tmplt
  616  cat sudoers_tmplt
  617  cd /usr/local/ecsos/bin
  618  ls
  619  cp update_nic_names.bash recovery.bash
  620  vi update_nic_names.bash recovery.bash
  621  ls -ltr
  622  cd ..
  623  ls -ltr
  624  cd ..
  625  ls -ltr
  626  pwd
  627  cd /root
  628  ls
  629  ls -ltr
  630  setup_osupgrade_access.bash
  631  ls -ltr
  632  mv active_ops_ids active_ops_ids_full
  633  vi active_ops_ids
  634  cat active_ops_ids_full
  635  vi active_ops_ids
  636  ls -ltr
  637  chmod 700 setup_osupgrade_access.bash
  638  ls -ltr
  639  ./setup_osupgrade_access.bash
  640  ls -ltr
  641  ls -ltr /etc/sudoers.d
  642  ls -ltr
  643  vi setup_osupgrade_access.bash
  644  ./setup_osupgrade_access.bash
  645  vi ./setup_osupgrade_access.bash
  646  ./setup_osupgrade_access.bash
  647  ls -ltr /etc/sudoers.d
  648  cat /etc/sudoers.d/u537249
  649  pwd
  650  ls -ltr
  651  mv active_ops_ids_full active_ops_ids
  652  ls -ltr
  653  cat active_ops_ids
  654  ./setup_osupgrade_access.bash
  655  ls -ltr /etc/sudoers.d
  656  top
  657  ssh twausleceap28
  658  exit
  659  cat /etc/sudoers.d/i312337
  660  su - i312337
  661  exit
  662  subscription-manager release
  663  subscription-manager identity
  664  subscription-manager repos
  665  subscription-manager register --org="Health_Care_Service_Corporation" --activationkey=ak-rhel8-leg-os-dev --force
  666  subscription-manager repos
  667  exit
  668  visudo
  669  cd /etc/sudoers.d/
  670  ls -l
  671  cat u407934
  672  vi i367257
  673  ls -lrt
  674  cat i367257
  675  cd
  676  subscription-manager identity
  677  cat /etc/redhat-release
  678  subscription-manager release
  679  yum list
  680  subscription-manager repos
  681  yum clean all
  682  yum list
  683  subscription-manager register --org="Health_Care_Service_Corporation" --activationkey=ak-rhel7-leg-os-prod --force
  684  yum clean all
  685  subscription-manager refresh
  686  yum list
  687  ls -ltr
  688  exit
  689  yum makecache
  690  exit
  691  subscription-manager repos
  692  subscription-manager register --org="Health_Care_Service_Corporation" --activationkey=ak-rhel8-leg-os-prod --force
  693  yum repolist
  694  exit
  695  passwd root
  696  subscription-manager identity
  697  exit
  698  yum -y install rsync
  699  exit
  700  yum list vdo
  701  exit
  702  netstat -tulpd | grep rscd
  703  netstat -tulpd | grep 4750
  704  netstat -tulpd
  705  netstat -tulpdn
  706  netstat -tulpdn | grep cwrscd
  707  netstat -tulpdn | grep 22
  708  netstat -tulpdn | grep "22 "
  709  ls
  710  ls -ltr
  711  exit
  712  getent passwd | grep Anoop
  713  cd /root
  714  ls
  715  mv active_ops_ids active_ops_ids.orig
  716  vi active_ops_ids
  717  ls
  718  ./setup_osupgrade_access.bash
  719  cat active_ops_ids
  720  ls -ltr /etc/sudoers.d
  721  cat /etc/sudoers.d/u542664
  722  exit
  723  ansible --version
  
  729  ls -rlth
  730  pwd
  731  ls -rlth
  732  history
  733  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  734  cat /home/ansible/ansible-automation/Leapp-Upgrade/.vault_pass.txt
  735  /var/tmp/stage
  736  cd /var/tmp
  737  ls -rth
  738  cd stage
  739  ls -rlth
  740  cat leapp_upgrade_8.yml
  741  find -iname "leapp_upgrade_8.yml "
  742  history
  743  cd
  744  cd  /home/ansible/ansible-automation/Leapp-Upgrade
  745  ls -rlth
  746  cat leapp_upgrade_8.yml
  747  cat leapp_upgrade_8.yml |more
  748  clear
  749  cat leapp_upgrade_8.yml
  750  ls -rtlh
  751  cat leapp_upgrade_8_middleware.yml
  752  cat leapp_upgrade_8_middleware.yml |more
  753  top
  754  ls -rlth
  755  pwd
  756  cd roles
  757  ls -rlth
  758  ls -ld pre-leapp
  759  cd pre-leapp
  760  ls -rlth
  761  cd task
  762  cd tasks
  763  ls -rlth
  764  cat os_update.yml
  765  top
  766  clear
  767  cd /var/tmp/stage/
  768  ll
  769  vi Podman_inv
  770  ll
  771  chmod 662 Podman_inv
  772  ll
  773  chmod 662 Podman_inv
  774  ll
  775  chmod 664 Podman_inv
  776  ll
  777  chmod 777 Podman_inv
  778  ll
  779  chmod 664 Podman_inv
  780  ll
  781  clear
  782  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash Podman_inv
  783  clear
  784  ll
  785  history
  786  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash Podman_inv
  787  cd /var
  788  ll
  789  cd tmp/stage
  790  ll
  791  cat lvp_inv
  792  touch lvp_inv
  793  ll
  794  cd /
  795  cd ..
  796  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash lvp_inv
  797  cd /var/tmp/staged/
  798  cd /var/tmp/
  799  ll
  800  cd stage
  801  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash lvp_inv
  802  vi lvp_inv
  803  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash lvp_inv
  804  systemctl daemon-reload
  805  top
  806  exit
  807  cd /var/tmp/stage/
  808  ll
  809  vi AAH_inv
  810  ll
  811  clear
  812  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash AAH_inv
  813  clear
  814  cd /var/tmp/stage/
  815  ll
  816  vi AAH_inv
  817  sudo -u anssvc /usr/local/ecsos/bin/leapp_upgrade.bash AAH_inv
  818  ifconfig -a
  819  exit
  820  vi /etc/environment
  821  exit
  822  cd /var/tmp
  823  ls -ltr
  824  cd stage
  825  ls -ltr
  826  mv centrify-infrastructure-services-current-rhel5-x86_64.tgz_571 CentrifyDC-db2-current03-rhel5.x86_64.rpm centrify
  827  ls
  828  ls centrify
  829  ls -ltr centrify
  830  chown -R anssvc:anssvc centrify
  831  exit
  832  passwd root
  833  vi /etc/environment
  834  exit
  835  clear
  836  /var/tmp/stage
  837  cd
  838  cd /var/tmp/stage
  839  ls -rlth
  840  cat AAH_inv
  841  cat service_inv
  842  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  843  cd /home/ansible/ansible-automation/Leapp-Upgrade
  844  ls -rlth
  845  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  846  cat  ansible-navigator run leapp_upgrade_8.yml
  847  clear
  848  cat ansible-navigator
  849  ls -rlth
  850  cd ansible-navigator.yml
  851  cat ansible-navigator.yml
  852  pwd
  853  cat   leapp_upgrade_8.yml
  854  cat   leapp_upgrade_8.yml |more
  855  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  856  cat /home/ansible/ansible-automation/Leapp-Upgrade/.vault_pass.txt
  857  pwd
  858  ls -rlth
  859  clera
  860  clear
  861  cd ../..
  862  pwd
  863  ls -rlth
  864  history
  865  cd ansible-automation/
  866  pwd
  867  ls -rlth
  868  cd Leapp-Upgrade
  869  pwd
  870  ls -lrht
  871  top
  872  cat /usr/local/ecsos/bin/leapp_upgrade.bash
  873  cat run
  874  cat  ansible-navigator
  875  cat  ansible-navigator.yml
  876  ls -rlth
  877  top
  878  ls -rlth
  879  cat fstab_remove_duplines.yml
  880  pwd
  881  ls -rlth
  882  cat cat  env_dict_demo.yml
  883  ls -rth
  884  ls -rlth
  885  cat disable_yum_repos.yml
  886  cat roles/pre-leapp/tasks/disable_yum_app_repos.yml
  887  ls r-tlh
  888  ls -lrht
  889  cat check-for-old-packages.yml
  890  l s-rlht
  891  ls -rlth
  892  cat
  893  cat  ansible-navigator.yml
  894  ls -rlth
  895  cat leapp-post-upgrade.yml
  896  cler
  897  cat leapp-post-upgrade.yml
  898  ls -rlth
  899  cat leapp-postupgrade-only.yml
  900  cat leapp-post-upgrade.yml
  901  clear
  902  cat leapp-post-upgrade.yml
  903  cat leapp-postupgrade-only.yml
  904  cat  leapp-post-upgrade.yml
  905  cat  leapp-post-upgrade.yml |more
  906  clear
  907  ls -rlth
  908  cat leapp-post-upgrade.yml
  909  ls -rlth
  910  cat hello_world.yml
  911  cat  regex-test.yml
  912  ls -rlth
  913  cat recovery.yml
  914  ls -rlth printfacts.yml
  915  cat printfacts.yml
  916  ls -rlth
  917  cat nics_rename_only.yml
  918  cat leapp_vars.yml
  919  ls -rlth
  920  cat  leapp_upgrade_9.yml
  921  clear
  922  ls r-tlh
  923  ls -rth
  924  ls -lrth
  925  cat cat leapp_upgrade_8_mulesoft.yml
  926  clar
  927  ls -lrth
  928  cat leapp_upgrade_8_mq.yml
  929  ls -rlth
  930  cat leapp_upgrade_8_middleware.yml
  931  ls -rlth
  932  cat leapp_powerpath.yml |more
  933  cat vminfo.yml
  934  ls -lrht
  935  cat vminfo_debug.yml
  936  calr
  937  clear
  938  ls -rlth
  939  cat test_ulimit_files_chk.yml
  940  cat test_ssh.yml
  941  ls -rlht
  942  cat test_play.yml
  943  cat test_middleware_start.yml
  944  ls -rlth
  945  cat test_fstab.yml
  946  cat fstab_remove_duplines.yml
  947  ls r-tlh
  948  ls -lrht
  949  cat  ansible.cfg
  950  cd roles
  951  pwd
  952  ls -rlth
  953  pwd
  954  cat post-leapp/tasks/
  955  cat post-leapp/tasks/main.yml
  956  cat post-leapp/tasks/regenerate_rescue.yml
  957  ls -lrht
  958  ls -rlth
  959  cd pre-leapp
  960  ls -rlth
  961  cat tasks
  962  cat tasks/os_update.yml
  963  ls -rlth
  964  cd ..
  965  pwd
  966  ls -rlth
  967  cd pre-leapp
  968  pwd
  969  ls -rlth
  970  cat templates/leapp_mod_blacklist.conf.j2
  971  cat defaults/
  972  cat defaults/main.yml
  973  pwd
  974  ls -rlth
  975  pwd
  976  cd tasks/
  977  ls -rlth
  978  pwd
  979  cd ..
  980  pwd
  981  cd ..
  982  ls -rlth
  983  pwd
  984  c ..
  985  cd ..
  986  pwd
  987  ls -rlth
  988  pwd
  989  ls -lrth roles
  990  ls -ld roles
  991  pwd
  992  ls -rth
  993  ls -lrth
  994  pwd
  995  ls -ld roles
  996  cd roles
  997  pwd
  998  ls -rlth
  999  cd leapp
 1000  cd pre-leapp
 1001  ls -rlth
 1002  pwd
 1003  cat defaults/main.yml
 1004  cat templates/
 1005  pwd
 1006  ls -rlth
 1007  cd tasks
 1008  ls -rlth
 1009  cat vmchk_snap.yml
 1010  ls -rlth
 1011  cat remove_kern_mod.yml
 1012  cat  os_update.yml
 1013  ls -rlht
 1014  cat main.yml
 1015  ls -lrht
 1016  cat lvmfs_check.yml
 1017  ls -rlth
 1018  cat kernel_cleanup.yml
 1019  cat edit_yumrepo.yml
 1020  ls -rlht
 1021  cat edit_ifcfg.yml
 1022  cat disable_yum_app_repos.yml
 1023  cat check_ssh.yml
 1024  ls -rlht
 1025  cat check_space.yml
 1026  ls -rlth
 1027  cd ..
 1028  ls -rlth
 1029  cd ..
 1030  ls -rlth
 1031  pwd
 1032  ls -rlth
 1033  cd post-leapp
 1034  ls -rlth
 1035  cd tasks
 1036  ls -rlth
 1037  cat regenerate_rescue.yml
 1038  cat main.yml
 1039  clear
 1040  ls -rlht
 1041  cd ..
 1042  ls -rlth
 1043  cd ..
 1044  ls -rlth
 1045  cd pre-leapp-vmware/
 1046  cd ..
 1047  pwd
 1048  ls -rlth
 1049  cd pre-leapp-vmware/
 1050  pwd
 1051  ls -rlth
 1052  cd tasks
 1053  ls -rlth
 1054  cat main.yml
 1055  ls -rlth
 1056  cd ..
 1057  ls -rlth
 1058  cd ..
 1059  ls -rlth
 1060  cd pre-leapp
 1061  ls -rlth
 1062  cd ..
 1063  ls -rlth
 1064  pwd
 1065  ls -ld pre_leapp_9
 1066  cd  pre_leapp_9
 1067  ls -rlth
 1068  cat defaults/main.yml
 1069  cat defaults/main.yml
 1070  cd tasks
 1071  ls -rlth
 1072  pwd
 1073  cat os_update.yml
 1074  cat nmcli_convert_nics.yml
 1075  ls -rlth
 1076  cat main.yml
 1077  ls -rlth
 1078  cat
 1079  cat edit_yumrepo.yml
 1080  cat check_ssh.yml
 1081  c
 1082  ls -rlth
 1083  cd ..
 1084  ls
 1085  cd ..
 1086  ls -rlth
 1087  cat envsetup
 1088  ls -rlht
 1089  cd envsetup/tasks/
 1090  ls -rlth
 1091  cat main.yml
 1092  cd ..
 1093  ls -rlth
 1094  cd post-leapp/
 1095  ls -rlht
 1096  cat tasks/
 1097  cat tasks/main.yml
 1098  cat tasks/regenerate_rescue.yml
 1099  cd ..
 1100  ls -rlth
 1101  cd chkdskspc/
 1102  ls -rlth
 1103  cat tasks/main.yml
 1104  cd ..
 1105  ls -rlth
 1106  cat post_leapp_fstab/tasks/main.yml
 1107  ls -rlht
 1108  cat post_ulimit_files_chk/tasks/main.yml
 1109  ls -rlth
 1110  cat post_leapp_mulesoft/tasks/main.yml
 1111  ls -rlth
 1112  cat post_leapp_mq/tasks/main.yml
 1113  ls -rlth
 1114  cat recovery/defaults/main.yml
 1115  cat recovery/tasks/check-for-old-packages.yml
 1116  cat recovery/tasks/leapp-post-upgrade-selinux.yml
 1117  cat recovery/tasks/update-and-reboot.yml
 1118  cat recovery/tasks/leapp-post-upgrade-yml
 1119  cat recovery/tasks/leapp-post-upgrade.yml
 1120  cat recovery/tasks/leapp-post-upgrade-crypto.yml
 1121  cat recovery/tasks/main.yml
 1122  ls -rlth
 1123  cd pre_ulimit_files_chk
 1124  ls -rlht
 1125  cat tasks/main.yml
 1126  pwd
 1127  ls -rlth
 1128  cd ..
 1129  ls -rlth
 1130  cd pre_leapp_nfs
 1131  ls -rlth
 1132  cat tasks/main.yml
 1133  cd ..
 1134  ls -rlth
 1135  cat pre_leapp_symlinks
 1136  cat pre_leapp_symlinks/tasks/main.yml
 1137  ls -rtj
 1138  l s-lrth
 1139  ls -lrht
 1140  cat pre_leapp_mulesoft
 1141  cat pre_leapp_mulesoft/tasks/main.yml
 1142  clear
 1143  ls -rlth
 1144  cat pre_leapp_mq/tasks/main.yml
 1145  ls -rlth
 1146  cat pre_leapp_middleware_shutdown
 1147  cat pre_leapp_middleware_shutdown/tasks/main.yml
 1148  clear
 1149  ls -rlth
 1150  cat pre_leapp_cifs
 1151  cat pre_leapp_cifs/tasks/main.yml
 1152  ls -rlth
 1153  cat pre_leapp_automount
 1154  cat pre_leapp_automount/defaults/main.yml
 1155  cat pre_leapp_automount/tasks/main.yml
 1156  ls -rlth
 1157  cat resizelvmfs/defaults/main.yml
 1158  ct resizelvmfs/tasks/main.yml
 1159  cat resizelvmfs/tasks/main.yml
 1160  ls -rlth
 1161  crontab -l
 1162  history |more
 1163  history
[root@pwauslifapp01 roles]#




--- crontba and script --

[root@pwauslifapp01 ansible]# crontab -l
### NMON Settings - post-install,Tue Oct 24 14:32:39 2023
0 0 * * * umask 0022;cd /var/log/nmon; /usr/local/bin/nmon -ft -s 60 -c 1440
20 0 * * * find /var/log/nmon/*.nmon -mtime +14 -exec rm {} \;
### sysinfo collector - run weekly - post-install,Tue Oct 24 14:32:39 2023
0 05 * * 6 /usr/local/bin/sysinfo.sh dts_disaster_recovery_mid@bcbsil.com
0 9 * * * /usr/sbin/logrotate  --force /etc/logrotate.d/centrifydc
0 21 * * * /usr/sbin/logrotate  --force /etc/logrotate.d/centrifydc

for any app log rotate script  via scrpt and corntba mai entry karne se 

[root@pwauslifapp01 ansible]# cat /etc/logrotate.d/centrifydc
/var/log/centrifydc.log /var/log/centrify_mapper_error.log {
    compress
    missingok
    rotate=5
    size=100M
    create 600 root root
    sharedscripts
    postrotate
        if [ -f /var/run/rsyslogd.pid ]; then
            /bin/kill -HUP `cat /var/run/rsyslogd.pid 2> /dev/null` 2> /dev/null || true
        else
            /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
        fi
    endscript
}

/var/log/centrify_client.log {
    compress
    missingok
    rotate=5
    size=100M
    create 622 root root
    sharedscripts
    postrotate
        if [ -f /var/run/rsyslogd.pid ]; then
            /bin/kill -HUP `cat /var/run/rsyslogd.pid 2> /dev/null` 2> /dev/null || true
        else
            /bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true
        fi
    endscript
}

[root@pwauslifapp01 ansible]#




[root@pwauslifapp01 ansible]# cat /usr/local/bin/sysinfo.sh
#!/bin/ksh
#
# sysinfo - System information collector.
# Copyright (c) 2004-2014 Sergey Leonovich, HCSC ECS Open Systems
# Author: Sergey Leonovich, (312)-282-3863
#
# Usage: sysinfo.sh [ email ]
#
# Works on AIX, Solaris and Linux (SLES, RedHat)
# Saves system information in /var/sysinfo/
#
# email - directs the script to Email the HTML file to this address, system must
#         have uuencode installed for this to work
#
# LIMITATIONS:
# AIX: assumes server may be running HACMP
# Solaris: no microcode level checking; assumes server may be running Veritas Cluster;
# assumes server is using Veritas volume manager;
# Linux: no microcode level checking; assumes server is using RedHAT LVM;
# assumes server is not running any cluster services;
#
# 12/09/2004 - 1.0 NEW, works for AIX 5, Sergey Leonovich
# 10/13/2005 - 1.1 Added HTML support
# 10/17/2005 - 1.2 Added Solaris 8-9
# 10/18/2005 - 1.3 Added Linux SLES 9
# 10/20/2005 - 1.3.1 Added E-mail function
# 10/21/2005 - 1.3.2 Added VCS cluster commands; Ethernet adapters info (Linux)
# 11/14/2005 - 1.3.3 Added chkconfig and other minor fixes (Linux)
# 11/30/2005 - 1.3.4 Added lkcd check for system dump, grub's menu.lst (Linux)
# 01/24/2006 - 1.3.5 Added "ls /boot" for DR (Linux)
# 02/01/2006 - 1.3.6 Added a few extra commands for Veritas Clustering
#                    and Storage Foundation - Ashley Andrews
#                    Fixed ntp.conf
# 03/13/2006 - 1.3.7 Added vmtune for AIX 5.1
#                    Added "ioo -a" for AIX (per Stavros)
#                    Added "schedo -a" for AIX
#                    Added rpcinfo (all UNIXs) and nfso for AIX in NFS section
#                    Added recording of permissions for mounted filesystems (per DanW)
#                    Added clRGinfo,clgetinterfaces,cllsfs,cllslv,cllvgdata
#                    in Cluster section for AIX (per KennyL)
# 03/15/2006 - 1.3.8 Minor fixes (enforced absolute path in a few commands)
# 05/05/2006 - 1.3.9 Minor fixes (path in Linux lvm commands - RedHat)
#                    Added /etc/redhat-release, static routes (RedHat)
#                    Added /proc/version to determine Linux vendor
# 08/24/2006 - 1.3.10 Added get_dr function (only supported on Linux)
# 09/11/2006 - 1.3.11 Added support for AIX in get_dr function
# 12/12/2006 - 1.3.12 Fixed the bug in get_cron function
# 12/16/2007 - 1.3.13 Added lslicense command for AIX
# 01/01/2008 - 1.3.14 Added more commands (per Stavros's input) for AIX HACMP
#                     cllsif, cllscf, cllsnw, cllsserv, cldisp, cldump
# 02/12/2008 - 1.3.15 Fixed the bug in Emailing output (subject line was causing problem with
#                     SMDB - can only have hostname)
# 05/06/2008 - 1.3.16 Fixed minor bug in AIX part of get_fs function (missing ')
# 05/14/2008 - 1.3.17 Added logic to save 2 previous copies of sysinfo under
#                     /var/sysinfo
# 05/20/2008 - 1.3.18 Made commands execution more reliable by adding PATH for
#                     for each UNIX; absolute path of the command is now being
#                     determined in exec_command function; A few exceptions exist;
#                     Changed datapath(AIX), netstat(AIX/Solaris) commands to chop off extra columns
#                     of output (sysinfo_diff)
#                     Added mount command (all) to track filesystems changes (sysinfo_diff)
#                     Fixed a bug in Solaris displaying mount points permissions
#                     Per LeeW added this to Solaris:
#                        /etc/VRTSvcs/conf/config/main.cf (cluster config)
#                        /etc/netmasks (networks definitions)
#                     /var/sysinfo/*html* files will have their permissions set to 755
#                     in case they need to be remotely downloaded (to pbrxmast)
#                     Added MPIO pcmpath commands per DanW
#                     Added grep -v to "ifconfig -a" for linux to discard
#                     counters
# 07/14/2008 - 1.3.19 Added sysctl for Linux
# 07/22/2008 - 1.3.20 Added mpio commands for Linux in Multipath section
#                     Added yaboot.conf (for Linux on PSeries platform)
#                     Added hwinfo (for Linux)
# 08/27/2008 - 1.3.21 Fixed bug in calling record_dr_data ( no absolute path)
# 12/09/2009 - 1.3.22 Added "Virtualization" section, at this point only Solaris
#                     zones command was added.
# 01/28/2010 - 1.3.23 changed df command options for Linux (for DR per Joel)
# 07/27/2011 - 1.3.24 Added collection of info on disk LUNs (lspv and bootinfo -s)
# 07/28/2011 - 1.3.25 Added execution of /usr/local/bin/dr_data.pl -a record (AIX only)
# 07/29/2011 - 1.3.26 Changed option for dr_data.pl (from -a record to --record)
# 10/16/2013 - 1.3.27 Added oslevel -s
# 04/30/2014 - 1.3.28 Added section for oracle ASM disks
# 09/02/2014 - 1.3.29 Added /usr/local/bin/lsviocfg

VERSION="1.3.29"
LAST_MODIFIED="09/02/2014"
NOT_IMPLEMENTED="This feature is not implemented for this OS yet!"
export PATH=$PATH:/bin:/usr/bin:/sbin:/usr/local/bin

#------------- display functions-------------------

function font_on {
  echo "<font face='Courier New' size="$1" color="$2">"
}

function font_off {
  echo "</font>"
}

function display_header {    # $1 - Size of the font
  size=$1; shift
  font_on $size blue
  echo "$*"
  font_off
}

function create_title {      # $1 - html anchor code
  section=$1
  shift;
  title=$*

  font_on 5 blue
  echo "<a href="#$section">  $title </a><br>" >> $CONTENTS
  echo "<pre><b><u><a name=$section>$title</a></u></b></pre>"
  font_off
}

function display_line {
  color=$1; shift            # $1 - color
  font_on 3 $color
  echo "<pre>$*</pre>"
  font_off
}

#-------------- Execute command, cat a file --------

function exec_command {
  # Command should be passed as relative path (usually)
  # Check PATH statements at the end of the script to make
  # sure the command can be resolved/found
  #
    command=`echo  $* | awk '{print $1}'`
  arguments=`echo $*  | awk '{$1=""; print $0}'`

  # Let's see if the command is in PATH
  which $command > /dev/null 2>&1
  rc=$?

  if [ $rc -eq 0 ]
  then
    # run which again to get absolute path
    #
    command_absolute_path=`which $command`
    run_this="$command_absolute_path"" $arguments"
    #echo "$run_this..." > /dev/tty

    display_line blue "$run_this"
    font_on 3 black; echo "<pre>"; eval $run_this; echo "</pre>"; font_off
  else
    display_line blue "Cannot execute $command - does not exist?"
  fi
}

function cat_file {
  if [ -r $1 ]
  then
    exec_command $CAT $1
  else
    display_line blue "Cannot open $1 - does not exist?"
  fi
}

#--------------main functions--------------------

function get_os {
  create_title os "Operating System"
  case $MYOS in
  AIX)
    exec_command hostname
    exec_command uptime
    exec_command oslevel -r
    exec_command oslevel -s
    exec_command lslicense
    exec_command uname -M
    exec_command uname -m
    exec_command uname -L
    exec_command lsattr -El sys0
    exec_command /usr/samples/kernel/vmtune -a
    exec_command vmo -L
    exec_command ioo -a
    exec_command schedo -a
    exec_command sysdumpdev -l
    exec_command bootlist -m normal -o
    exec_command lscons
    ;;
  SunOS)
    exec_command hostname
    exec_command hostid
    exec_command uptime
    cat_file /etc/release
    exec_command uname -a
    cat_file /etc/system
    exec_command /usr/platform/`/usr/bin/uname -m`/sbin/eeprom
    cat_file /kernel/drv/sd.conf
    cat_file /kernel/drv/qla2300.conf
    cat_file /etc/path_to_inst
    exec_command modinfo
    ;;
  Linux)
    exec_command hostname
    exec_command hostid
    exec_command uptime
    exec_command uname -a
    cat_file /proc/version
    exec_command SPident -v            # Version for SLES
    cat_file /etc/redhat-release       # Version for Redhat
    exec_command lkcd query            # sysdump for SLES
    cat_file /etc/sysconfig/diskdump   # sysdump for RedHat
    cat_file /etc/lilo.conf
    cat_file /etc/grub.conf
    cat_file /boot/grub/menu.lst
    cat_file /etc/yaboot.conf          # PPC boot loader, only on pSeries
    exec_command $LS_COMMAND -al /boot
    cat_file /proc/modules
    exec_command sysctl -a             # Current kernel parameters
    cat_file /etc/sysctl.conf          # Modified kernel parameters
  esac
}

function get_vpath {
  create_title vpath "Virtual Path / Multi path devices"
  case $MYOS in
  AIX)
    # Assumes we are using SDD with IBM storage / SVC
    exec_command "datapath query adapter | awk '{print \$1,\$2,\$3,\$4}'"
    exec_command "datapath query device  | awk '{print \$1,\$2,\$3,\$4}'"
    exec_command lsvpcfg
    exec_command "pcmpath query adapter  | awk '{print \$1,\$2,\$3,\$4}'"
    exec_command "pcmpath query device   | awk '{print \$1,\$2,\$3,\$4}'"
    ;;
  SunOS)
    # Assumes we are using Veritas
    exec_command vxdisk path
    ;;
  Linux)
    # Assumes we use mpio
    exec_command multipath -l
    exec_command ls -lR /dev/disk/*
  esac
}

function get_dr {
  create_title dr "Disaster Recovery data"
  case $MYOS in
  Linux)
    # Execute Linux version of the script
    exec_command record_dr_data.sh record
    ;;
  AIX)
    # Execute AIX version on the script
    exec_command record_dr_data.sh record
    exec_command /usr/local/bin/dr_data.pl --record
    ;;
  *)
    # Supported on Linux and AIX
    display_line red $NOT_IMPLEMENTED
  esac
}

function get_luns {
  create_title luns "LUNs info for DR"
  case $MYOS in
  AIX)
    luns=/tmp/luns
    echo "# disk:size:VG:pvid:dr_tag" > $luns
    lspv | while read line
    do
      pv=`echo $line        | awk '{print $1}'`
      pvid=`echo $line      | awk '{print $2}'`
      vg=`echo $line        | awk '{print $3}'`
      size=`bootinfo -s $pv | awk '{print $1}'`
      echo "$pv:$size:$vg:$pvid:_DR_LUNS_" >> $luns
    done
    cat_file $luns
    rm $luns
    ;;
  *)
    # Only supported on AIX
    display_line red $NOT_IMPLEMENTED
    ;;
  esac
}

function get_asm_disks {
  create_title luns "Oracle ASM disks"
  case $MYOS in
  AIX)
   exec_comm 'for i in `lspv |grep hdisk|awk '{print $1}'`;do echo "$i `lquerypv -h /dev/$i |grep -i orcl`";done'
   ;;
  *)
   # Only supported on AIX
   display_line red $NOT_IMPLEMENTED
   ;;
  esac
}

function get_software {
  create_title software "Installed Software"
  case $MYOS in
  AIX)
    exec_command lslpp -L
    exec_command lppchk -v
    ;;
  SunOS)
    exec_command pkginfo -l
    exec_command showrev -p
    ;;
  Linux)
    exec_command rpm -qa
  esac
}

function get_memory_cpu {
  create_title memory_cpu "Memory and CPU"
  case $MYOS in
  AIX)
    exec_command prtconf -ckmsL
    exec_command lsattr -El mem0
    exec_command lsdev -Cc processor
    exec_command lsps -a
    ;;
  SunOS)
    exec_command psrinfo -v
    exec_command prtconf
    exec_command isalist -v
    exec_command isainfo
    exec_command swap -l
    exec_command swap -s
    exec_command pagesize
    ;;
  Linux)
    cat_file /proc/cpuinfo
    cat_file /proc/meminfo
    exec_command swapon -s
  esac
}

function get_vpd {
  create_title vpd "Firmware Levels"
  case $MYOS in
  AIX)
    exec_command lsmcode -c
    exec_command lscfg -vp
    ;;
  *)
    # Solaris and Linux are not supported (yet?)
    display_line red $NOT_IMPLEMENTED
    ;;
  esac

}

function get_adapters {
  create_title adapters "Disks, Adapters, etc"
  case $MYOS in
  AIX)
    exec_command lscfg
    exec_command lsdev -Cc disk
    exec_command lsdev -Cc pdisk
    exec_command lsdev -Cc adapter
    display_line blue "---------- Begin of Adapters settings..."
    for i in `lsdev -Cc adapter|cut -f1 -d' '`
    do
      exec_command lsattr -El $i
    done
    display_line blue "---------- End of Adapters settings..."
    exec_command lsdev -Cc tape
    ;;
  SunOS)
    exec_command /usr/platform/`/usr/bin/uname -m`/sbin/prtdiag -v
    ;;
  Linux)
    exec_command hwinfo --short
    cat_file /proc/scsi/scsi
    for i in `ifconfig -a|cut -f1 -d" " |grep eth`
    do
      [ -z $$i ] && continue
      exec_command ethtool $i
    done
    cat_file /proc/devices
    cat_file /proc/interrupts
    cat_file /proc/partitions
  esac
}

function get_vg {
  create_title lvm "VGs, PVs, LVs"
  case $MYOS in
  AIX)
    exec_command lspv
    exec_command lsvg
    exec_command lsvg -o
    for i in `lsvg -o`
    do
      display_line blue "---------- Begin of $i Volume Group"
      exec_command lsvg $i
      exec_command lsvg -p $i
      exec_command lsvg -l $i
      display_line blue "---------- End of $i Volume Group"
    done
    ;;
  SunOS)
    # Veritas Volume Manager Disk Information
    exec_command vxdisk -o alldgs list
    exec_command vxprint -ht
    exec_command vxprint -l
    # Veritas License and Version Information
    exec_command vxlicrep
    ;;
  Linux)
    # LVM is assumed
    exec_command pvscan -v
    exec_command vgscan -v
    exec_command vgs -v
    exec_command lvs
    exec_command vgdisplay -v
    ;;
  esac
}

function get_fs {
  create_title fs "Filesystems"
  case $MYOS in
  AIX)
    FS_MOUNTED=`df | awk '{print $7}'`
    exec_command "mount | awk '{print \$1,\$2}'"
    exec_command df -k
    cat_file /etc/filesystems
    ;;
  SunOS)
    FS_MOUNTED=`$CAT /etc/mnttab | awk '{print $2}'`
    #FS_MOUNTED=`df | /usr/bin/awk '{print $1}'`
    exec_command "mount | awk '{print \$1,\$3}'"
    exec_command df -k
    exec_command df -h
    cat_file /etc/vfstab
    ;;
  Linux)
    FS_MOUNTED=`$CAT /etc/mtab | awk '{print $2}'`
    exec_command "mount | awk '{print \$1,\$3}'"
    exec_command df -kP
    exec_command df -h
    cat_file /etc/fstab
    ;;
  esac

  display_line blue "---------- Begin of Permissions of mount points..."
  for i in $FS_MOUNTED
  do
    exec_command $LS_COMMAND -ld $i
  done
  display_line blue "---------- End of Permissions of mount points..."
}


function get_inet {
  create_title tcpip "Network interfaces, routing, etc"
  case $MYOS in
  AIX)
    exec_command lsattr -El inet0
    exec_command ifconfig -a
    exec_command "netstat -in | grep -v lo0 | awk '{print \$1,\$2,\$3,\$4}'"
    exec_command "netstat -rn | awk '{print \$1,\$2,\$3}'"
    exec_command lssrc -g tcpip
    exec_command no -a
    ;;
  SunOS)
    exec_command ifconfig -a
    exec_command "netstat -in | awk '{print \$1,\$2,\$3,\$4}'"
    exec_command "netstat -rn | awk '{print \$1,\$2,\$3}'"
    for i in `$LS_COMMAND /etc/hostname.*`
    do
      cat_file $i
    done
    cat_file /etc/netmasks
    cat_file /etc/defaultrouter
    ;;
  Linux)
    exec_command "ifconfig -a | egrep -v 'bytes|packets|collision'"
    # SuSE
    for i in `$LS_COMMAND /etc/sysconfig/network/ifcfg-eth*`
    do
      cat_file $i
    done
    # RedHat
    for i in `$LS_COMMAND /etc/sysconfig/network-scripts/ifcfg-eth*`
    do
      cat_file $i
    done
    #
    exec_command "netstat -in | awk '{print \$1,\$2}'"
    exec_command netstat -rn
    cat_file /etc/sysconfig/network/routes # SLES
    cat_file /etc/sysconfig/static-routes  # RHES
    ;;
  esac
}

function get_inet_security {
  create_title tcpip_sec "Network Security"
  cat_file /hosts.equiv
  cat_file /.rhosts
  cat_file /etc/ftpusers
  case $MYOS in
  AIX)
    exec_command lsuser -a rlogin root
    exec_command lssrc -s sendmail
    ;;
  Linux)
    cat_file /etc/securetty
    ;;
  esac
}

function get_inet_resolv {
  create_title tcpip_resolv "Name Resolution"
  cat_file /etc/resolv.conf
  case $MYOS in
  AIX)
    cat_file /etc/netsvc.conf
    ;;
  SunOS)
    cat_file /etc/nsswitch.conf
    ;;
  Linux)
    cat_file /etc/nsswitch.conf
  esac
}

function get_inet_ntp {
  create_title tcpip_ntp "Network Time Protocol"
  case $MYOS in
  AIX)
    cat_file /etc/ntp.conf
    ;;
  SunOS)
    cat_file /etc/inet/ntp.conf
    ;;
  Linux)
    cat_file /etc/ntp.conf
    ;;
  esac
}

function get_tsm {
  if [ -f /usr/bin/dsmc ]
  then
    create_title tsm "TSM Backup Client Settings"
    exec_command dsmc q session
    exec_command dsmc q schedule
    case $MYOS in
    AIX)
      TSM_DIR=/usr/tivoli/tsm/client/ba/bin
      ;;
    SunOS)
      TSM_DIR=/opt/tivoli/tsm/client/ba/bin
      ;;
    Linux)
      TSM_DIR=/opt/tivoli/tsm/client/ba/bin
    esac
    cat_file $TSM_DIR/dsm.sys
    cat_file $TSM_DIR/dsm.opt
  else
    display_line blue "TSM does not seem to be installed"
  fi
}

function get_users {
  create_title users "Users and Groups"
  cat_file /etc/passwd
  cat_file /etc/group
}

function get_cron {
  create_title cron "Users Crontabs"
  case $MYOS in
  AIX)
    CRON_DIR1=/var/spool/cron/crontabs
    ;;
  SunOS)
    CRON_DIR1=/var/spool/cron/crontabs
    ;;
  Linux)
    CRON_DIR1=/var/spool/cron/tabs  # SLES
    CRON_DIR2=/var/spool/cron       # RedHat
    exec_command $LS_COMMAND -l /etc/cron.*
    ;;
  esac
  #
  for CRONDIR in $CRON_DIR1 $CRON_DIR2
  do
    if [ -d $CRONDIR ]
    then
      for i in `$LS_COMMAND $CRONDIR`
      do
        if [ -f $CRONDIR/$i ]
        then
          cat_file $CRONDIR/$i
        fi
      done
    fi
  done
}

function get_startup {
  create_title startup "System Startup Files"
  cat_file /etc/inittab
  cat_file /etc/rc.local
  cat_file /etc/profile
  cat_file /etc/inittab
  cat_file /etc/environment
  case $MYOS in
  SunOS)
    exec_command $LS_COMMAND -l /etc/rc2.d
    exec_command $LS_COMMAND -l /etc/rc3.d
    ;;
  Linux)
    exec_command chkconfig --list
    ;;
  esac
}

function get_nfs {
  create_title nfs "NFS"
  case $MYOS in
  AIX)
    exec_command lssrc -g nfs
    exec_command lsfs -v nfs
    cat_file /etc/exports
    exec_command rpcinfo -p
    exec_command nfso -a
    ;;
  SunOS)
    cat_file /etc/dfs/dfstab
    exec_command rpcinfo -p
    ;;
  Linux)
    cat_file /etc/exports
    cat_file /etc/fstab
    exec_command rpcinfo -p
    ;;
  esac
}

function get_inetd {
  create_title inetd "Inetd configuration"
  case $MYOS in
  AIX)
    exec_command lssrc -s inetd
    cat_file /etc/inetd.conf
    ;;
  SunOS)
    cat_file /etc/inetd.conf
    ;;
  Linux)
    cat_file /etc/inetd.conf
    cat_file /etc/xinetd.conf
    for i in `ls /etc/xinetd.d`
    do
      cat_file /etc/xinetd.d/$i
    done
    ;;
  esac
}

function get_ps {
  create_title ps "Running Processes"
  case $MYOS in
  AIX)
    exec_command ps -ef
    ;;
  SunOS)
    exec_command ps -ef
    ;;
  Linux)
    exec_command ps -ef
    ;;
  esac
}

function get_ha {
  create_title cluster "Cluster settings"
  case $MYOS in
  AIX)
    # AIX HACMP ES (5.1 - 5.3)
    exec_command lssrc -g cluster
    exec_command clstat -o
    exec_command clRGinfo
    exec_command cltopinfo
    exec_command clshowres
    exec_command clgetinterfaces
    exec_command cllsfs
    exec_command cllslv
    exec_command cllsvgdata
    exec_command cllsif
    exec_command cllscf
    exec_command cllsnw
    exec_command cllsserv
    exec_command cldisp
    exec_command cldump
    ;;
  SunOS)
    # Veritas VCS cluster
    exec_command hastatus -summary
    exec_command gabconfig -a
    cat_file /etc/llttab
    exec_command hares -display
    exec_command vxdg -s list
    cat_file /etc/VRTSvcs/conf/config/main.cf
    ;;
  *)
    # Cluster commands not supported on Linux yet
    display_line red $NOT_IMPLEMENTED
  esac
}

function get_system_files {
  create_title system_files "Misc configuration files"
  case $MYOS in
  AIX)
    cat_file /etc/security/user
    cat_file /etc/security/limits
    cat_file /etc/security/login.cfg
    cat_file /etc/swapspaces
    cat_file /etc/rc.net
    ;;
  SunOS)
    cat_file /etc/default/login
    cat_file /etc/default/passwd
    ;;
  Linux)
    cat_file /etc/default/passwd
    cat_file /etc/login.defs
  esac
  cat_file /etc/hosts
  cat_file /etc/pb.settings
}

function get_virtual {
  create_title virtual "Virtualization data"
  case $MYOS in
  SunOS)
    # List zones
    zoneadm list -iv
    ;;
  AIX)
    exec_command /usr/local/bin/lsviocfg
    ;;
  Linux)
    # Not sure what to put here, but probably some stuff on vmware servers
    display_line red $NOT_IMPLEMENTED
    ;;
  esac
}


#---------------- MAIN --------------------

BASEDIR=/var
LOGDIR=$BASEDIR/sysinfo
mkdir $LOGDIR > /dev/null 2>&1

LOGFILE=$LOGDIR/body.html
MYHOST=`hostname`
MYOS=`uname`
EMAIL=$1 # Who to send it to?

case $MYOS in
AIX)
  export PATH=$PATH:/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/bin:/usr/es/sbin/cluster:/usr/es/sbin/cluster/utilities
  CAT=cat
  MAIL_COMMAND=mail
  LS_COMMAND=ls
  UUENCODE="/usr/bin/uuencode"
  ;;
SunOS)
  export PATH=$PATH:/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/bin:/opt/VRTS/bin:/opt/VRTSvcs/bin
  CAT=cat
  MAIL_COMMAND=mailx
  LS_COMMAND=ls
  UUENCODE="/usr/bin/uuencode"
  ;;
Linux)
  export PATH=$PATH:/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/bin:
  CAT=cat
  MAIL_COMMAND=mailx
  LS_COMMAND=ls
  UUENCODE="/usr/bin/uuencode"
  ;;
*)
  echo "Unsupported Operating System..."; exit 2
esac

CONTENTS=$LOGDIR/$MYHOST-sysinfo.html

####### Let's save 2 copies of old runs #########
if [ -r $CONTENTS.1 ] ; then
    cp -p $CONTENTS.1 $CONTENTS.2
fi

if [ -r $CONTENTS ] ; then
    cp -p $CONTENTS $CONTENTS.1
fi
#################################################

exec 1>$LOGFILE
exec 2>/dev/null

display_header 4 "`date` sysinfo version $VERSION<br>" > $CONTENTS
display_header 4 "$MYHOST running $MYOS<br><br>" >> $CONTENTS


display_header 4 "<b>Operating System</b>" >> $CONTENTS
echo "<ul>" >> $CONTENTS
get_os
get_startup
get_users
echo "</ul>" >> $CONTENTS

display_header 4 "<b>Hardware</b>" >> $CONTENTS
echo "<ul>" >> $CONTENTS
get_memory_cpu
get_adapters
get_vpd
echo "</ul>" >> $CONTENTS

display_header 4 "<b>Volume Manager</b>" >> $CONTENTS
echo "<ul>" >> $CONTENTS
get_vg
get_fs
get_vpath
get_dr
get_luns
get_asm_disks
echo "</ul>" >> $CONTENTS

display_header 4 "<b>Networking</b>" >> $CONTENTS
echo "<ul>" >> $CONTENTS
get_inet
get_inet_security
get_inet_resolv
get_inet_ntp
get_inetd
get_nfs
echo "</ul>" >> $CONTENTS

display_header 4 "<b>HA Cluster</b>" >> $CONTENTS
echo "<ul>" >> $CONTENTS
get_ha
echo "</ul>" >> $CONTENTS

display_header 4 "<b>Miscellaneous</b>" >> $CONTENTS
echo "<ul>" >> $CONTENTS
get_cron
get_tsm
get_system_files
get_ps
get_software
get_virtual
echo "</ul>" >> $CONTENTS

echo "<br><br>" >> $CONTENTS
cat $LOGFILE >> $CONTENTS
rm $LOGFILE

###########################################
# Ok, let's deal with the results now

# Set the permissions to readadble for all
chmod 755 $LOGDIR/*html*

[ -z $EMAIL ] && exit 2
if [ -x $UUENCODE ]
then
  # if this file gets e-mailed to ECS SMDB the subject MUST be hostname!
  # If anything else is added to subject line SMDB will reject the file!
  # Do NOT modify!
  #
  #echo "Encoding and Emailing $CONTENTS to $EMAIL..." > /dev/tty
  $UUENCODE $CONTENTS $CONTENTS | $MAIL_COMMAND -s "$MYHOST" $EMAIL
  exit 0
else
  # Must have uuencode!
  #
  echo "Cannot find $UUENCODE to E-mail the output file" > /dev/tty
  exit 2
fi
[root@pwauslifapp01 ansible]#






















---
yaha BL blagodic bms automation tool GUI base tha waha se backend mai job scrpt chalata tha as auomatoation 



cetnriym mode status sctpt 

#!/bin/nsh

DEST=`echo ${1} | sed -e 's/\..*$//'`

MYHOST=`nexec $DEST "echo \\${HOSTNAME}"`

MYCFYMODE=`nexec $DEST "/usr/bin/adinfo | grep -i \"CentrifyDC mode\""`

echo "${MYHOST},${MYCFYMODE}" | tee -a //pwausldmp01/usr/local/data/reports/auditCentrifyMode_$(date +%m%d%Y).csv



check dyantace volume scrpt 

#!/bin/nsh

# Check Dynatrace Volume
#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')
#OS=`nexec $DEST "uname | tr '[A-Z]' '[a-z]'"`
echo $OS
#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#

#	
#	
#	

case $OS in

suse|redhat)


ROOT_VG=`nexec $DEST lvdisplay -c | grep "/[a-zA-Z0-9]\{0,\}root[a-zA-Z0-9]\{0,\}:" | awk -F: '{print $2}'`
if [ ! -z $ROOT_VG ]
then
	echo "rootvg found via lvdisplay root filesystem"
else
#  Try to find rootvg via VGS rather than looking for the root FS with rootvg in the lvdisplay output.  This supports LDAP Server builds"
ROOT_VG=`nexec $DEST vgs | grep rootvg | awk '{print $1}'`
fi

#check for existing volume
DYNA_LV_CHK=`nexec $DEST lvdisplay -c ${ROOT_VG}/dynatracelv`

if [ ! -z $DYNA_LV_CHK ]
then
	echo "Dynatrace logical volume already exists on $DEST."
#	echo "checking to see if the filesystem is mounted read only..."
#	MOUNT_SETTING_DYNALV=`nexec $DEST mount | awk '$1 ~ /dynatracelv/ { print $6 }'`
#	echo "DYNALV MOUNT IS:  $MOUNT_SETTING_DYNALV"
#	if [ $MOUNT_SETTING_DYNALV = "(ro)" ]
#	then 
#		#remount filesystem rw
#		echo "remounting dynatrace filesystem rw..."
#		nexec $DEST "umount /opt/dynatrace ; mount -o rw /opt/dynatrace"
#	fi
	echo "$DYNA_LV_CHK"
	echo "exiting script..."
	exit 1
fi

# get OS version 
if [ ! -e /etc/os-release ]
then
	if [ -e /etc/redhat-release ]
	then
		OS_VER=`cat //$DEST/etc/redhat-release | sed 's/^.*\([0-9]\{1,\}\.[0-9]\{1,\}\).*$/\1/'`
	elif [ -e /etc/SuSE-release ]
	then
	 	OS_MAJOR_VER=`awk -F= '$1 ~ /VERSION/ {print $2}' //$DEST/etc/SuSE-release | sed 's/ //'`
		OS_MINOR_VER=`awk -F= '$1 ~ /PATCHLEVEL/ {print $2}' //$DEST/etc/SuSE-release | sed 's/ //'`
		OS_VER=`echo "${OS_MAJOR_VER}.${OS_MINOR_VER}"`
	else	   		
		echo "$DEST, no expected /etc/os-release"
		OS_VER="unidentified"
	fi
else
	OS_VER=`awk -F= '$1 ~ /VERSION_ID/ {print $2}' //$DEST/etc/os-release | sed 's/"//g'`
fi

if [ -z $ROOT_VG ]
then
	echo "$DEST does not appear to be using linux LVM for root/OS. Please review this system manually."
	exit 1
fi

ROOT_VG_RECORD=`nexec $DEST vgdisplay -c --nosuffix --units m rootvg`	
PE_SIZE_MB=`echo $ROOT_VG_RECORD | awk -F: '{ print $13 }'`
FREE_PE_MB=`echo $ROOT_VG_RECORD | awk -F: '{ print $16 }'`

if [ -z "$ROOT_VG_RECORD" ] || [ -z "$PE_SIZE_MB" ] || [ -z "FREE_PE_MB" ]
then
	echo "Issue capturing LV informaiton from Linux Host $DEST.  Please check lvdisplay and vgdisplay commands."
	exit 2
fi


TOTAL_FREE_SPACE_GB=`expr $PE_SIZE_MB \* $FREE_PE_MB / 1024`

if [ $TOTAL_FREE_SPACE_GB -lt 5 ]
then
    echo "There does not appear to be enough space on the root volume to create a 5GB volume in the root volume group of Linux Host $DEST. Reported space in $ROOT_VG is reported as $TOTAL_FREE_SPACE_GB GB."
    exit 3
fi

;;

aix)

#check for existing volume

DYNA_LV_CHK=`nexec $DEST "lsvg -l rootvg | grep dynatracelv"`

if [ ! -z $DYNA_LV_CHK ]
then
	echo "Dynatrace logical volume already exists on $DEST."
	echo "$DYNA_LV_CHK"
	echo "exiting script..."
	exit 1
fi

if [ $OS = "aix" ]
then
	typeset -i OS_VER
	OS_VER=`nexec $DEST "oslevel | sed 's/\.//g'"`
	if [ $OS_VER -ge 6100 ]
	then
		echo "Proceeding with Dynatrace install on AIX Host $DEST. OS level meets the minumum requirements: $OS_VER"
	else
		echo "Halting the Dynatrace install on AIX Host $DEST.  OS level does not meet the minumum requirements: $OS_VER"
		exit 2
	fi
fi

TOTAL_FREE_SPACE_MB=`nexec $DEST lsvg rootvg | grep "FREE PPs:" | awk '{ print $7 }' | sed 's/(//'`
echo "Total free space is:  $TOTAL_FREE_SPACE_MB"
if [ -z "$TOTAL_FREE_SPACE_MB" ]
then
	echo "Issue capturing FREE space in rootvg from AIX Host $DEST.  Please check host manually."
	exit 2
fi
if [ $TOTAL_FREE_SPACE_MB -lt 5120 ]
then
	echo "There appears to be less than 5 GB of space in the root volume group, unable to create logical volume"
	echo "Script exiting"
	exit 2
fi
;;

*)
echo "$DEST does not appear to be a SLES, RHEL or AIX system.  Exiting script."
exit 5
;; 
esac





disable auditd 


#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#

#verify this is a linux sles server, if not end script
if [ $OS != "suse" ]
then
	echo "This script is designed to be run only on SLES."
	exit 1
fi

#check to see if sysconfig is setup for auditd
#the value of AUDITD_DISABLE_CONTEXTS in the auditd file must be set to yes to disable access from auditd

#check current value
AUDITSYSCFG=`cat //$DEST/etc/sysconfig/auditd | grep "AUDITD_DISABLE_CONTEXTS" | awk -F= '{print $2}' | sed 's/"//g'`

#if it is already no, take no actions, otherwise set it to no
if [ $AUDITSYSCFG = "yes" ]
then
 echo "The host $DEST is configured to disable access from auditd. No action taken."
else
 sed -i -e 's/AUDITD_DISABLE_CONTEXTS="no"/AUDITD_DISABLE_CONTEXTS="yes"/' //$DEST/etc/sysconfig/auditd
fi

#check to see if the rules file exists, if not just copy rules file into place
#rename it to something else in order to prevent auditd from readig the rules file

if [ -f //$DEST/etc/audit/audit.rules ]
then
	echo "And audit file exists on $DEST!"
	echo "Moving file to a new name to avoid auditd reading it and startign up..."
	mv //$DEST/etc/audit/audit.rules //$DEST/etc/audit/disabled.$$.retailset
else
	echo "No rules file detected on $DEST, no action taken."
fi


#issue the service command to start auditd
echo "issuing the service command to stop auditd"
nexec $DEST "service auditd stop"
echo "issuing auditctl command to ensure auditd is disabled"
nexec $DEST "auditctl -e 0"




dmesg off script 


#!/bin/sh
##############################################################################
## Program Name: dmesg off                                                  ##
## Author:       Jared Moore  - Health Care Service Corporation             ##
## Date Written: 09/13/2011                                                 ##
## Environment:  This script works on Linux.                                ##
## Description:  This script is designed to turn off the dmesg emails       ##
## Example: ./dmesg_off.sh                                                  ##
## Version: 1.0                                                             ##
############################################################################## 
## CHANGELOG
## 
if crontab -l | grep ^"#0,15,30,45 \* \* \* \* \/usr\/local\/bin\/dmesg.sh"
then
   echo "dmesg script has been commented out already."
   exit 1
else
   echo "dmesg has not been commented out."
   crontab -l | sed -e '/DO NOT EDIT THIS FILE/d' -e '/installed on/d' -e '/Cron version V/d' -e 's/# Check for new messages every 15 minutes\; email them to ecsunix_admin/# Check for new messages every 15 minutes\; email them to ecsunix_admin \*\*\*\*Disabled 06\\2011\*\*\*\*/g' -e 's/0\,15\,30\,45 \* \* \* \* \/usr\/local\/bin\/dmesg.sh/#0\,15\,30\,45 \* \* \* \* \/usr\/local\/bin\/dmesg.sh/g' > /tmp/crontab-working
   crontab /tmp/crontab-working
fi






enable centrid ssh ervice script 

-------------------------

#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#

JOB_ERROR=0

DISABLE_SERVICE_NAME=sshd
ENABLE_SERVICE_NAME=centrify-sshd

nexec $DEST "service ${DISABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/dis_srv_status"
nexec $DEST "service ${ENABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/en_srv_status" 

DISABLE_SERVICE_STATUS=`cat //$DEST/tmp/dis_srv_status`
ENABLE_SERVICE_STATUS=`cat //$DEST/tmp/en_srv_status`

echo "CHECKING disable service status..."

if [ $DISABLE_SERVICE_STATUS -eq 0 ]
then
	echo "STATUS:  $DISABLE_SERVICE_NAME service is enabled on $DEST."	
	echo "Disabling $DISABLE_SERVICE_NAME..."
	nexec $DEST "service ${DISABLE_SERVICE_NAME} stop"
	nexec $DEST "chkconfig ${DISABLE_SERVICE_NAME} off"
else
	echo "STATUS:  $DISABLE_SERVICE_NAME service is already disabled on $DEST."
fi


echo "CHECKING enable service status..."
if [ $ENABLE_SERVICE_STATUS -eq 0 ]
then
	echo "STATUS: $ENABLE_SERVICE_NAME service is already enabled on $DEST."
else
	echo "STATUS: $ENABLE_SERVICE_NAME service is disabled on $DEST."
	nexec $DEST "service ${ENABLE_SERVICE_NAME} start"
	nexec $DEST "chkconfig ${ENABLE_SERVICE_NAME} on"
fi

echo "VERIFY enable service status..."
#SANITY CHECK
nexec $DEST "service ${ENABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/en_srv_status_post"
ENABLE_SERVICE_STATUS=`cat //$DEST/tmp/en_srv_status_post`

if [ $ENABLE_SERVICE_STATUS -ne 0 ]
then
	2&>1 echo "ERROR: $ENABLE_SERVICE_NAME service failed to start on $DEST."
	2&>1 echo "ERROR: Attempting to start and enable $DISABLE_SERVICE_NAME."
	nexec $DEST "service ${DISABLE_SERVICE_NAME} start"
	nexec $DEST "chkconfig ${DISABLE_SERVICE_NAME} on"
	nexec $DEST "service ${ENABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/dis_srv_status_post"
	DISBLE_SERVICE_STATUS=`cat //$DEST/tmp/dis_srv_status_post`
	if [ $DISABLE_SERVICE_STATUS -ne 0 ]
	then
		2&>1 echo "CRITICAL ERROR! $DISABLE_SERVICE_NAME service failed to start on $DEST."
		2&>1 echo "CRITICAL ERROR! Both $DISABLE_SERVICE_NAME and $DISABLE_SERVICE_NAME service failed to start on $DEST."
	fi
	JOB_ERROR=1
else
	echo "$ENABLE_SERVICE_NAME service started successfully on $DEST."
fi

rm -f //$DEST/tmp/en_srv_status
rm -f //$DEST/tmp/dis_srv_status
rm -f //$DEST/tmp/en_srv_status_post
rm -f //$DEST/tmp/dis_srv_status_post

if [ $JOB_ERROR -ne 0 ]
then
	2&>1 echo "CRITICAL ERROR! There were issues enabling $ENABLE_SERVICE_NAME on $DEST."
	2&>1 echo "The script attempted to enable the $DISABLE_SERVICE_NAME on $DEST.  Check logs to ensure this failsafe worked! Manual maitenance may be required to resolve this."
	exit 1
else
	echo "SUCCESS: The $ENABLE_SERVICE_NAME is now active/enabled and the $DISABLE_SERVICE_NAME is now inactive/disabled."
	exit 0
fi




enable ssh service sctipt 
---------------------------

#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#

JOB_ERROR=0

DISABLE_SERVICE_NAME=centrify-sshd
ENABLE_SERVICE_NAME=sshd

nexec $DEST "service ${DISABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/dis_srv_status"
nexec $DEST "service ${ENABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/en_srv_status" 

DISABLE_SERVICE_STATUS=`cat //$DEST/tmp/dis_srv_status`
ENABLE_SERVICE_STATUS=`cat //$DEST/tmp/en_srv_status`

echo "CHECKING disable service status..."

if [ $DISABLE_SERVICE_STATUS -eq 0 ]
then
	echo "STATUS:  $DISABLE_SERVICE_NAME service is enabled on $DEST."	
	echo "Disabling $DISABLE_SERVICE_NAME..."
	nexec $DEST "service ${DISABLE_SERVICE_NAME} stop"
	nexec $DEST "chkconfig ${DISABLE_SERVICE_NAME} off"
else
	echo "STATUS:  $DISABLE_SERVICE_NAME service is already disabled on $DEST."
fi


echo "CHECKING enable service status..."
if [ $ENABLE_SERVICE_STATUS -eq 0 ]
then
	echo "STATUS: $ENABLE_SERVICE_NAME service is already enabled on $DEST."
else
	echo "STATUS: $ENABLE_SERVICE_NAME service is disabled on $DEST."
	nexec $DEST "service ${ENABLE_SERVICE_NAME} start"
	nexec $DEST "chkconfig ${ENABLE_SERVICE_NAME} on"
fi

echo "VERIFY enable service status..."
#SANITY CHECK
nexec $DEST "service ${ENABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/en_srv_status_post"
ENABLE_SERVICE_STATUS=`cat //$DEST/tmp/en_srv_status_post`

if [ $ENABLE_SERVICE_STATUS -ne 0 ]
then
	2&>1 echo "ERROR: $ENABLE_SERVICE_NAME service failed to start on $DEST."
	2&>1 echo "ERROR: Attempting to start and enable $DISABLE_SERVICE_NAME."
	nexec $DEST "service ${DISABLE_SERVICE_NAME} start"
	nexec $DEST "chkconfig ${DISABLE_SERVICE_NAME} on"
	nexec $DEST "service ${ENABLE_SERVICE_NAME} status ; echo \"\${?}\" > /tmp/dis_srv_status_post"
	DISBLE_SERVICE_STATUS=`cat //$DEST/tmp/dis_srv_status_post`
	if [ $DISABLE_SERVICE_STATUS -ne 0 ]
	then
		2&>1 echo "CRITICAL ERROR! $DISABLE_SERVICE_NAME service failed to start on $DEST."
		2&>1 echo "CRITICAL ERROR! Both $DISABLE_SERVICE_NAME and $DISABLE_SERVICE_NAME service failed to start on $DEST."
	fi
	JOB_ERROR=1
else
	echo "$ENABLE_SERVICE_NAME service started successfully on $DEST."
fi

rm -f //$DEST/tmp/en_srv_status
rm -f //$DEST/tmp/dis_srv_status
rm -f //$DEST/tmp/en_srv_status_post
rm -f //$DEST/tmp/dis_srv_status_post

if [ $JOB_ERROR -ne 0 ]
then
	2&>1 echo "CRITICAL ERROR! There were issues enabling $ENABLE_SERVICE_NAME on $DEST."
	2&>1 echo "The script attempted to enable the $DISABLE_SERVICE_NAME on $DEST.  Check logs to ensure this failsafe worked! Manual maitenance may be required to resolve this."
	exit 1
else
	echo "SUCCESS: The $ENABLE_SERVICE_NAME is now active/enabled and the $DISABLE_SERVICE_NAME is now inactive/disabled."
	exit 0
fi





FS reasd only ro scan script 
---------------------------------

#/bin/bash

HAZ_ERROR=0

for i in $(cat /etc/fstab|grep -v swap|grep -v proc|grep -v sysfs|grep -v debugfs|grep -v devpts|grep -v \#|grep -v nfs|grep -v shm|awk '{print $2}')
do 
 touch $i/test.txt
 if [[ $? -eq 0 ]]
 then
    rm $i/test.txt
 else
    printf "ERROR: $i filesystem is mounted read-only\n" >&2
    HAZ_ERROR=1
 fi
done

if [[ $HAZ_ERROR -eq 1 ]]
then
   printf "$(hostname) has filesystems mounted read-only\n" >&2
   exit 1
else
   exit 0
fi   








hadoop OS udpate script 
------------------------------------

#!/bin/nsh

#
# determine OS and env
#
target=$NSH_RUNCMD_HOST	
targetlc=`echo ${target} | tr '[:upper:]' '[:lower:]'`

DEST="`echo ${targetlc} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
          	#  It's redhat or RH derived, i.e., centos or fedora
          	OS="redhat"
         
		  	# enable install of multiple minor java versions. old versions will remain on the system 
		  	JAVA_DIR="/usr/lib/jvm"
		  	JAVA=`ls //$DEST/$JAVA_DIR | grep java-1.8 | sort -r | head -1`

		  	if  grep -q "installonlypkgs" //$DEST/etc/yum.conf 
		  	then
		  	nexec $DEST "sed -i.bak '/installonlypkgs/d' /etc/yum.conf"
		  	echo "installonlypkgs=java-1.8.0-openjdk,java-1.8.0-openjdk-headless,java-1.8.0-openjdk-devel,java-1.8.0-openjdk-accessibility,java-1.8.0-openjdk-accessibility-debug,java-1.8.0-openjdk-demo-debug,java-1.8.0-openjdk-devel-debug,java-1.8.0-openjdk-headless-debug,java-1.8.0-openjdk-src-debug,kernel,kernel-devel,kernel-bigmem,kernel-enterprise,kernel-smp,kernel-modules,kernel-debug,kernel-unsupported,kernel-source,kernel-PAE,kernel-PAE-debug,java-1.7.0-openjdk,java-1.7.0-openjdk-headless,java-1.7.0-openjdk-devel,java-11-openjdk.x86_64,java-11-openjdk-headless.x86_64,java-11-openjdk-devel.x86_64" >> //$DEST/etc/yum.conf
		  	else
		  	echo "installonlypkgs=java-1.8.0-openjdk,java-1.8.0-openjdk-headless,java-1.8.0-openjdk-devel,java-1.8.0-openjdk-accessibility,java-1.8.0-openjdk-accessibility-debug,java-1.8.0-openjdk-demo-debug,java-1.8.0-openjdk-devel-debug,java-1.8.0-openjdk-headless-debug,java-1.8.0-openjdk-src-debug,kernel,kernel-devel,kernel-bigmem,kernel-enterprise,kernel-smp,kernel-modules,kernel-debug,kernel-unsupported,kernel-source,kernel-PAE,kernel-PAE-debug,java-1.7.0-openjdk,java-1.7.0-openjdk-headless,java-1.7.0-openjdk-devel,java-11-openjdk.x86_64,java-11-openjdk-headless.x86_64,java-11-openjdk-devel.x86_64" >> //$DEST/etc/yum.conf
		  	fi

		  	# Check if Server is subscribed to Sat6
		  	nexec $DEST "subscription-manager repos ; echo \"\${?}\" > /tmp/satcheck_result"
		  	SATCHECK_RESULT=`cat //${DEST}/tmp/satcheck_result`

		  	if [ $SATCHECK_RESULT -ne 0 ]
		  	then
		  	1>&2 echo "$DEST is not subscribed to a Sat 6 server.  Please run the job Jobs->ECS OpenSystems->Linux->RedHat_Sat6_Migration on $DEST.  Then run this job again."
		  	exit 1
		  	fi
        
        else
            #  Otherwise it's SuSE
            #  This is making a vast assumption in general but in
            #  this env currently that's the only other option
            OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
# due to the issue with cacerts being used by the service now app
# we will back the file up associated with the "headless" open jdk package
#

if [ -e //$DEST/etc/pki/ca-trust/extracted/java/cacerts ]
then
	cp -p //$DEST/etc/pki/ca-trust/extracted/java/cacerts //$DEST/etc/pki/ca-trust/extracted/java/cacerts.orig.patch_backup
fi

#
# end of determine OS and env
#

# get OS version 

if [ -e //$DEST/etc/redhat-release ]
then
	OS_VER=`cat //$DEST/etc/redhat-release | sed 's/^.*\([0-9]\{1,\}\.[0-9]\{1,\}\).*$/\1/'`
elif [ -e //$DEST/etc/SuSE-release ]
then
 	OS_MAJOR_VER=`awk -F= '$1 ~ /VERSION/ {print $2}' //$DEST/etc/SuSE-release | sed 's/ //'`
	OS_MINOR_VER=`awk -F= '$1 ~ /PATCHLEVEL/ {print $2}' //$DEST/etc/SuSE-release | sed 's/ //'`
	OS_VER=`echo "${OS_MAJOR_VER}.${OS_MINOR_VER}"`
else	   		
	echo "$DEST, no expected /etc/os-release"
	OS_VER="unidentified"
fi



#set parameters based on env
#case $ENV in
#	dev)
#	RH_MGMT_SERVER=dwauslsatc01.app.dev.hcscint.net
#	;;
#	prod)
#	RH_MGMT_SERVER=pwauslsatc01.app.hcscint.net
#	;;
#	test)
#	RH_MGMT_SERVER=twauslsatc01.app.test.hcscint.net
#	;;
#	*)
#	;;
#esac


case "${OS_VER}" in
	7.6)
	nexec $DEST "subscription-manager release --set=7Server"
	;;
	7.7)
	nexec $DEST "subscription-manager release --set=7Server"
	;;
	7.8)
	nexec $DEST "subscription-manager release --set=7Server"
	;;
	7.9)
	nexec $DEST "subscription-manager release --set=7Server"
	;;
	6.10)
	nexec $DEST "subscription-manager release --set=6Server"
	;;
	*)
	echo "$DEST, Unmatched OS Version ${OS_VER} exiting script."
	exit 2 
	;;
esac

# execute OS patch
if [ $OS = "redhat" ]
then
	## Move hcsc.repo
	nexec $DEST "mv /etc/yum.repos.d/hcsc.repo /etc/yum.repos.d/hcsc.repo.old"

	nexec $DEST "yum clean all; yum list repos"
	
	#add check for katello arch package

	nexec $DEST "rpm -qa | grep katello-ca-consumer" > /tmp/katello_pkg
	KATELLO_PKG=`cat /tmp/katello_pkg`
	
	if cat /tmp/katello_pkg | grep -q '1.0-1'
	then
		nexec $DEST "rpm -e $KATELLO_PKG"
		nexec $DEST "cd /root; wget --no-check-certificate https://${RH_MGMT_SERVER}/pub/katello-ca-consumer-latest.noarch.rpm"
		nexec $DEST "rpm -ivh /root/katello-ca-consumer-latest.noarch.rpm"
	fi

	#execute yum from SSH
	#nexec $DEST "yum --disablerepo=*\* --enablerepo=rhel-*\* --disablerepo=rhel-7-server-eus-supplementary-rpms --disablerepo=rhel-ha-*\* --exclude=java* update -y"
    nexec $DEST "yum --disablerepo=*\* --enablerepo=rhel-*\* --disablerepo=rhel-*satellite* --enablerepo=rhel*-satellite-tools-6.8* --disablerepo=rhel-7-server-eus-supplementary-rpms* --exclude=java* update -y"
else
	#need to exit here should not get here
	echo "$DEST has an unexpected OS. $OS is not supported by this script."
	exit 2
fi

if [ -e //$DEST/etc/pki/ca-trust/extracted/java/cacerts.orig.patch_backup ]
then
	cp -p //$DEST/etc/pki/ca-trust/extracted/java/cacerts.orig.patch_backup //$DEST/etc/pki/ca-trust/extracted/java/cacerts
fi






install service ssh 
=========================

#!/bin/nsh


#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

DEST_IP=`host $DEST | tail -1 | awk '{ print $4 }'`

#
# end of determine OS and env
#

#OS SPECIFIC VARIABLES
case $OS in
suse)
INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current-suse11-x86_64.tgz
;;

redhat)
INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current-rhel5-x86_64.tgz
;;

*)
echo "OS Type for $DEST is not Suse or RedHat Linux. OS=$OS This script is meant to only run against Linux HCSC hosts.  Exiting."
exit 2
;;
esac #OS CASE

PKG_FILE=`basename $INSTALL_PKG_SOURCE`



#copy package and run install command
mkdir -p //${DEST}/var/tmp/stage/centrify
cp -f ${INSTALL_PKG_SOURCE} //${DEST}/var/tmp/stage/centrify/
nexec $DEST "cd /var/tmp/stage/centrify ; gzip -d -c ./${PKG_FILE} | tar -xvf -"

RPM_FILE=`nexec $DEST "find /var/tmp/stage/centrify -name '*ssh*' -type f"`
echo "RPM File is:  $RPM_FILE"

#get installed release number
INST_RELEASE=`nexec $DEST "rpm -q --queryformat '%{RELEASE}' CentrifyDC-openssh"`

#get package file releaes number
PKG_RELEASE=`nexec $DEST "rpm -qp --queryformat '%{RELEASE}' ${RPM_FILE}"`

echo "Release Num for Installed Package:  $INST_RELEASE"
echo "Release Num for Retrieved Package:  $PKG_RELEASE"

if [ -z $INST_RELEASE ] || [ -z $PKG_RELEASE ]
then
	echo "There was an issue retrieving the release numbers.  Please verify centrify-sshd is installed or that the package was copied and unzipped properly in /var/tmp/stage/centrify. Exiting script."
	exit 2
fi	

if [ $INST_RELEASE != $PKG_RELEASE ]
then
	echo "The installed CentrifyDC-openssh RPM does not match the current release.  Installing the current version."
	#remove installed package
	nexec $DEST "rpm -e CentrifyDC-openssh"
	#add package
	nexec $DEST "rpm -i ${RPM_FILE}"
	#restart service
	nexec $DEST "service centrify-sshd restart"
else
	echo "The installed release of CentrifyDC-openssh RPM matches the current release.  No action taken."
fi



if grep -q "adclient.netlogon.packet.security.type: 3" //$DEST/etc/centrifydc/centrifydc.conf
then
	echo "Security type option set in config file. No changed made."
else
	echo "Adding security type option to config file."
	echo "adclient.netlogon.packet.security.type: 3" >> //$DEST/etc/centrifydc/centrifydc.conf
	nexec $DEST "adreload"
fi


#add PermitRootLogin to /etc/centrifydc/ssh/sshd_config
echo "Adding root login to sshd_config..."
cp -f //$DEST/etc/centrifydc/ssh/sshd_config //$DEST/etc/centrifydc/ssh/sshd_config.orig
grep -iv "PermitRootLogin" //$DEST/etc/centrifydc/ssh/sshd_config > //$DEST/etc/centrifydc/ssh/sshd_config_hold
cp -f //$DEST/etc/centrifydc/ssh/sshd_config_hold //$DEST/etc/centrifydc/ssh/sshd_config
echo "PermitRootLogin yes" >> //$DEST/etc/centrifydc/ssh/sshd_config

#restart ssh
nexec $DEST "service centrify-sshd restart"

#clean-up tmp files
rm -rf //${DEST}/var/tmp/stage/centrify






linux kernel check script 
==================================


#!/bin/bash
#Script to check for Linux kernel version

#OS and version check
if [ "Linux" != $(uname) ]
 then
   echo "Error: Unsupported OS $(uname)" >&2
   exit 0
 else
  if ! grep -q "SUSE LINUX Enterprise Server 9" /etc/SuSE-release
   then
     echo "Unsupported OS: $(grep "SUSE" /etc/SuSE-release)" >&2
     exit 0
  fi
fi

#Kernel version check
KERNEL_VER=$(uname -r)
if [ "2.6.5-7.323-bigsmp" != $KERNEL_VER ]
then
    echo "ERROR: Kernel $KERNEL_VER has not been updated" >&2
    exit 1
else
    echo "INFO: Running updated kernel $KERNEL_VER"
    exit 0
fi






Linux OS update scrpti 
================================


#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

# enable install of multiple minor java versions. old versions will remain on the system 
JAVA_DIR="/usr/lib/jvm"
JAVA=`ls //$DEST/$JAVA_DIR | grep java-1.8 | sort -r | head -1`

if  grep -q "installonlypkgs" //$DEST/etc/yum.conf 
then
	nexec $DEST "sed -i.bak '/installonlypkgs/d' /etc/yum.conf"
	echo "installonlypkgs=java-1.8.0-openjdk,java-1.8.0-openjdk-headless,java-1.8.0-openjdk-devel,java-1.8.0-openjdk-accessibility,java-1.8.0-openjdk-accessibility-debug,java-1.8.0-openjdk-demo-debug,java-1.8.0-openjdk-devel-debug,java-1.8.0-openjdk-headless-debug,java-1.8.0-openjdk-src-debug,kernel,kernel-devel,kernel-bigmem,kernel-enterprise,kernel-smp,kernel-modules,kernel-debug,kernel-unsupported,kernel-source,kernel-PAE,kernel-PAE-debug,java-1.7.0-openjdk,java-1.7.0-openjdk-headless,java-1.7.0-openjdk-devel,java-11-openjdk.x86_64,java-11-openjdk-headless.x86_64,java-11-openjdk-devel.x86_64" >> //$DEST/etc/yum.conf
else
	echo "installonlypkgs=java-1.8.0-openjdk,java-1.8.0-openjdk-headless,java-1.8.0-openjdk-devel,java-1.8.0-openjdk-accessibility,java-1.8.0-openjdk-accessibility-debug,java-1.8.0-openjdk-demo-debug,java-1.8.0-openjdk-devel-debug,java-1.8.0-openjdk-headless-debug,java-1.8.0-openjdk-src-debug,kernel,kernel-devel,kernel-bigmem,kernel-enterprise,kernel-smp,kernel-modules,kernel-debug,kernel-unsupported,kernel-source,kernel-PAE,kernel-PAE-debug,java-1.7.0-openjdk,java-1.7.0-openjdk-headless,java-1.7.0-openjdk-devel,java-11-openjdk.x86_64,java-11-openjdk-headless.x86_64,java-11-openjdk-devel.x86_64" >> //$DEST/etc/yum.conf
fi

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
# due to the issue with cacerts being used by the service now app
# we will back the file up associated with the "headless" open jdk package
#

if [ -e //$DEST/etc/pki/ca-trust/extracted/java/cacerts ]
then
	cp -p //$DEST/etc/pki/ca-trust/extracted/java/cacerts //$DEST/etc/pki/ca-trust/extracted/java/cacerts.orig.patch_backup
fi

#
# end of determine OS and env
#
# Verify Network Route and Proxy Setting
cp //pwausxpbrmgt01/usr/local/bl_depot/linux/network_route_check.sh //$DEST/tmp
nexec $DEST "chmod 755 /tmp/network_route_check.sh"
nexec $DEST "/tmp/network_route_check.sh"

# get OS version 
if [ ! -e /etc/os-release ]
then
	if [ -e /etc/redhat-release ]
	then
		OS_VER=`cat //$DEST/etc/redhat-release | sed 's/^.*\([0-9]\{1,\}\.[0-9]\{1,\}\).*$/\1/'`
	elif [ -e /etc/SuSE-release ]
	then
	 	OS_MAJOR_VER=`awk -F= '$1 ~ /VERSION/ {print $2}' //$DEST/etc/SuSE-release | sed 's/ //'`
		OS_MINOR_VER=`awk -F= '$1 ~ /PATCHLEVEL/ {print $2}' //$DEST/etc/SuSE-release | sed 's/ //'`
		OS_VER=`echo "${OS_MAJOR_VER}.${OS_MINOR_VER}"`
	else	   		
		echo "$DEST, no expected /etc/os-release"
		OS_VER="unidentified"
	fi
else
	OS_VER=`awk -F= '$1 ~ /VERSION_ID/ {print $2}' //$DEST/etc/os-release | sed 's/"//g'`
fi


#set parameters based on env
case $ENV in
	dev)
	RH_MGMT_SERVER=dwauslsatc01.app.dev.hcscint.net
	;;
	prod)
	RH_MGMT_SERVER=pwauslsatc01.app.hcscint.net
	;;
	test)
	RH_MGMT_SERVER=twauslsatc01.app.test.hcscint.net
	;;
	*)
	;;
esac

#set parameters based on OS
case $OS in
	redhat)
#	RH_BOOTSTRAP_SRC_PATH=/usr/local/post-install/steps/rhn_register/ansible/files/
#	RH_BOOTSTRAP_DEST_PATH=/usr/local/bin
#	RH_BOOTSTRAP_SCRIPT=rhn_bootstrap.sh
	;;
	suse)
	SUSE_MGMT_SERVER=pwauslsmgr01.app.hcscint.net
	SUSE_BOOTSTRAP_SRC_PATH=/srv/www/htdocs/pub/bootstrap
	SUSE_BOOTSTRAP_DEST_PATH=/usr/local/bin
	SUSE_BOOTSTRAP_SCRIPT=bootstrap-S11.4_patch.sh
	;;
	*)
	#unexpected OS bail out
	echo "$DEST has an unexpected OS. $OS is not supported by this script."
	exit 2
	;;
esac

#platform specific variables

PRODUCT_NAME=`nexec $DEST "dmidecode | grep Product | grep VMware"`

if [ -z $PRODUCT_NAME ]
then
	#physical sytem
	MACHINE_TYPE="instance"
else
	#vmware vm
	MACHINE_TYPE="vdc"
fi

case $OS_VER in
#	7.2)		
#	CHANNEL_KEY=1-rhel-7-patch
#	;;
#	7.3)
#	CHANNEL_KEY=1-rhel-7-patch
#	;;
#	7.4)
#	CHANNEL_KEY=1-rhel-7-patch
#	;;
#	7.5)
#	CHANNEL_KEY=1-rhel-7-patch
#	;;
#	7.6)
#	CHANNEL_KEY=1-rhel-7-patch
#	;;
	8*)
	CHANNEL_KEY=ak-rhel8-${ENV}
	;;
	7.7|7.6)
	CHANNEL_KEY=ak-rhel7.7-${ENV}-${MACHINE_TYPE}
	;;
	7.8)
	CHANNEL_KEY=ak-rhel7.8-${ENV}-${MACHINE_TYPE}
	;;
	7.9)
	CHANNEL_KEY=ak-rhel7.9-${ENV}-${MACHINE_TYPE}
	#CHANNEL_KEY=AK-RHEL7_TO_8_PROD
	#nexec $DEST "subscription-manager unregister"
	#nexec $DEST "subscription-manager register --org="Health_Care_Service_Corporation" --activationkey=${CHANNEL_KEY}"
	#nexec $DEST "subscription-manager release --set=7Server"
	#nexec $DEST "subscription-manager refresh"
	;;
#	6.7)
#	CHANNEL_KEY=1-RH6.10_upgrade
#	;;
#	6.8)
#	CHANNEL_KEY=1-RH6.10_upgrade
#	;;
#	6.9)
#	CHANNEL_KEY=1-RH6.10_upgrade	
#	;;
	6.10)
	CHANNEL_KEY=ak-rhel6-${ENV}-${MACHINE_TYPE}
	;;
	11.4)
	CHANNEL_KEY=1-S11.4_patch	
	;;
	*)
	echo "$DEST, Unmatched OS Version $OS_VER exiting script."
	exit 2 
	;;
esac

#check for bootstrap script on client and execute
if [ $OS = "redhat" ]
then
#	if [ ! -e $RH_BOOTSTRAP_SRC_PATH/$RH_BOOTSTRAP_SCRIPT ]
#	then
#		cp //${RH_MGMT_SERVER}$RH_BOOTSTRAP_SRC_PATH/$RH_BOOTSTRAP_SCRIPT //$DEST/$RH_BOOTSTRAP_DEST_PATH
#	fi
#	nexec $DEST "chmod 755 $RH_BOOTSTRAP_DEST_PATH/$RH_BOOTSTRAP_SCRIPT"
#	nexec $DEST su - -c "$RH_BOOTSTRAP_DEST_PATH/$RH_BOOTSTRAP_SCRIPT $CHANNEL_KEY $RH_MGMT_SERVER"
	##this method was not working, producing ssl errors. Running yum from RH mgmt host over ssh
	##nexec $DEST "yum update -y"
	#get rsa keys
#	if [ ! -e //$DEST/root/.ssh/id_rsa.pub -a ! -e //$DEST/root/.ssh/id_rsa ]
#	then
#		echo "creating root keys on $DEST"
#		nexec $DEST su - -c "ssh-keygen -f /root/.ssh/id_rsa -N '' -t rsa"
#	fi

    

	nexec $DEST "subscription-manager repos ; echo \"\${?}\" > /tmp/satcheck_result"
	SATCHECK_RESULT=`cat //${DEST}/tmp/satcheck_result`

	if [ $SATCHECK_RESULT -ne 0 ]
	then
		1>&2 echo "$DEST is not subscribed to a Sat 6 server.  Please run the job Jobs->ECS OpenSystems->Linux->RedHat_Sat6_Migration on $DEST.  Then run this job again."
		exit 1
	fi	

	nexec $DEST "yum clean all; yum list repos"
	
	
	#if [ ! -e //$DEST/root/.ssh/id_rsa.pub ]
	#then
	#	echo "Warning! RSA Key not generated on $DEST! Exiting Script to avoid ssh lockup!"
	#	exit 2
	#else
	#	RSA_KEY=`cat //$DEST/root/.ssh/id_rsa.pub`
	#fi

	#load key locally if it doesnt exist
	#if grep -q "$RSA_KEY" //$DEST/root/.ssh/authorized_keys
	#then
	#	echo "Key already exists in authorized_keys on $DEST."
	#else
	#	echo $RSA_KEY >> //$DEST/root/.ssh/authorized_keys
	#fi

	#after the ECE/ELK issue we have determined we need to disable all repos except the 
	#hcsc.repo (i.e. the active redhat channel to satellite) before running updates.
	#If we don't and an application has a "live" repo defined it will update all packages.
	
	#NOTE: the method below is not the correct way to get the satellite repo
	#      this has been replaced with the pattern match rhel-x86_64*
	#  
	#identify hcsc repo name (first bracketed text in the /etc/repos.d)
	#RH_REPO_NAME=`cat //$DEST/etc/yum.repos.d/hcsc.repo | grep "\[" | head -1 | sed 's/[][]//g'`
	#add check for katello arch package

	nexec $DEST "rpm -qa | grep katello-ca-consumer" > /tmp/katello_pkg
	KATELLO_PKG=`cat /tmp/katello_pkg`
	
	if cat /tmp/katello_pkg | grep -q '1.0-1'
	then
		nexec $DEST "rpm -e $KATELLO_PKG"
		nexec $DEST "cd /root; wget --no-check-certificate https://${RH_MGMT_SERVER}/pub/katello-ca-consumer-latest.noarch.rpm"
		nexec $DEST "rpm -ivh /root/katello-ca-consumer-latest.noarch.rpm"
	fi

	#execute yum from SSH
	#sleep 10
	#nexec $DEST "ssh -o StrictHostKeyChecking=no $FQDN yum --disablerepo=*\* --enablerepo=clone-rhel-x86_64*\* update -y"
	#nexec $DEST "yum --disablerepo=*\* --enablerepo=rhel-*\* --disablerepo=rhel-*satellite* --enablerepo=rhel*-satellite-tools-6.8* --disablerepo=rhel-7-server-eus-supplementary-rpms* update -y"
	nexec $DEST "yum --disablerepo=*\* --enablerepo=rhel-*\* --disablerepo=rhel-*satellite* --disablerepo=rhel-7-server-eus-supplementary-rpms* update -y"

elif [ $OS = "suse" ]
then
	if [ ! -e $SUSE_BOOTSTRAP_SRC_PATH/$SUSE_BOOTSTRAP_SCRIPT ]
	then
		cp //${SUSE_MGMT_SERVER}$SUSE_BOOTSTRAP_SRC_PATH/$SUSE_BOOTSTRAP_SCRIPT //$DEST/$SUSE_BOOTSTRAP_DEST_PATH
	fi
	nexec $DEST "chmod 700 $SUSE_BOOTSTRAP_DEST_PATH/$SUSE_BOOTSTRAP_SCRIPT"
	nexec $DEST su - -c "$SUSE_BOOTSTRAP_DEST_PATH/$SUSE_BOOTSTRAP_SCRIPT"
	nexec $DEST su - -c "zypper -n dup"	
	nexec $DEST su - -c "zypper -n up -t patch"	
else
	#need to exit here should not get here
	echo "$DEST has an unexpected OS. $OS is not supported by this script."
	exit 2
fi

if [ -e //$DEST/etc/pki/ca-trust/extracted/java/cacerts.orig.patch_backup ]
then
	cp -p //$DEST/etc/pki/ca-trust/extracted/java/cacerts.orig.patch_backup //$DEST/etc/pki/ca-trust/extracted/java/cacerts
fi







linux mount check scrip t
======================================


#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#


ERROR_CONDITION=0

echo "OS for $DEST is:  $OS"

case $OS in

suse)
FSTYPES="ext3 xfs nfs"
;;

redhat)
FSTYPES="ext3 ext4 xfs nfs"
;;

*)
echo "$DEST does not appear to be a Linux system.  Exiting script."
exit 20
;; 

esac


#check # of mounts
for FSTYPE in `echo $FSTYPES`
do
	echo "checking mounts..."
	MNT_COUNT=`nexec $DEST "mount -t $FSTYPE | wc -l"`
	FSTAB_COUNT=`nexec $DEST "mount -t $FSTYPE | wc -l"`
	if [ $MNT_COUNT != $FSTAB_COUNT ]
	then
		echo "There appears to be an issue with the number of $FSTYPE mounts on $DEST!"
		echo "Please verify mounts."
		((ERROR_CONDITION += 1))
	fi	
	echo "$FSTYPE mounts checkout for host $DEST."
done

#check if multipath is running
echo "check for multipathd..."
nexec $DEST "ps -ef | grep [m]ultipath > /tmp/multipath_status"

MULTIPATH_STATUS=`cat //$DEST/tmp/multipath_status`
##debug## echo $MULTIPATH_STATUS

#if multipathd is running make sure multipath command is there
#run and store results in /tmp/multipath_data_out
if [ -n MULTIPATH_STATUS ] 
then
##debug## echo "multipathd running...checking multipath info..."
	MULTIPATH_CMD=`nexec $DEST "which multipath"`
	if [ -n $MULTIPATH_CMD ]
	then
		nexec $DEST "multipath -ll > /tmp/multipath_data_out"
	fi

	egrep -iq "failed|faulty|offline" //$DEST/tmp/multipath_data_out
	if [ $? -ne 1 ]
	then
		echo "There appear to be failed paths on $DEST."
		echo "Please verify paths are up."
		((ERROR_CONDITION += 1))
	fi
	echo "There are no failed paths detected on $DEST."
fi






Linux reboot script 
====



#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#

# issue sync and reboot commands
nexec $DEST "sync && sync && sync && shutdown -r +2"










linux precheck 
========


#/bin/sh
#set -x
##
##
#TEKSystems Final Version pre check script Oct 10 2019
##
##
patchDir=/var/log/patchDir
DATE=`date +%Y_%m_%d`
TIMESTAMP=$(date)
lastReboot=$(who -b | awk '{print $3, $4}')
uptimesinceReboot=$(uptime | awk '{print $3, $4}' | awk -F "," '{print $1}')

HOST=$(echo $(uname -n) | sed -e 's/\..*$//')
pre=$patchDir/$HOST/precheck
post=$patchDir/$HOST/postcheck

function timestamp {
	echo "======================= Starting precheck ================================"
		echo "[INFO] Date: $TIMESTAMP"
}

function getKernelinfo {
	
	echo "=========================================================================="
	
		uname -a | awk '{print $3}' > $patchDir/$HOST/precheck/kernelPrepatch.out
		kernelPrepatch=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
		echo "[INFO] Current Running Kernel Version: $kernelPrepatch"
		
}

function getresourceinfo {

		echo "[INFO] uptime: `uptime`"
		echo "[INFO] Percent CPU Used: `top -b -n1 |grep "Cpu(s)" | awk '{print ($2 + $4) "%"}'`"
		echo "[INFO] Percent Memory Used: `free -t | grep Mem: | awk '{print ($3 / $2) * 100 "%"}'`"
		echo "[INFO] Percent Swap Used: `free -t | grep Swap: | awk '{print ($3 / $2) * 100 "%"}'`"

}

function logDirectory {
	
	if [[ -d $pre && -d $post ]]; then
		lastPatchDate=$( stat -c %y $patchDir/$HOST | awk '{print $1"_"$2}' | sed -e 's/\..*$//') 
		mv $patchDir/$HOST $patchDir/$HOST.$lastPatchDate
		mkdir -p $patchDir/$HOST/precheck

	
	else
		[ ! -d /var/log/patchDir ] && echo "[INFO] PatchLog directory does not exist, creating now $patchDir"; mkdir /var/log/patchDir > /dev/null 2>&1
		[ ! -d /$patchDir ] && echo "[INFO] Monthly patch directory $HOST does not exist, creating now"; mkdir -p $patchDir/$HOST/precheck > /dev/null 2>&1
	fi 
}

function osVersion {
	
	echo "=========================================================================="
	os=$(uname)
	if [ "$os" == 'Linux' ]; then
		if [ -f /etc/redhat-release ];then
			osFlavor=$(cat /etc/redhat-release | awk '{print $1$2}')
			osVersion=`cat /etc/redhat-release | sed 's/^.*\([0-9]\{1,\}\.[0-9]\{1,\}\).*$/\1/'`
			echo "[INFO] OS: $osFlavor $osVersion  Proceeding with precheck"
			LD_LIBRARY_PATH=
		else
			osFlavor=$(cat /etc/SuSE-release | awk 'NR == 1 {print $1}')
			osMajorVer=$(cat /etc/SuSE-release | awk 'NR == 2 {print $3}')
			osMinorVer=$(cat /etc/SuSE-release | awk 'NR == 3 {print $3}')
			echo "[INFO] OS: $osFlavor $osMajorVer.$osMinorVer , Proceeding with precheck"
		fi
	else
		echo "[ERROR] Operating System is not Linux based, please run this on a Linux OS"
		exit 1
	fi
}

function cfgfileBackup {
	
	echo "=========================================================================="
	mkdir -p /$patchDir/$HOST/precheck/etc/
	for bkupsync in fstab mtab resolv.conf samba nsswitch.conf hosts passwd shadow group auto_master auto.master autofs autofs.conf multipath.conf
			do
					echo "[INFO] Copying $bkupsync to $patchDir/$HOST/precheck/etc/"
					cp -pr /etc/$bkupsync $patchDir/$HOST/precheck/etc/ > /dev/null 2>&1
			done
}

function getInterfacecfgs {
	
	echo "=========================================================================="
	case $osFlavor in
	
		RedHat)
			
			mkdir -p /$patchDir/$HOST/precheck/etc/sysconfig/network-scripts
			echo "[INFO] Copying ifcfg files to $patchDir/$HOST/precheck/etc/sysconfig/network-scripts"
			cp -pr  /etc/sysconfig/network-scripts/ifcfg-* $patchDir/$HOST/precheck/etc/sysconfig/network-scripts  > /dev/null 2>&1
			echo "[INFO] Copying route information to $patchDir/$HOST/precheck/etc/sysconfig/network-scripts"
			#route -n > $patchDir/$HOST/precheck/etc/sysconfig/network-scripts/route
		;;
		SUSE)
			
			mkdir -p /$patchDir/$HOST/precheck/etc/sysconfig/network
			echo "[INFO] Copying ifcfg files to $patchDir/$HOST/precheck/etc/sysconfig/network"
			cp -pr  /etc/sysconfig/network/ifcfg-eth* $patchDir/$HOST/precheck/etc/sysconfig/network  > /dev/null 2>&1
			cp -pr  /etc/sysconfig/network/ifcfg-bond* $patchDir/$HOST/precheck/etc/sysconfig/network  > /dev/null 2>&1
			echo "[INFO] Copying route information to $patchDir/$HOST/precheck/etc/sysconfig/network"
			cp -pr  /etc/sysconfig/network/routes $patchDir/$HOST/precheck/etc/sysconfig/network/route
			#route -n > $patchDir/$HOST/precheck/etc/sysconfig/network-scripts/route			
		;;
	
	esac

}

function getBootinfo {
	
	echo "=========================================================================="
	echo "[INFO] Checking booting kernel information"
	
	
		case $osFlavor in
	
			RedHat)
				if [ $osVersion == 6.10 ]; then
					
					numIndexcount=$(cat /boot/grub/menu.lst | grep title | wc -l)
					cat /boot/grub/menu.lst | grep default | awk 'NR==1 {print $1,"" $2}' > $patchDir/$HOST/precheck/precheck.boot.index.out
					precheckbootIndex=$(cat $patchDir/$HOST/precheck/precheck.boot.index.out)
					precheckbootKernel=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
					echo "[INFO] Server currently has $numIndexcount indexes in menu.list"
					echo "[INFO] Server is currently booting off index $precheckbootIndex"
					echo "[INFO] Index $precheckbootIndex belongs to this Kernel: $precheckbootKernel"
				
				else
			
					numIndexcount=$(grubby --info=ALL | grep index | wc -l)
					grubby --info=ALL | grep index > $patchDir/$HOST/precheck/grubby.boot.out
					bootIndex=$(grubby --default-index)
					numKernelcount=$(grubby --info=ALL | grep kernel | wc -l)
					grubby --info=ALL | grep kernel > $patchDir/$HOST/precheck/grubby.kernel.out
					bootKernel=$( grubby --default-kernel | awk  -F '/' '{print $3}')
					echo "[INFO] Server currently has $numIndexcount indexes in grubby"
					echo "[INFO] Server is currently booting off index $bootIndex"
					echo "[INFO] Index $bootIndex belongs to this Kernel: $bootKernel"
				fi
			;;
			SUSE)
				numIndexcount=$(cat /boot/grub/menu.lst | grep title | wc -l)
				cat /boot/grub/menu.lst | grep default | awk 'NR==1 {print $1,"" $2}' > $patchDir/$HOST/precheck/precheck.boot.index.out
				precheckbootIndex=$(cat $patchDir/$HOST/precheck/precheck.boot.index.out)
				ls -lat /boot/initrd | awk '{print $11}' | cut -c 8-30 > $patchDir/$HOST/precheck/kernelPrepatch.out
				precheckbootKernel=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
				echo "[INFO] Server currently has $numIndexcount indexes in menu.list"
				echo "[INFO] Server is currently booting off index $precheckbootIndex"
				echo "[INFO] Index $precheckbootIndex belongs to this Kernel: $precheckbootKernel"
				
			;;
		esac


}

function repoBackup {
	
	echo "=========================================================================="
	case $osFlavor in
	
		RedHat)
			echo "[INFO] Rsyncing /etc/yum.repos.d to $patchDir/yum.repos.d"
			echo "[INFO] to remove any 3rd party repositories not needed for OS patching"
			rsync --remove-source-files -avzh /etc/yum.repos.d  $patchDir/$HOST/precheck/ > /dev/null 2>&1
			
		;;
		SUSE)
			echo "[INFO] Rsyncing /etc/zypp/repos.d to $patchDir/repos.d"
			echo "[INFO] to remove any 3rd party repositories not needed for OS patching"
			rsync --remove-source-files -avzh /etc/zypp/repos.d  $patchDir/$HOST/precheck/ > /dev/null 2>&1
			
		;;
	
	esac

}

function repoFormat {

	if [ $$osFlavor == "SUSE" ]; then 
		echo "=========================================================================="
		echo "[INFO] Formating repo name for easier manipulatation"
		for repoFormat in $(ls -l  /etc/zypp/repos.d | grep spacewalk| awk '{print $9}')
		do
			cd /etc/zypp/repos.d
			sed -i 's/ /_/g' $repoFormat
		done
	fi
	
}

function patchAnalysis {
	
	echo "=========================================================================="
	echo "[INFO] Gathering Missing patch information.  Please hold while I gather that information"
	case $osFlavor in
	
		RedHat)
			#installing yum-security for RHEL6 to allow yum updateinfo to run
			#yum -y install yum-security
			
				yum updateinfo list | grep bugfix | awk '{print $3}' > /$patchDir/$HOST/precheck/bugfixes.log 
				yum updateinfo list | grep security | awk '{print $3}' > /$patchDir/$HOST/precheck/security.log 
				yum updateinfo list | grep enhancement | awk '{print $3}' > /$patchDir/$HOST/precheck/enhancement.log
		;;
		SUSE)
			zypper ref  > /dev/null 2>&1
			repoFormat
			
				zypper lp | grep bugfix > /$patchDir/$HOST/precheck/bugfixes.log 
				zypper lp | grep security > /$patchDir/$HOST/precheck/security.log 
				zypper lu  > /$patchDir/$HOST/precheck/updates.log 
			
		;;
		
	esac
	echo "[INFO] Data gathering complete will prepare to restore repo files"

}


function getRunningprocess {
		
		ps -ef | awk ' {print $2}' | wc -l > /$patchDir/$HOST/precheck/precheck.PIDScount.log
		ps -ef | awk ' {print $2, $8}' > /$patchDir/$HOST/precheck/precheck.PIDs.log
		numPIDscount=$(ps -ef | awk ' {print $2}' | wc -l)
		 
}

function getRunningDB {
	  
 		echo "[INFO] Checking smon pmon dataserv hadoop gemfire"
		ps -ef |grep "ps -ef" |grep -v grep > /$patchDir/$HOST/precheck/ps1 #place holder
		echo "  ---------------- ps -eaf | grep -i smon  ---------------- "| tee -a /$patchDir/$HOST/precheck/db.log
        ps -eaf | grep -i smon|grep -v grep | tee -a /$patchDir/$HOST/precheck/db.log /$patchDir/$HOST/precheck/ps1
		echo "  ---------------- ps -eaf | grep -i pmon  ---------------- "| tee -a /$patchDir/$HOST/precheck/db.log
		ps -eaf | grep -i pmon|grep -v grep | tee -a /$patchDir/$HOST/precheck/db.log /$patchDir/$HOST/precheck/ps1
		echo "  ---------------- ps -eaf | grep -i dataserv  ------------ "| tee -a /$patchDir/$HOST/precheck/db.log
		ps -eaf | grep -i datas|grep -v grep | tee -a /$patchDir/$HOST/precheck/db.log /$patchDir/$HOST/precheck/ps1
		echo "  ---------------- ps -eaf | grep -i hadoop  -------------- "| tee -a /$patchDir/$HOST/precheck/db.log
		ps -ef | grep hadoop|grep -v grep | tee -a /$patchDir/$HOST/precheck/db.log /$patchDir/$HOST/precheck/ps1
		echo "  ---------------- ps -eaf | grep -i gemfire  ------------- "| tee -a /$patchDir/$HOST/precheck/db.log
		ps -ef | grep gemfire|grep -v grep | tee -a /$patchDir/$HOST/precheck/db.log /$patchDir/$HOST/precheck/ps1
		df -PTh > $patchDir/$HOST/precheck/df1 # using here when getDiskData is commented
}

function getDiskData {

		echo "=========================================================================="
		echo "[INFO] Showing currently mounted filesystems"
         	#df -PTh | tee $patchDir/$HOST/precheck/df1
			echo "=========================================================================="
         	echo "======= mount ==============" > $patchDir/$HOST/precheck/mount
         	mount > $patchDir/$HOST/precheck/mount
                echo "[INFO] Gathering Server Disk information"
		echo "  =============== fdisk -l ============= " > /$patchDir/$HOST/precheck/DiskData.log
		fdisk -l >> /$patchDir/$HOST/precheck/DiskData.log 
		echo "  ================ swap info =========== " >> /$patchDir/$HOST/precheck/DiskData.log
		swapon -s >> /$patchDir/$HOST/precheck/DiskData.log
		echo " ================= free ================ " >> /$patchDir/$HOST/precheck/DiskData.log
		free >> /$patchDir/$HOST/precheck/DiskData.log
		echo "  ================ free -m ============= " >> /$patchDir/$HOST/precheck/DiskData.log
		free -m >> /$patchDir/$HOST/precheck/DiskData.log
                echo "  ================ pvs  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                pvs >> /$patchDir/$HOST/precheck/DiskData.log 
		echo "  ================ vgs  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                vgs >> /$patchDir/$HOST/precheck/DiskData.log 
	 	echo "  ================ lvs  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                lvs >> /$patchDir/$HOST/precheck/DiskData.log 
		echo "  ================ pvscan  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                pvscan >> /$patchDir/$HOST/precheck/DiskData.log 
		echo "  ================ pvdisplay  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                pvdisplay >> /$patchDir/$HOST/precheck/DiskData.log 
		echo "  ================ vgdisplay  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                vgdisplay >> /$patchDir/$HOST/precheck/DiskData.log 
		echo "  ================ lvdisplay  ================ " >> /$patchDir/$HOST/precheck/DiskData.log
                lvdisplay >> /$patchDir/$HOST/precheck/DiskData.log 
      
        
}

function getMiscData {

		echo "[INFO] Gathering cpuinfo, exports(NFS shares), dsm.sys & rpm info"
		echo " ============== cpuinfo  ================" > /$patchDir/$HOST/precheck/MiscData.log
                cat /proc/cpuinfo > /$patchDir/$HOST/precheck/MiscData.log
		echo " ============= exports (NFS shares) ====" >> /$patchDir/$HOST/precheck/MiscData.log
		cat /etc/exports >> /$patchDir/$HOST/precheck/MiscData.log
		echo " ============== dsm.sys  ================" >> /$patchDir/$HOST/precheck/MiscData.log
                cat /opt/tivoli/tsm/client/ba/bin/dsm.sys >> /$patchDir/$HOST/precheck/MiscData.log
		echo " ============== rpm -qa --last  ================">> /$patchDir/$HOST/precheck/MiscData.log
                rpm -qa --last >> /$patchDir/$HOST/precheck/MiscData.log
		
}

function getDmidecodeData {

        
                echo "[INFO] Gathering dmidecode info"
                echo " ============== dmidecode ================" > /$patchDir/$HOST/precheck/MiscData.log
                dmidecode > /$patchDir/$HOST/precheck/dmidecode.log
 
}

function parseData {
	
	echo "=========================================================================="
	echo "[INFO] Server last reboot was $lastReboot"
	echo "[INFO] Server uptime is $uptimesinceReboot"
	
	echo "[INFO] Currently the server has $numPIDscount processes running"
	echo "[INFO] Current Version before patching is $kernelPrepatch"	
		
	echo "=========================================================================="

}

function getDiskspace {

				if [ $osVersion == 6.10 ] > /dev/null 2>&1; then
					
					bootFreespace=$(df | awk '$NF == "/boot" {print $4}')
					echo "[INFO] Boot has $bootFreespace Kilobytes free"
					
					varFreespace=$(df /var | grep /var |awk '{print $3}')
					echo "[INFO] var has $varFreespace Kilobytes free"
					
					bootUsedspace=$(df | awk '$NF == "/boot" {print $3}')
					echo "[INFO] Boot has $bootUsedspace Kilobytes used"
		
					varUsedspace=$(df /var | grep /var |awk '{print $2}')
					echo "[INFO] var has $varUsedspace Kilobytes used"
					
					[[ $bootFreespace -lt 50000 ]] && echo "[ERROR] DANGER... DANGER... DANGER... patching server with less than 50MB in boot is a bad idea.  Advise not to patch and check space in /boot" && exit 1
					[[ $bootFreespace -lt 153600 ]] && echo "[WARNING] boot might not have enough space to patch. Please Validate before patching"
					[[ $varFreespace -lt 153600 ]] && echo "[WARNING] /var might not have enough space to patch. Please Validate before patching"
									
				else
			
					bootFreespace=$(df | awk '$NF == "/boot" {print $4}')
					echo "[INFO] Boot has $bootFreespace Kilobytes free"

					varFreespace=$(df | awk '$NF == "/var" {print $4}')
					echo "[INFO] var has $varFreespace Kilobytes free"
					
					usrFreespace=$(df | awk '$NF == "/usr" {print $4}')
					echo "[INFO] usr has $usrFreespace Kilobytes free"
					
					bootUsedspace=$(df | awk '$NF == "/boot" {print $3}')
					echo "[INFO] Boot has $bootUsedspace Kilobytes used"

					varUsedspace=$(df | awk '$NF == "/var" {print $3}')
					echo "[INFO] var has $varUsedspace Kilobytes used"
					
					usrUsedspace=$(df | awk '$NF == "/usr" {print $3}')
					echo "[INFO] usr has $usrUsedspace Kilobytes used"
					
					spaceReqboot=50000
					[[ $bootFreespace -lt 50000 ]] && echo "[ERROR] DANGER... DANGER... DANGER... patching server with less than 50MB in boot is a bad idea.  Advise not to patch and check space in /boot" && exit 1
					[[ $bootFreespace -lt 153600 ]] && echo "[WARNING] boot might not have enough space to patch. Please Validate before patching"
					[[ $varFreespace -lt 153600 ]] && echo "[WARNING] /var might not have enough space to patch. Please Validate before patching"
					[[ $usrFreespace -lt 153600 ]] && echo "[WARNING] /usr might not have enough space to patch. Please Validate before patching"
									
				fi	
	  
}

function registeredServer {
		
	spacewalk-channel -l > /dev/null 2>&1
	registered=($?)
	if [ $registered -eq 0 ]; then 
		echo "[INFO] Server shows to be connected to Spacewalk Channel."
	else
		echo "[ERROR] Server does not show to be connected to Spacewalk Channel. Please Connect to a Spacewalk Channel before preceeding" && exit 1
		
	fi 

	exit 0
}

function tarData {

	tar -cvf /$patchDir/$HOST/precheck/pre_$HOST.$DATE.tar /$patchDir/$HOST/precheck/*
	
}

function oldInfoFileRename {
echo "=========================================================================="
echo "[INFO] Renaming old & creating new pre_patch_info.txt"
oldFileDate=$( stat -c %y /var/run/$HOST.pre_patch_info.txt | awk '{print $1"_"$2}' | sed -e 's/\..*$//')
mv /var/run/$HOST.pre_patch_info.txt /var/run/$HOST.pre_patch_info.txt.$oldFileDate > /dev/null 2>&1

}

function infoFile {

os=$(uname)
if [ "$os" == 'Linux' ]; then
if [ -f /etc/redhat-release ];then
os_ver=$(cat /etc/redhat-release)
else
os_ver=$(cat /etc/SuSE-release | tr '\n' ' ')
fi
fi
echo "  ================  uptime  ================ "
uptime
echo "  ================ w  ================ "
w
echo "  ================  uname -a  ================ "
uname -a
echo "  ================ free  ================ "
free
echo "  ================ free -m  ================ "
free -m
echo "  ================  swapon -s ================ "
swapon -s
echo "  ================  cpuinfo ================ "
cat /proc/cpuinfo
echo " - ================ domainname ================  "
domainname
echo "  ================ hostname  ================  "
hostname
echo "  ================ df -PTh ================ "
df -PTh
echo " ================  df -PTh | wc -l ================ "
df -PTh | wc -l
echo " ================ vgs ==================="
vgs
echo "  ================ fdisk -l  ================ "
fdisk -l
echo " =============rpm -qa --last =============== "
rpm -qa --last
echo "  ================ ps -eaf ================ "
ps -eaf
echo "  ================ ps -eaf |wc -l================ "
ps -eaf |wc -l
echo "  ================ cat /proc/net/bonding/bond0 =============== "
cat /proc/net/bonding/bond0 
echo "  ================ Server iLO Info =============== "
/usr/bin/ipmitool lan print
echo "  ================ ifconfig -a  ================ "
ifconfig -a
echo "  ================ route -n ================ "
route -n
echo "  ================  cat /etc/fstab ================  "
cat /etc/fstab
echo "  ================ cat /etc/mtab ================  "
cat /etc/mtab
echo "  ================ cat /etc/resolv.conf ================  "
cat /etc/resolv.conf
echo "  ================ /etc/samba/smb.conf ================  "
cat /etc/samba/smb.conf
echo "  ================ cat /etc/nsswitch.conf  ================  "
cat /etc/nsswitch.conf
echo "  ================ cat /etc/hosts  ================ "
cat /etc/hosts
echo "  ================ cat /etc/passwd ================ "
cat /etc/passwd
echo "  ================ cat /etc/shadow  ================ "
cat /etc/shadow
echo "  ================ cat /etc/group  ================ "
cat /etc/group
echo "  ================ cat /etc/auto_master  ================ "
cat /etc/auto_master
echo "  ================ cat /etc/auto.master  ================ "
cat /etc/auto.master
echo " ================ cat /etc/autofs ================ "
cat /etc/autofs
echo " ================ cat /etc/autofs.conf ================ "
cat /etc/autofs.conf

echo $os_ver | grep -i SUSE
if [ $? -eq 0 ];then
echo " ================ cat /boot/grub/menu.lst (SUSE) ================ "
cat /boot/grub/menu.lst
echo "  ================ Interfaces config  ================ "
for i in `ls -l /etc/sysconfig/network/ifcfg-* | awk '{print $NF}'`;do echo "$i Showing";cat $i;echo " ============ ";done
else
echo $os_ver | grep "6\."
if [ $? -eq 0 ];then
echo " ================ cat /boot/grub/grub.conf (RHEL6) ================ "
cat /boot/grub/grub.conf
echo "  ================ Interfaces config  ================ "
for i in `ls -l /etc/sysconfig/network-scripts/ifcfg-* | awk '{print $NF}'`;do echo "$i Showing";cat $i;echo " ============ ";done
else
echo " ================ cat /boot/grub2/grub.cfg (RHEL7) ================ "
cat /boot/grub2/grub.cfg
echo "  ================ Interfaces config  ================ "
for i in `ls -l /etc/sysconfig/network-scripts/ifcfg-* | awk '{print $NF}'`;do echo "$i Showing";cat $i;echo " ============ ";done
fi
fi
echo "  ================ ps -eaf | grep -i smon ================ "
ps -eaf | grep -i smon
echo "  ================ ps -eaf | grep -i pmon  ================ "
ps -eaf | grep -i pmon
echo "  ================ ps -eaf | grep -i dataserv  ================ "
ps -eaf | grep -i datas
echo "  ================ showmount -e  ================ "
showmount -e
echo " ================ dmidecode =============="
dmidecode
echo " ================ pvscan ================"
pvscan
echo " ================ pvdisplay ================"
pvdisplay
echo " ================ vgdisplay ================"
vgdisplay
echo " ================ lvdisplay ================"
lvdisplay
echo " ================ ps -eaf | grep -i nfs ================"
ps -eaf | grep -i nfs
echo "  ================ cat /opt/tivoli/tsm/client/ba/bin/dsm.sys  ================ "
cat /opt/tivoli/tsm/client/ba/bin/dsm.sys
echo "  ================ mount  ================ "
mount
echo " ============= kernel version ==============="
KERNEL_VER=`uname -r`
TARGET_NAME=`hostname`
echo "Kernel Info, $TARGET_NAME, $KERNEL_VER, $os_ver"
echo "========= FS Info ===================="
Total_FS_NFS=`df -PhT | egrep -i "nfs" | wc -l`
Total_FS_CIFS=`df -PhT | egrep -i "cifs" | wc -l`
Total_FS=$(( $Total_FS_NFS + $Total_FS_CIFS ))
echo "$TARGET_NAME, Mounted Filesystems Info: CIFS=$Total_FS_CIFS , NFS=$Total_FS_NFS , Total=$Total_FS"

}

timestamp
logDirectory
osVersion
getKernelinfo
getresourceinfo
cfgfileBackup
getInterfacecfgs
getBootinfo
repoBackup
#patchAnalysis
getRunningprocess
getRunningDB
#getDiskData
#getMiscData
#getDmidecodeData
parseData
getDiskspace
#registeredServer
#tarData
oldInfoFileRename
infoFile > /var/run/$HOST.pre_patch_info.txt; chmod 666 /var/run/$HOST.pre_patch_info.txt
echo "[INFO] ====================== END of Precheck ============================"





linux post check 
====

#/bin/sh
#set -x
##
##
#Final Version POST check script
##
##
patchDir=/var/log/patchDir
DATE=`date +%Y_%m_%d`
TIMESTAMP=$(date)
lastReboot=$(who -b | awk '{print $3, $4}')
uptimesinceReboot=$(uptime | awk '{print $3, $4}' | awk -F "," '{print $1}')

HOST=$(echo $(uname -n) | sed -e 's/\..*$//')
pre=$patchDir/$HOST/precheck
post=$patchDir/$HOST/postcheck

function timestamp {
	echo "======================= Starting postcheck ==============================="
		echo "[INFO] Date: $TIMESTAMP"
}

function getKernelinfo {
	
		uname -a | awk '{print $3}' > $patchDir/$HOST/postcheck/kernelPostpatch.out
		kernelPostpatch=$(cat $patchDir/$HOST/postcheck/kernelPostpatch.out)
		kernelPrepatch=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
}		

function compareKernel {
	
	echo "=========================================================================="
	if [[ $1 == $2 ]]; then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
		
}


function comparingKernel {
	
	
		case $osFlavor in
			RedHat)
				compareKernel $kernelPostpatch $kernelPrepatch
					case $? in
						0) 	
							echo "[WARNING] This installed version of the kernel $kernelPostpatch is the same as before patching $kernelPrepatch" 
							kernelvalue=0  && exit 1
							;;
						1) 
							echo "[INFO] The installed version of the kernel $kernelPostpatch is different than the prepatch kernel $kernelPrepatch"
							kernelvalue=1
							;;
						2)
							echo "[INFO] The installed version of the kernel $kernelPostpatch is different than the  prepatch kernel $kernelPrepatch"
							kernelvalue=2
							;;
					esac
			;;
			SUSE)
				compareKernel $kernelPostpatch $kernelPrepatch
					case $? in
						0) 
							echo "[WARNING] This installed version of the kernel $kernelPostpatch is the same as before patching $kernelPrepatch" 
							kernelvalue=0 # && exit 1
							;;
						1) 
							echo "[INFO] The installed version of the kernel $kernelPostpatch is different than the prepatch kernel $kernelPrepatch"
							kernelvalue=1
							;;
						2)
							echo "[INFO] The installed version of the kernel $kernelPostpatch is different than the prepatch kernel $kernelPrepatch"
							kernelvalue=2
							;;
					esac
			
			;;	
		esac
	echo "=========================================================================="
}

function logDirectory {
	
	if [ ! -d $patchDir/$HOST/precheck ]; then
		echo "[ERROR] Please be sure to run precheck prior to patching" && exit 1
	else
		mkdir -p $patchDir/$HOST/postcheck 
	fi 
}

function osVersion {
	
	echo "=========================================================================="
	os=$(uname)
	if [ "$os" == 'Linux' ]; then
		if [ -f /etc/redhat-release ];then
			osFlavor=$(cat /etc/redhat-release | awk '{print $1$2}')
			osVersion=`cat /etc/redhat-release | sed 's/^.*\([0-9]\{1,\}\.[0-9]\{1,\}\).*$/\1/'`
			echo "[INFO] OS: $osFlavor $osVersion"
			LD_LIBRARY_PATH=
		else
			osFlavor=$(cat /etc/SuSE-release | awk 'NR == 1 {print $1}')
			osMajorVer=$(cat /etc/SuSE-release | awk 'NR == 2 {print $3}')
			osMinorVer=$(cat /etc/SuSE-release | awk 'NR == 3 {print $3}')
			echo "[INFO] OS: $osFlavor $osMajorVer.$osMinorVer"
		fi
	else
		echo "[ERROR] Operating System is not Linux based, please run this on a Linux OS"
		exit 1
	fi
}

function cfgfileBackup {
	
	echo "=========================================================================="
	if [ ! -d $patchDir/$HOST/postcheck/etc ]; then
	mkdir -p /$patchDir/$HOST/postcheck/etc/
	for bkupsync in fstab mtab resolv.conf samba nsswitch.conf hosts passwd shadow group auto_master auto.master autofs autofs.conf multipath.conf
			do
					echo "[INFO] Copying $bkupsync to $patchDir/$HOST/postcheck/etc/"
					cp -pr /etc/$bkupsync $patchDir/$HOST/postcheck/etc/ > /dev/null 2>&1
			done
	fi
}

function getInterfacecfgs {
	
	echo "=========================================================================="
	case $osFlavor in
	
		RedHat)
			
			mkdir -p /$patchDir/$HOST/postcheck/etc/sysconfig/network-scripts
			echo "[INFO] Copying ifcfg files to $patchDir/$HOST/postcheck/etc/sysconfig/network-scripts"
			cp -pr  /etc/sysconfig/network-scripts/ifcfg-* $patchDir/$HOST/postcheck/etc/sysconfig/network-scripts  > /dev/null 2>&1
			echo "[INFO] Copying route information to $patchDir/$HOST/postcheck/etc/sysconfig/network-scripts"
			route -n > $patchDir/$HOST/postcheck/etc/sysconfig/network-scripts/route
		;;
		SUSE)
			
			mkdir -p /$patchDir/$HOST/postcheck/etc/sysconfig/network
			echo "[INFO] Copying ifcfg files to $patchDir/$HOST/postcheck/etc/sysconfig/network"
			cp -pr  /etc/sysconfig/network/ifcfg-* $patchDir/$HOST/postcheck/etc/sysconfig/network  > /dev/null 2>&1
			echo "[INFO] Copying route information to $patchDir/$HOST/postcheck/etc/sysconfig/network"
			cp -pr  /etc/sysconfig/network/routes $patchDir/$HOST/postcheck/etc/sysconfig/network/route			
		;;
	
	esac

}

function getBootinfo {
	
	echo "=========================================================================="
	echo "[INFO] Checking booting kernel information"
	if [ -f $patchDir/$HOST/postcheck/kernelPostpatch.out ]; then
		case $osFlavor in
	
			RedHat)
				if [ $osVersion == 6.10 ]; then
					
					numIndexcount=$(cat /boot/grub/menu.lst | grep title | wc -l)
					cat /boot/grub/menu.lst | grep default | awk 'NR==1 {print $1,"" $2}' > $patchDir/$HOST/precheck/precheck.boot.index.out
					precheckbootIndex=$(cat $patchDir/$HOST/precheck/precheck.boot.index.out)
					precheckbootKernel=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
					echo "[INFO] Server currently has $numIndexcount indexes in menu.list"
					echo "[INFO] Server is currently booting off index $precheckbootIndex"
					echo "[INFO] Index $precheckbootIndex belongs to this Kernel: $precheckbootKernel"
				
				else
					numIndexcount=$(grubby --info=ALL | grep index | wc -l)
					grubby --info=ALL | grep index > $patchDir/$HOST/postcheck/grubby.boot.out
					bootIndex=$(grubby --default-index)
					numKernelcount=$(grubby --info=ALL | grep kernel | wc -l)
					grubby --info=ALL | grep kernel > $patchDir/$HOST/postcheck/grubby.kernel.out
					bootKernel=$( grubby --default-kernel | awk  -F '/' '{print $3}')
					echo "[INFO] Server currently has $numIndexcount indexes in grubby"
					echo "[INFO] Server is currently booting off index $bootIndex"
					echo "[INFO] Index $bootIndex belongs to this Kernel: $bootKernel"
					
					echo "[INFO] Server previously had $numIndexcount indexes in grubby"
					echo "[INFO] Server was booting off index $bootIndex"
					echo "[INFO] After patching Index $bootIndex belongs to this Kernel: $bootKernel"
				fi
			;;
			SUSE)
				numIndexcount=$(cat /boot/grub/menu.lst | grep title | wc -l)
				cat /boot/grub/menu.lst | grep default | awk 'NR==1 {print $1,"" $2}' > $patchDir/$HOST/postcheck/postcheck.boot.index.out
				precheckbootIndex=$(cat $patchDir/$HOST/precheck/precheck.boot.index.out)
				postcheckbootIndex=$(cat $patchDir/$HOST/postcheck/postcheck.boot.index.out)
				ls -lat /boot/initrd | awk '{print $11}' | cut -c 8-30 > $patchDir/$HOST/postcheck/postcheck.boot.kernel.out
				precheckbootKernel=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
				postcheckbootKernel=$(cat $patchDir/$HOST/postcheck/postcheck.boot.kernel.out)
				echo "[INFO] Server currently has $numIndexcount indexes in menu.list"
				echo "[INFO] Server is currently booting off index $postcheckbootIndex"
				echo "[INFO] Index $bootIndex belongs to this Kernel: $postcheckbootKernel"
				
				echo "[INFO] Server previously had $numIndexcount indexes in menu.list"
				echo "[INFO] Server was booting off index $precheckbootIndex"
				echo "[INFO] Server was booting to this kernel $precheckbootKernel"
				
			;;
		esac
		
		
	else
		case $osFlavor in
	
			RedHat)
				if [ $osVersion == 6.10 ]; then
					
					numIndexcount=$(cat /boot/grub/menu.lst | grep title | wc -l)
					cat /boot/grub/menu.lst | grep default | awk 'NR==1 {print $1,"" $2}' > $patchDir/$HOST/precheck/precheck.boot.index.out
					precheckbootIndex=$(cat $patchDir/$HOST/precheck/precheck.boot.index.out)
					precheckbootKernel=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
					echo "[INFO] Server currently has $numIndexcount indexes in menu.list"
					echo "[INFO] Server is currently booting off index $precheckbootIndex"
					echo "[INFO] Index $precheckbootIndex belongs to this Kernel: $precheckbootKernel"
				
				else
			
					numIndexcount=$(grubby --info=ALL | grep index | wc -l)
					grubby --info=ALL | grep index > $patchDir/$HOST/precheck/grubby.boot.out
					bootIndex=$(grubby --default-index)
					numKernelcount=$(grubby --info=ALL | grep kernel | wc -l)
					grubby --info=ALL | grep kernel > $patchDir/$HOST/precheck/grubby.kernel.out
					bootKernel=$( grubby --default-kernel | awk  -F '/' '{print $3}')
					echo "[INFO] Server currently has $numIndexcount indexes in grubby"
					echo "[INFO] Server is currently booting off index $bootIndex"
					echo "[INFO] Index $bootIndex belongs to this Kernel: $bootKernel"
				fi
			;;
			SUSE)
				numIndexcount=$(cat /boot/grub/menu.lst | grep title | wc -l)
				cat /boot/grub/menu.lst | grep default | awk 'NR==1 {print $1,"" $2}' > $patchDir/$HOST/precheck/precheck.boot.index.out
				precheckbootIndex=$(cat $patchDir/$HOST/precheck/precheck.boot.index.out)
				ls -lat /boot/initrd | awk '{print $11}' | cut -c 8-30 > $patchDir/$HOST/precheck/kernelPrepatch.out
				precheckbootKernel=$(cat $patchDir/$HOST/precheck/kernelPrepatch.out)
				echo "[INFO] Server currently has $numIndexcount indexes in menu.list"
				echo "[INFO] Server is currently booting off index $precheckbootIndex"
				echo "[INFO] Index $precheckbootIndex belongs to this Kernel: $precheckbootKernel"
				
			;;
		esac
	fi

}

function repoBackup {
	
	echo "=========================================================================="
	case $osFlavor in
	
		RedHat)
			echo "[INFO] Rsyncing /etc/yum.repos.d to $patchDir/yum.repos.d"
			echo "[INFO] to remove any 3rd party repositories not needed for OS patching"
			rsync --remove-source-files -avzh /etc/yum.repos.d  $patchDir/$HOST/precheck/ > /dev/null 2>&1
			
		;;
		SUSE)
			echo "[INFO] Rsyncing /etc/zypp/repos.d to $patchDir/repos.d"
			echo "[INFO] to remove any 3rd party repositories not needed for OS patching"
			rsync --remove-source-files -avzh /etc/zypp/repos.d  $patchDir/$HOST/precheck/ > /dev/null 2>&1
			
		;;
	
	esac

}

function repoFormat {

	if [ $$osFlavor == "SUSE" ]; then 
		echo "=========================================================================="
		echo "[INFO] Formating repo name for easier manipulatation"
		for repoFormat in $(ls -l  /etc/zypp/repos.d | grep spacewalk| awk '{print $9}')
		do
			cd /etc/zypp/repos.d
			sed -i 's/ /_/g' $repoFormat
		done
	fi
	
}

function patchAnalysis {
	
	echo "=========================================================================="
	echo "[INFO] Gathering Missing patch information.  Please hold while I gather that information"
	case $osFlavor in
	
		RedHat)
			if [ -d $patchDir/$HOST/postcheck ];then
				yum updateinfo list | awk '{print $2}' | grep bugfix  > /$patchDir/$HOST/postcheck/bugfixes.log
				yum updateinfo list | awk '{print $2}' | grep security  > /$patchDir/$HOST/postcheck/security.log
				yum updateinfo list | awk '{print $2}' | grep enhancement > /$patchDir/$HOST/postcheck/enhancement.log
			else
				yum updateinfo list | awk '{print $2}' | grep bugfix  > /$patchDir/$HOST/precheck/bugfixes.log
				yum updateinfo list | awk '{print $2}' | grep security  > /$patchDir/$HOST/precheck/security.log
				yum updateinfo list | awk '{print $2}' | grep enhancement > /$patchDir/$HOST/precheck/enhancement.log
			fi
			numBugfixcount=$(yum updateinfo list | awk '{print $2}' | grep bugfix | wc -l)
			numSecuritycount=$(yum updateinfo list | awk '{print $2}' | grep security | wc -l)
			numEnhancementcount=$(yum updateinfo list | awk '{print $2}' | grep enhancement | wc -l)
			numberPatchescount=$(($numEnhancementcount + $numSecuritycount + $numBugfixcount))
		;;
		SUSE)
			zypper ref  > /dev/null 2>&1
			repoFormat
			if [ -d $patchDir/$HOST/postcheck ]; then
				zypper lp | grep bugfix > /$patchDir/$HOST/postcheck/bugfixes.log
				zypper lp | grep security > /$patchDir/$HOST/postcheck/security.log
				zypper lu > /$patchDir/$HOST/postcheck/updates.log
			else
				zypper lp | grep bugfix > /$patchDir/$HOST/precheck/bugfixes.log
				zypper lp | grep security > /$patchDir/$HOST/precheck/security.log
				zypper lu  > /$patchDir/$HOST/precheck/updates.log
			fi
			numBugfixcount=$(zypper lp | grep bugfix | wc -l)
			numSecuritycount=$(zypper lp | grep security | wc -l)
			numPatchescount=$(($numSecuritycount + $numBugfixcount))
			numUpdatescount=$(zypper lu | wc -l)
			numUpdatescount=$(($numUpdatescount - $numPatchescount - 4))
			numberPatchescount=$(($numPatchescount + $numUpdatescount))
		;;
		
	esac
	echo "[INFO] Data gathering complete will prepare to restore repo files"

}

function repoRestore {
	
	echo "=========================================================================="
	case $osFlavor in
	
		RedHat)
			echo "[INFO] Restoring original repo files and any 3rd party repos"
			echo "[INFO] from backed up location in $patchDir/yum.repos.d"
			rsync -avzh --delete  $patchDir/$HOST/precheck/yum.repos.d/ /etc/yum.repos.d > /dev/null 2>&1
		;;
		SUSE)
			echo "[INFO] Restoring original repo files and any 3rd party repos"
			echo "[INFO] from backed up location in $patchDir/repos.d"
			rsync -avzh --delete  $patchDir/$HOST/precheck/repos.d/ /etc/zypp/repos.d > /dev/null 2>&1
		;;
		
	esac

}

function getRunningprocess {
		
	if [ ! -d $patchDir/$HOST/postcheck ]; then
		ps -ef | awk ' {print $2}' | wc -l > /$patchDir/$HOST/precheck/precheck.PIDScount.log
		ps -ef | awk ' {print $2, $8}' > /$patchDir/$HOST/precheck/precheck.PIDs.log
		numPIDscount=$(ps -ef | awk ' {print $2}' | wc -l)
	else
		ps -ef | awk ' {print $2}' | wc -l > /$patchDir/$HOST/postcheck/postcheck.PIDScount.log
		ps -ef | awk ' {print $2, $8}' > /$patchDir/$HOST/postcheck/postcheck.PIDs.log
		numPIDscount=$(ps -ef | awk ' {print $2}' | wc -l)
	fi 
}

function getRunningDB {
	 if [ -d $patchDir/$HOST/postcheck ]; then
	 	echo "[INFO] Checking smon pmon dataserv hadoop gemfire"
		ps -ef |grep "ps -ef" |grep -v grep > /$patchDir/$HOST/postcheck/ps2 #place holder
		echo "  ---------------- ps -eaf | grep -i smon  ---------------- "| tee /$patchDir/$HOST/postcheck/db.log
        ps -eaf | grep -i smon|grep -v grep | tee -a /$patchDir/$HOST/postcheck/db.log /$patchDir/$HOST/postcheck/ps2
        echo "  ---------------- ps -eaf | grep -i pmon  ---------------- "| tee -a /$patchDir/$HOST/postcheck/db.log
        ps -eaf | grep -i pmon|grep -v grep | tee -a /$patchDir/$HOST/postcheck/db.log /$patchDir/$HOST/postcheck/ps2
        echo "  ---------------- ps -eaf | grep -i dataserv  ------------ "| tee -a /$patchDir/$HOST/postcheck/db.log
        ps -eaf | grep -i datas|grep -v grep | tee -a /$patchDir/$HOST/postcheck/db.log /$patchDir/$HOST/postcheck/ps2
        echo "  ---------------- ps -ef | grep -i hadoop  --------------- "| tee -a /$patchDir/$HOST/postcheck/db.log
        ps -ef | grep hadoop|grep -v grep | tee -a /$patchDir/$HOST/postcheck/db.log /$patchDir/$HOST/postcheck/ps2
		echo "  ---------------- ps -ef | grep -i gemfire  -------------- "| tee -a /$patchDir/$HOST/postcheck/db.log
        ps -ef | grep gemfire|grep -v grep | tee -a /$patchDir/$HOST/postcheck/db.log /$patchDir/$HOST/postcheck/ps2
		df -PTh > $patchDir/$HOST/postcheck/df2 # using here when getDiskData is commented
	fi
}

function getDiskData {

	if [ -d $patchDir/$HOST/postcheck ]; then
		echo "=========================================================================="
		echo "[INFO] Showing currently mounted filesystems"
        df -PTh |tee $patchDir/$HOST/postcheck/df2
		echo "=========================================================================="        
		echo "======= mount ==============" > $patchDir/$HOST/postcheck/mount
        mount > $patchDir/$HOST/postcheck/mount
		echo "[INFO] Gathering Server Disk information"
			echo "  =============== fdisk -l ============= " > /$patchDir/$HOST/postcheck/DiskData.log
		fdisk -l > /$patchDir/$HOST/postcheck/DiskData.log
			echo "  ================ swap info =========== " >> /$patchDir/$HOST/postcheck/DiskData.log
        swapon -s >> /$patchDir/$HOST/postcheck/DiskData.log
            echo " ================= free ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        free >> /$patchDir/$HOST/postcheck/DiskData.log
			echo "  ================ free -m ============= " >> /$patchDir/$HOST/postcheck/DiskData.log
        free -m >> /$patchDir/$HOST/postcheck/DiskData.log
		     echo "  ================ pvs  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        pvs >> /$patchDir/$HOST/postcheck/DiskData.log  
			echo "  ================ vgs  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        vgs >> /$patchDir/$HOST/postcheck/DiskData.log 
			echo "  ================ lvs  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        lvs >> /$patchDir/$HOST/postcheck/DiskData.log 
            echo "  ================ pvscan  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        pvscan >> /$patchDir/$HOST/postcheck/DiskData.log 
            echo "  ================ pvdisplay  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        pvdisplay >>  /$patchDir/$HOST/postcheck/DiskData.log 
            echo "  ================ vgdisplay  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        vgdisplay >> /$patchDir/$HOST/postcheck/DiskData.log 
            echo "  ================ lvdisplay  ================ " >> /$patchDir/$HOST/postcheck/DiskData.log
        lvdisplay >> /$patchDir/$HOST/postcheck/DiskData.log 

        fi
}

function getMiscData {

	if [ -d $patchDir/$HOST/postcheck ]; then
		echo "[INFO] Gathering cpuinfo, exports(NFS shares), dsm.sys & rpm info"
            echo " ============== cpuinfo  ================"> /$patchDir/$HOST/postcheck/MiscData.log
        cat /proc/cpuinfo > /$patchDir/$HOST/postcheck/MiscData.log
			echo " ============ exports (NFS shares) ====" >> /$patchDir/$HOST/postcheck/MiscData.log
		cat /etc/exports >> /$patchDir/$HOST/postcheck/MiscData.log
            echo " ============== dsm.sys  ================" >> /$patchDir/$HOST/postcheck/MiscData.log
        cat /opt/tivoli/tsm/client/ba/bin/dsm.sys >> /$patchDir/$HOST/postcheck/MiscData.log
            echo " ============== rpm -qa --last  ================" >> /$patchDir/$HOST/postcheck/MiscData.log
        rpm -qa --last >> /$patchDir/$HOST/postcheck/MiscData.log

	fi
}

function getDmidecodeData {

        if [ -d $patchDir/$HOST/postcheck ]; then
		echo "[INFO] Gathering dmidecode info"
            echo " ============== dmidecode ================" > /$patchDir/$HOST/postcheck/MiscData.log
        dmidecode > /$patchDir/$HOST/postcheck/dmidecode.log
        fi
}

function parseData {
	
	echo "=========================================================================="
	echo "[INFO] Server last reboot was $lastReboot"
	echo "[INFO] Server uptime is $uptimesinceReboot"
	if [ -f  /$patchDir/$HOST/postcheck/postcheck.PIDScount.log ]; then
		echo "[INFO] Before the Server was patched it had $numPIDscount processes running"
		echo "[INFO] After patching the Server now has $numPIDscount processes running"
	else
		echo "[INFO] Currently the server has $numPIDscount processes running"
	fi 
	if [ "$kernelvalue" == 0 ]; then
		echo "[INFO] Current Version of Kernel is $kernelPostpatch"
		echo "[INFO] No Kernel patches applied this cycle"
	
	elif [ "$kernelvalue" == 1 ]; then 
		echo "[INFO] Current Version of Kernel is $kernelPostpatch"
		echo "[INFO] Kernel Version before patching was previously $kernelPrepatch"
		echo "[INFO] Kernel Successfully update to newest version in the repository"
	elif [ "$kernelvalue" == 2 ]; then
		echo "[WARN] Current Version of Kernel is $kernelPostpatch"
		echo "[WARN] Kernel Version before patching was previously $kernelPrepatch"
	else
		echo "---------------------------------------------------------"
		echo "[INFO] Kernel Version before patching was $kernelPrepatch"
		echo "[INFO] Kernel Version After patching is   $kernelPostpatch"
	fi
	
}
function moreparseData {	
	case $osFlavor in
	
		RedHat)
			echo "[INFO] Total number of missing Bugfix Patches: $numBugfixcount"
			echo "[INFO] Total number of missing Security Patches: $numSecuritycount"
			echo "[INFO] Total number of missing Enhancements: $numEnhancementcount"
			echo "[INFO] Total number of missing Patches: $numberPatchescount"
		;;
		SUSE)
			echo "[INFO] Total number of missing Bugfix Patches: $numBugfixcount"
			echo "[INFO] Total number of missing Security Patches: $numSecuritycount"
			echo "[INFO] Total number of missing Updates: $numUpdatescount"
			echo "[INFO] Total number of missing Patches: $numberPatchescount"
		;;
	esac
	
}

function getDiskspace {

        bootFreespace=$(df | awk '$NF == "/boot" {print $4}')
        echo "[INFO] Boot has $bootFreespace Kilobytes free"

        usrFreespace=$(df | awk '$NF == "/usr" {print $4}')
        echo "[INFO] usr has $usrFreespace Kilobytes free"
		
		bootUsedspace=$(df | awk '$NF == "/boot" {print $3}')
        echo "[INFO] Boot is using $bootUsedspace Kilobytes"

		usrUsedspace=$(df | awk '$NF == "/usr" {print $3}')
        echo "[INFO] usr is using $usrUsedspace Kilobytes"

        spaceReqboot=50000

        [[ $bootFreespace -lt 50000 ]] && echo "[ERROR] DANGER... DANGER... DANGER... patching server with less than 50MB in boot is a bad idea.  Advise not to patch and check space in /boot"

}

function compareDf {
echo "=========================================================================="
echo "[INFO] Showing missing filesystems from postcheck"
awk 'NR==FNR{c[$1]++;nest};c[$1] == 0' $patchDir/$HOST/postcheck/df2 $patchDir/$HOST/precheck/df1 

}

function comparePs {
echo "---------------------------------------------------------"
echo "[INFO] Showing missing processes from postcheck"
awk 'NR==FNR{c[$8]++;nest};c[$8] == 0' $patchDir/$HOST/postcheck/ps2 $patchDir/$HOST/precheck/ps1 

}

function tarData {

	tar -cvf /$patchDir/$HOST/postcheck/post_$HOST.$DATE.tar /$patchDir/$HOST/postcheck/*
	
}

function oldInfoFileRename {
echo "=========================================================================="
echo "[INFO] Renaming old & creating new post_patch_info.txt"
oldFileDate=$( stat -c %y /var/run/$HOST.post_patch_info.txt | awk '{print $1"_"$2}' | sed -e 's/\..*$//')
mv /var/run/$HOST.post_patch_info.txt /var/run/$HOST.post_patch_info.txt.$oldFileDate > /dev/null 2>&1

}

function infoFile {

os=$(uname)
if [ "$os" == 'Linux' ]; then
if [ -f /etc/redhat-release ];then
os_ver=$(cat /etc/redhat-release)
else
os_ver=$(cat /etc/SuSE-release | tr '\n' ' ')
fi
fi
echo "  ================  uptime  ================ "
uptime
echo "  ================ w  ================ "
w
echo "  ================  uname -a  ================ "
uname -a
echo "  ================ free  ================ "
free
echo "  ================ free -m  ================ "
free -m
echo "  ================  swapon -s ================ "
swapon -s
echo "  ================  cpuinfo ================ "
cat /proc/cpuinfo
echo " - ================ domainname ================  "
domainname
echo "  ================ hostname  ================  "
hostname
echo "  ================ df -PTh ================ "
df -PTh
echo " ================  df -PTh | wc -l ================ "
df -PTh | wc -l
echo " ================ vgs ==================="
vgs
echo "  ================ fdisk -l  ================ "
fdisk -l
echo " =============rpm -qa --last =============== "
rpm -qa --last
echo "  ================ ps -eaf ================ "
ps -eaf
echo "  ================ ps -eaf |wc -l================ "
ps -eaf |wc -l
echo "  ================ cat /proc/net/bonding/bond0 =============== "
cat /proc/net/bonding/bond0 
echo "  ================ Server iLO Info =============== "
/usr/bin/ipmitool lan print
echo "  ================ ifconfig -a  ================ "
ifconfig -a
echo "  ================ route -n ================ "
route -n
echo "  ================  cat /etc/fstab ================  "
cat /etc/fstab
echo "  ================ cat /etc/mtab ================  "
cat /etc/mtab
echo "  ================ cat /etc/resolv.conf ================  "
cat /etc/resolv.conf
echo "  ================ /etc/samba/smb.conf ================  "
cat /etc/samba/smb.conf
echo "  ================ cat /etc/nsswitch.conf  ================  "
cat /etc/nsswitch.conf
echo "  ================ cat /etc/hosts  ================ "
cat /etc/hosts
echo "  ================ cat /etc/passwd ================ "
cat /etc/passwd
echo "  ================ cat /etc/shadow  ================ "
cat /etc/shadow
echo "  ================ cat /etc/group  ================ "
cat /etc/group
echo "  ================ cat /etc/auto_master  ================ "
cat /etc/auto_master
echo "  ================ cat /etc/auto.master  ================ "
cat /etc/auto.master
echo " ================ cat /etc/autofs ================ "
cat /etc/autofs
echo " ================ cat /etc/autofs.conf ================ "
cat /etc/autofs.conf

echo $os_ver | grep -i SUSE
if [ $? -eq 0 ];then
echo " ================ cat /boot/grub/menu.lst (SUSE) ================ "
cat /boot/grub/menu.lst
echo "  ================ Interfaces config  ================ "
for i in `ls -l /etc/sysconfig/network/ifcfg-* | awk '{print $NF}'`;do echo "$i Showing";cat $i;echo " ============ ";done
else
echo $os_ver | grep "6\."
if [ $? -eq 0 ];then
echo " ================ cat /boot/grub/grub.conf (RHEL6) ================ "
cat /boot/grub/grub.conf
echo "  ================ Interfaces config  ================ "
for i in `ls -l /etc/sysconfig/network-scripts/ifcfg-* | awk '{print $NF}'`;do echo "$i Showing";cat $i;echo " ============ ";done
else
echo " ================ cat /boot/grub2/grub.cfg (RHEL7) ================ "
cat /boot/grub2/grub.cfg
echo "  ================ Interfaces config  ================ "
for i in `ls -l /etc/sysconfig/network-scripts/ifcfg-* | awk '{print $NF}'`;do echo "$i Showing";cat $i;echo " ============ ";done
fi
fi
echo "  ================ ps -eaf | grep -i smon ================ "
ps -eaf | grep -i smon
echo "  ================ ps -eaf | grep -i pmon  ================ "
ps -eaf | grep -i pmon
echo "  ================ ps -eaf | grep -i dataserv  ================ "
ps -eaf | grep -i datas
echo "  ================ showmount -e  ================ "
showmount -e
echo " ================ dmidecode =============="
dmidecode
echo " ================ pvscan ================"
pvscan
echo " ================ pvdisplay ================"
pvdisplay
echo " ================ vgdisplay ================"
vgdisplay
echo " ================ lvdisplay ================"
lvdisplay
echo " ================ ps -eaf | grep -i nfs ================"
ps -eaf | grep -i nfs
echo "  ================ cat /opt/tivoli/tsm/client/ba/bin/dsm.sys  ================ "
cat /opt/tivoli/tsm/client/ba/bin/dsm.sys
echo "  ================ mount  ================ "
mount
echo " ============= kernel version ==============="
KERNEL_VER=`uname -r`
TARGET_NAME=`hostname`
echo "Kernel Info, $TARGET_NAME, $KERNEL_VER, $os_ver"
echo "========= FS Info ===================="
Total_FS_NFS=`df -PhT | egrep -i "nfs" | wc -l`
Total_FS_CIFS=`df -PhT | egrep -i "cifs" | wc -l`
Total_FS=$(( $Total_FS_NFS + $Total_FS_CIFS ))
echo "$TARGET_NAME, Mounted Filesystems Info: CIFS=$Total_FS_CIFS , NFS=$Total_FS_NFS , Total=$Total_FS"

}

timestamp
logDirectory
osVersion
getKernelinfo
cfgfileBackup
getInterfacecfgs
getBootinfo
#repoBackup
#patchAnalysis
repoRestore
getRunningprocess
getRunningDB
#getDiskData
#getMiscData
#getDmidecodeData
parseData
#moreparseData
#getDiskspace
oldInfoFileRename
infoFile > /var/run/$HOST.post_patch_info.txt; chmod 666 /var/run/$HOST.post_patch_info.txt
#tarData
comparingKernel
compareDf
comparePs
echo "[INFO] ==================== END of Postcheck ======================" 






=====
mtu value chagne 




#!/bin/ksh

MTU_SIZE=1500

function get_eth_devices
{
        i=0
        ETHERNET_DEVICES_COUNT=0
        for interface in `/sbin/ifconfig -a|egrep "^[a-z]" | awk '{print $1}'`
        do
        echo $interface | grep -E "eth" > /dev/null
                if [ $? -eq 0 ]
                        then
                        ETHERNET_DEVICES[$i]=$interface
                        i=$i+1
                        ETHERNET_DEVICES_COUNT=$ETHERNET_DEVICES_COUNT+1
                fi
        done
}

function set_jumbo_frames
{
        e=0
        while [ $e -lt $ETHERNET_DEVICES_COUNT ]
        do
                interface=${ETHERNET_DEVICES[$e]}
                echo "Setting MTU=$MTU_SIZE for interface $interface"
                /sbin/ifconfig $interface mtu $MTU_SIZE up
                if [ $? -eq 0 ]; then
                echo "success!"
                else
                echo "failed!"
                fi
                if  grep MTU /etc/sysconfig/network/ifcfg-$interface > /dev/null
                then
                   sed -i "/MTU/ c\MTU=$MTU_SIZE" /etc/sysconfig/network/ifcfg-$interface
                else
                   printf "MTU=$MTU_SIZE\n" >> /etc/sysconfig/network/ifcfg-$interface
                fi
                e=$e+1
        done

}

if [ "Linux" != $(uname) ]
 then
   echo "Error: Unsupported OS $(uname)"
   exit 1
 else
  if ! grep -q "SUSE Linux Enterprise Server 11" /etc/SuSE-release
   then
     echo "Unsupported OS: $(grep "SUSE" /etc/SuSE-release)"
     exit 1
  fi
fi
get_eth_devices

set_jumbo_frames









upgrade centry service app 
----

#!/bin/nsh
#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

. //pwausxpbrmgt01p/usr/local/bl_depot/personal/Paul/envsetup.nsh

OS=$(GetOS)
ENV=$(GetEnv)

DEST_IP=${DESTIP}

#
# end of determine OS and env
#



#
# Set Variables
#



#OS SPECIFIC VARIABLES
case $OS in
sunos)
#INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current03-sol10-sparc.tgz
#CROND_DIR=/var/spool/cron/crontabs
echo "Solaris upgrades are not supported at this time."
exit 1
;;

aix)
INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current-aix7.1-ppc.tgz
CROND_DIR=/var/spool/cron/crontabs
;;

suse)
#INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current03-suse11-x86_64.tgz
#DB2_PAM_FILE_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/linux/db2/suse/db2
#CROND_DIR=/var/spool/cron
echo "SLES is not supported by Centrify Agent version 6 and must remain on 5.7"
exit 1
;;

redhat)
INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current-rhel5-x86_64.tgz
DB2_PAM_FILE_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/linux/db2/redhat/db2
CROND_DIR=/var/spool/cron
CENTRIFYSSHRUNNING=`nexec $DEST systemctl status centrify-sshd | grep running`
CENTRIFYSSHRPM=`nexec $DEST rpm -qa | grep CentrifyDC-openssh`
REMOVESSHPKGCMD="rpm -e $CENTRIFYSSHRPM"


;;

*)
echo "Unable to identify OS type for $DEST.  Please check job logs and examine $DEST /etc/*release* file to ensure this is a supported OS and verify this is an HCSC OS image."
exit 2
;;
esac #OS CASE

#must be set here even though common


#ENV SPECIFIC VARIABLES
case $ENV in

dev)
LDAP_SEARCH_HOST=pwausldmp01
AD_CENTRIFY_AUTH=`cat //${LDAP_SEARCH_HOST}/root/.centrify_auth_dev`
AD_CENTRIFY_AUTH_USER='a6702005'
AD_VIP=adldapdev.test.hcscint.net
AD_TREE_NAME='adhcscdev.net'
AD_TREE=`echo $AD_TREE_NAME | awk -F. '{ print $1 }'`
AD_TREE_SUFFIX=`echo $AD_TREE_NAME | awk -F. '{ print $2 }'`
;;

prod)
LDAP_SEARCH_HOST=pwausldmp01
AD_CENTRIFY_AUTH=`cat //${LDAP_SEARCH_HOST}/root/.centrify_auth_prod`
AD_CENTRIFY_AUTH_USER='a6702007'
AD_VIP=adldaps.hcscint.net
AD_TREE_NAME='adhcscint.net'
AD_TREE=`echo $AD_TREE_NAME | awk -F. '{ print $1 }'`
AD_TREE_SUFFIX=`echo $AD_TREE_NAME | awk -F. '{ print $2 }'`
;;

altprod)
#LDAP_SEARCH_HOST=$DEST
#AD_CENTRIFY_AUTH=`cat //pwausldmp01/root/.centrify_auth_altprod`
AD_CENTRIFY_AUTH_USER='acent002'
AD_VIP=adldaps.alt.hcscint.net
AD_TREE_NAME='adhcscalt.net'
AD_TREE=`echo $AD_TREE_NAME | awk -F. '{ print $1 }'`
AD_TREE_SUFFIX=`echo $AD_TREE_NAME | awk -F. '{ print $2 }'`
;;


test)
LDAP_SEARCH_HOST=pwausldmp01
AD_CENTRIFY_AUTH=`cat //${LDAP_SEARCH_HOST}/root/.centrify_auth_test`
AD_CENTRIFY_AUTH_USER='a6702006'
AD_VIP=adldap.test.hcscint.net
AD_TREE_NAME='adhcsctst.net'
AD_TREE=`echo $AD_TREE_NAME | awk -F. '{ print $1 }'`
AD_TREE_SUFFIX=`echo $AD_TREE_NAME | awk -F. '{ print $2 }'`
;;

*)
echo "Unable to identify Environment for $DEST.  Please check Config Managment Tools and identify the appropriate environment for $DEST.  A manual install may be required."
exit 2
;;
esac #ENV CASE

#COMMON
INSTALL_INSTALL_CMD='./install.sh -n'
#instantiate run ad with 0
#RUN_ADJOIN='0'


#sloppy solution but last minute changes
#if [ $OS = "aix" ]
#then
#	INSTALL_INSTALL_CMD='./install.sh -n'
#fi

PKG_FILE=`basename $INSTALL_PKG_SOURCE`

#
#pre-install checks
#

if [ -z $CENTRIFYSSHRPM ]
then
  echo "Centrify SSHD is not installed on $DEST...continue upgrade."
else
  echo "Centrify SSHD is installed on $DEST...checking status of service."
  if [ -z $CENTRIFYSSHRUNNING ]
  then 
    echo "Centrify SSHD is not active...removing package."
    nexec $DEST "$REMOVESSHPKGCMD"
  else
    echo "Centrify SSHD is active...stopping and disabling. Remove Package. Enable opensshd."
    nexec $DEST "systemctl stop centrify-sshd"
    nexec $DEST "systemctl disable centrify-sshd"
    nexec $DEST "systemctl enable sshd"
    nexec $DEST "systemctl start sshd"
    nexec $DEST "$REMOVESSHPKGCMD"
  fi
fi

#
#copy package and Install
#


#copy package and run install command
mkdir -p //${DEST}/var/tmp/stage/centrify
cp -f ${INSTALL_PKG_SOURCE} //${DEST}/var/tmp/stage/centrify/
nexec $DEST "cd /var/tmp/stage/centrify ; gzip -d -c ./${PKG_FILE} | tar -xvf -"
#nexec $DEST "${INSTALL_INSTALL_CMD} /var/tmp/stage/${PKG_FILE} ; echo \"${?}\" > /tmp/cmd_result"
echo "cd /var/tmp/stage/centrify ; ${INSTALL_INSTALL_CMD} ; echo \"\${?}\" > /tmp/cmd_result" > //$DEST/var/run/cent_install_script.sh
chmod 700 //$DEST/var/run/cent_install_script.sh
nexec $DEST "/var/run/cent_install_script.sh"

RESULT=`cat //${DEST}/tmp/cmd_result`

#debug
#echo "Result of install is: ${RESULT}"

if [ $RESULT -ne '0' ]
then
	1>&2 echo "It appears something went wrong with the RPM install/upgrade.  Please login review the job logs for $DEST and determine the cause of the issue."
	exit 1
fi

#update the config file with local account manage and local group merge settings
#add local users to user.ignore and remove gid 1 from group ignore
sed -i -e 's/\# adclient.local.group.merge: false/adclient.local.group.merge: true/' //${DEST}/etc/centrifydc/centrifydc.conf
sed -i -e 's/\# adclient.local.account.manage: false/# adclient.local.account.manage: true/' //${DEST}/etc/centrifydc/centrifydc.conf
sed -i -e '/^1$/d' //$DEST/etc/centrifydc/gid.ignore

#fix /etc/nsswitch.conf for Linux and Solaris
#update centrify-sshd config to allow root login or CAPAM will not function
if [[ $OS = "redhat" || $OS = "suse" || $OS = "sunos" ]]
then
	cp -f //${DEST}/etc/nsswitch.conf //${DEST}/etc/nsswitch.conf.pre_centrify
	sed -i -e 's/^passwd:.*$/passwd\: centrifydc files/' //${DEST}/etc/nsswitch.conf
	sed -i -e 's/^shadow:.*$/shadow\: centrifydc files/' //${DEST}/etc/nsswitch.conf
	sed -i -e 's/^group:.*$/group\: centrifydc files/' //${DEST}/etc/nsswitch.conf
	sed -i -e 's/\#PermitRootLogin prohibit-password/PermitRootLogin yes/' //${DEST}/etc/centrifydc/ssh/sshd_config
	nexec ${DEST} "service centrify-sshd restart"
fi


#update config to standards set for high performance on 11/9/2020

#always backup the original!
cp -f //$DEST/etc/centrifydc/centrifydc.conf //$DEST/etc/centrifydc/centrifydc.conf.pre_std_set

for CONFIG_LINE in `cat //pwausxpbrmgt01/usr/local/bl_depot/centrify/high_auth_volume/std_settings | awk '{ print $1 }'`
do
	grep -v ${CONFIG_LINE} //$DEST/etc/centrifydc/centrifydc.conf > //$DEST/etc/centrifydc/centrifydc.conf.hold
	cp -f //$DEST/etc/centrifydc/centrifydc.conf.hold //$DEST/etc/centrifydc/centrifydc.conf
done

cat //pwausxpbrmgt01/usr/local/bl_depot/centrify/high_auth_volume/std_settings >> //$DEST/etc/centrifydc/centrifydc.conf

#add logrotate to root crontab to protect /var from filling up
#clear in case this is being re-run against a host
cp -f //$DEST/var/spool/cron/root //$DEST/root/root.crontab
grep -v "/etc/logrotate.d/centrifydc" //$DEST/root/root.crontab > //$DEST/var/spool/cron/root


echo "0 9 * * * /usr/sbin/logrotate  --force /etc/logrotate.d/centrifydc
0 21 * * * /usr/sbin/logrotate  --force /etc/logrotate.d/centrifydc"  >> //$DEST/${CROND_DIR}/root


#disable sssd
#disable the rhel_certgp.pl group policy mapper script so that the apps can 
#continue to put stuff into the Trusted Server Keystore the wrong way and it can 

#remove client temp files
rm -rf //${DEST}/var/tmp/stage/centrify
rm -f //${DEST}/var/run/cent_install_script.sh
rm -f //${DEST}/tmp/cmd_result

#Technically this is a post requisite but it was tested with this format  for another script so
#it remains pre.





syslgo ng check 
----


#!/bin/bash

log_stuff=$(tail /var/log/messages)
echo "$log_stuff"





cal disk space 

==



use strict ;
use warnings ;

my $tsize = 0 ;
my $junk = q{} ;
my $size = q{} ;
my $sline = q{} ;
my $rc	= 0 ;

my $hostname = q{} ;

chomp($hostname = `hostname`) ;

if( $^O eq "aix" ) {
	my @vglist = () ;

	chomp( @vglist = `lsvg -o` ) ;
	foreach my $vg (@vglist) {
		chomp($sline = (grep( /TOTAL PPs:/, `lsvg $vg`))[0]) ;
 		# print $vg, ":", $sline, "\n" ;

		($junk, $junk, $sline) = split(/:/, $sline, 3) ;
 		# print $vg, ":", $sline, "\n" ;
		# 7988 (1022464 megabytes)
		($size = $sline) =~ s/^.*\((\d+).*\)/$1/ ;
 		# print $vg, ":", $size, "\n" ;
		$tsize += $size ;
	}

}
elsif( $^O ne "linux" ) {
    print "Invalid OS: ", $^O, "\n" ;
    $tsize = "Invalid OS: $^O\n" ;
    $rc = 1 ;
}
else {
#   VG Size               99.00 GiB
    foreach my $sline (grep(/VG Size/, `vgdisplay`)) {
        # print $sline ;
        ($size = $sline) =~ s/^\s*VG Size\s+(\d+\.*\d+).*/$1/ ;
        # print $size, "\n" ;
        $tsize += ($size * 1000) ;
    }
# linux
}

my $OFILE = q{/tmp/} . $hostname . q{.size} ;
open(OUT, ">", $OFILE) or die "Can't open $OFILE: $!\n" ;
print OUT $hostname, q{,}, $tsize, "\n" ;
close(OUT) ;
exit $rc ;





cal disk space cehck 
-----------------------

#!/bin/ksh
export tsize=0
hostname
PATH=$PATH:/usr/sbin

OS=$(uname -s)

if [[ "${OS}" == "AIX" ]]
then
	PATH="/usr/local/bin:/usr/ccs/bin:/home/i340264/bin:/usr/bin:/etc:/usr/sbin:/usr/ucb:/usr/local/bin:/bin:/sbin:/usr/bin/X11:/usr/ccs/bin:/usr/local:/usr/java14/jre/bin:/usr/java14/bin:.:/usr/ucb:/home/i340264/bin:/usr/local"
	/usr/bin/lsvg -o | while read i
	do
		size=$(/usr/bin/lsvg ${i} |
			awk -F: '$2 ~ /TOTAL PPs/ {print $3}' |
			sed -e 's/^.*(//' -e 's/ ....bytes)$//')
		((tsize+=${size}))
	done
elif [[ "${OS}" == "Linux" ]]
then
	/sbin/vgdisplay | awk '/VG Size/ {print $(NF-1)}' | while read size
	do
		((tsize+=(${size} * 1000)))
	done
else
	tsize="Invalid OS: ${OS}"
fi

echo "$(hostname),${tsize}" >> //pwausxpbrmgt01/usr/local/bl_depot/personal/Paul/allspace.out





check all syslog pkg
------

#!/bin/nsh
#  Set the hostname (and a FQDN is *not* a hostname it's a FQDN)
DEST="`echo ${1} | sed -e 's/\..*$//'`"

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo $DEST | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //$DEST/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //$DEST/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#  Now we've got the OS and ENV we can proceed with the rest of the work

#  For sunos

if [ "${OS}" != "sunos" ]
then
    PKGS=$(nexec -e 'rpm -qa | grep -i syslog')
    for PKG in ${PKGS}
    do  
        RPM=$(nexec -e "rpm -q --queryformat=\"%{NAME} %{VERSION}\" $PKG")
        NAME=${RPM%% *}
        VERSION=${RPM##${NAME}}
        echo "$DEST:INFO:${NAME}:${VERSION}"
    done
else

    NAME=$(nexec -e "pkginfo -l BBsyslng | awk '$1 ~ /NAME:/ && $NF ~ /Syslog-NG/ {printf \"%s \",$NF} | tr '[A-Z]' '[a-z]'")
    VERSION=$(nexec -e "pkginfo -l BBsyslng | awk '$1 ~ /VERSION:/ {print $NF}' | tr '[A-Z]' '[a-z]'")

    echo "$DEST:INFO:${NAME}:${VERSION}"
fi








check if auditd running 
0--------------------------

#!/bin/nsh
ps -eo pid,comm | awk 'BEGIN {rc=1} $NF == "auditd" {rc=0} END {exit rc}'





determine which OS 
-----

#!/bin/nsh
#
#  GetOS.nsh - Determine the OS of the target server
#
#  Author : Paul R. Schmidt 20180518
#  Version: $Id: GetOS.nsh,v 1.2 2019/09/20 14:23:07 i340264 Exp i340264 $
#  Date   : $Date: 2019/09/20 14:23:07 $
#
#  Copyright HCSC, All rights reserved
#
VERSION=$(echo "\$Revision: 1.2 $"|sed -e 's/[$    ]//g' -e 's/Revision://')

DEST="`echo ${1} | sed -e 's/\..*$//'`"

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
                #  And it has a redhat-release
        if [ -f //$DEST/etc/redhat-release ]
        then
                                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                                #  Otherwise it's SuSE
                                #  This is making a vast assumption in general but in
                                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
                #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
                #  NFI if it's not aix
        OS="UNKNOWN"
fi
echo "$DEST:INFO:OS is ${OS}"






get hardware type 

-----

#!/bin/nsh

. //pwausxpbrmgt01p//usr/local/bl_depot/personal/Paul/envsetup.nsh

OS=$(GetOS)

ENV=$(GetEnv)

OSLVL=$(GetOSLVL ${OS} )

# echo ${DEST}:INFO:${OS}:${OSLVL}:${DESTIP}

#ls -l /usr/bin/systemctl
#nexec $DEST /usr/bin/systemctl restart oneagent
#echo '$DEST is:' $DEST
#echo -n "id on the box "
#id
#echo -n "id remotely "
#nexec $DEST "id"
#vgdisplay

#OS=$(uname)
#if [ "${OS}" != "AIX" ]
#then
#	echo "Wrong OS"
#	exit 1
#fi

#IFLIST=$(nexec $DEST 'lsdev -Cc if 2>/dev/null')

#echo "${IFLIST}" | awk '$2 == "Available" && $1 !~ /^lo/ {print $1}' |while read i
#do
#	nexec $DEST "entstat -d ${i} 2>/dev/null | grep 'Device Type:'" < /dev/null
#done
#id
#which service
#service ntpd restart
#/usr/sbin/service ntpd restart


#echo "NSH_RUNCMD_HOST is ${NSH_RUNCMD_HOST}"
#echo "DEST is ${DEST}"
#mkdir //dchislmgt02/tmp/thisisatest
#touch //dchislmgt02/tmp/thisisatest/foo
#touch //dchislmgt02/tmp/thisisatest/bar
#touch //dchislmgt02/tmp/thisisatest/baz

#rm -r //dchislmgt02/tmp/thisisatest
#echo Hello World!

#. //pwausxpbrmgt01p/usr/local/bl_depot/personal/Paul/foo.sh

#foobar $(hostname)

#if [ ! -f "/etc/resolv.conf" ]
#then
#	echo "${DEST}:INFO:${OS}:${ENV}:/etc/resolv.conf not found"
#	exit 0
#fi
# OIFS="${IFS}" ; IFS="" ;cat /etc/resolv.conf | while read i
#do
#	echo "${DEST}:INFO:${OS}:${ENV}:${i}"
#done;IFS="${OIFS}"

#if [ "${OS}" = "redhat" -o "${OS}" = "suse" ]
#then
#	dmidecode > /dev/null 2>&1 || echo "${DEST}:INFO:${OS}:${ENV}:Direct dmidecode could not run"
#	nexec $DEST 'dmidecode > /dev/null 2>&1 && echo "${DEST}:INFO:${OS}:${ENV}:Indirect dmidecode ran"'
#fi

OFIL="/tmp/dmidecode.out"
if [ "${OS}" = "redhat" -o "${OS}" = "suse" ]
then
	dmidecode > ${OFIL} 2>/dev/null || nexec $DEST "dmidecode > ${OFIL} 2>/dev/null"
fi
if [ ! -s "${OFIL}" ]
then
	echo "${DEST}:ERROR:Unable to run dmidecode"
	exit 1
fi

ls -l ${OFIL}

HDW=$(perl -e '
my $tag = q{} ;
my $val = q{} ;
while(<>) {
    next unless( /^System Information/ .. /^$/ ) ;
    next unless( /Product Name/ ) ;
    ($tag, $val) = split(/:/, $_, 2) ;
    $val =~ s/^\s+//g ;
    $val =~ s/\s+$//g ;
    print $val, "\n" ;
}' < ${OFIL} ; rm -f ${OFIL})

echo "${DEST}:INFO:${HDW}"





get firmware version 
==============================

#!/usr/bin/perl
#
#  firmwarever.pl - List the hardware model, firmware version and date
#
#  Author : Paul R. Schmidt 20180314
#  Version: $Id: firmwarever.pl,v 1.3 2018/03/14 20:53:33 i340264 Exp $
#  Date   : $Date: 2018/03/14 20:53:33 $
#
#  Copyright HCSC, All rights reserved
#
use strict ;
use warnings ;

my $VERSION     = sprintf("%d.%d", q$Revision: 1.3 $ =~ /: (\d+)\.(\d+)/) ;

my $DMIDECODECMD = q{dmidecode} ;
# my $DMIDECODECMD = q{cat dmidecode.in} ;

my $hostname    = q{} ;
my $l           = q{} ;
my $tag         = q{} ;
my $val         = q{} ;

my @decodedat = () ;

my %fwdat = (
    fwdate  => q{NA},
    fwver   => q{NA},
    hwver   => q{NA}
) ;

#  Open a pipe to the dmidecode command or carp and die
open( DMICMD, q{-|}, $DMIDECODECMD ) or
    die "Can't open pipe to $DMIDECODECMD: $!\n" ;

chomp( @decodedat = <DMICMD> ) ;

close( DMICMD ) ;

foreach $l (@decodedat) {

    #  Remove any leading whitespace
    $l =~ s/^\s+//g ;
    #  Skip header lines
    next unless( $l =~ m/:/ ) ;

    #  Split line into pieces
    ($tag, $val) = split(/:/, $l, 2) ;

    #  And remove leading whitespace on the value
    $val =~ s/^\s+//g ;

    #  Is this a Product Name
    if( $tag eq q{Product Name} ) {
        #  Yes, skip it if we've seen the product name already
        next if( $fwdat{hwver} ne q{NA} ) ;

        #  Otherwise save it
        $fwdat{hwver} = $val ;

        next ;
    }

    #  Is this the BIOS Release Date?
    if( $tag eq q{Release Date} ) {

        #  Yes, skip it if we already have it
        next if( $fwdat{fwdate} ne q{NA} ) ;

        #  Otherwise save it
        $fwdat{fwdate} = $val ;

        next ;
    }

    #  Is this the BIOS version?
    if( $tag eq q{BIOS Revision} || $tag eq q{Firmware Revision} ) {

        #  Yes, skip it if we already have it
        next if( $fwdat{fwver} ne q{NA} ) ;

        #  Otherwise save it
        $fwdat{fwver} = $val ;

        next ;
    }

}

#  Get the hostname and clean it up
($hostname = `hostname`) =~ s/\..*$//g ;
chomp($hostname) ;

#  Print the gathered info in a format suitable for creating a csv
printf "INFO:%s:%s:%s:%s\n",
    $hostname,
    $fwdat{hwver},
    $fwdat{fwver},
    $fwdat{fwdate} ;







hostname check ---
---

#!/bin/sh
#
DEST=${1}
# DEST="`echo ${1} | sed -e 's/\..*$//'`" # Hostname - fqdn will be determined
FQDN=`host $DEST | awk '{print tolower($1)}'`

if [ "${FQDN}" = "${DEST}" ]
then
	echo "${DEST}:INFO:Delete ${FQDN}"
fi
exit 0




post patch clean up 
---

#!/bin/sh
HOSTNAME=$(hostname)
PATCHDIR="/tmp/aixpatch"
if [ -d "${PATCHDIR}" ]
then
    echo "${HOSTNAME}: INFO: ${PATCHDIR} found.  Removing..."
    rm -rf "${PATCHDIR}"
else
    echo "${HOSTNAME}: INFO: ${PATCHDIR} no found.  Exiting..."
fi









remove sysglog ng pkg 
----


#!/bin/nsh
#
#  update-syslog-ng-conf.nsh - Update the syslog-ng conf file
#
#  Author : Paul R. Schmidt 20180228
#  Version: $Id: update-syslog-ng-conf.nsh,v 1.1 2018/02/28 15:01:52 i340264 Exp i340264 $
#  Date   : $Date: 2018/02/28 15:01:52 $
#
#  Copyright HCSC, All rights reserved
#

VERSION=$(echo "\$Revision: 1.1 $"|sed -e 's/[$    ]//g' -e 's/Revision://')

CERTSRVR="pwauslmgt02"
EMAIL="paul_r_schmidt@bcbsil.com"
SYSLOGRPM="syslog-ng-premium-edition-compact-6.0.8-1.aix7.1.ppc.rpm"
SYSLOGLOC="pwausxpbrmgt01p/usr/local/bl_depot/syslog-ng/aix"
SYSLOGETCDIR="/opt/syslog-ng/etc/"
SYSLOGSSLDIR="/opt/syslog-ng/ssl/"
SYSLOGBKPFILE="syslog-ng.backup.tgz"
SYSLOGSTRTCMD="startsrc -s syslog-ng"
SYSLOGSTOPCMD="stopsrc -s syslog-ng"
NEWHASH="1a71c0c7"
SYSLOGSTRTCMD="startsrc -s syslog-ng"
SYSLOGSTOPCMD="stopsrc -s syslog-ng"

SYSLOGTMPDIR="/tmp/syslog-ng-upgrade.$$"
TIMESTAMP=`date +"%Y%m%d%H%M%S"`
DEST="`echo ${1} | sed -e 's/\..*$//'`" # Hostname - fqdn will be determined
FQDN=`host $DEST | awk '{print tolower($1)}'`

cd //$DEST/tmp

OS="`nexec -e uname`"

echo "$DEST:INFO:Starting"
INSTPKG=`nexec -e rpm -qa | grep -i syslog`
echo "$DEST:INFO:Installed package is $INSTPKG"
# nexec -e rpm -e $INSTPKG
echo "$DEST:INFO:Finished"






upgrade ilo firmewar e
=====

#!/bin/ksh
#
#  iloupgrade.sh - BL script to run ilo upgrade
#
#  Author : Paul R. Schmidt 20171005
#  Version: $Id: iloupgrade.sh,v 1.1 2017/10/05 17:46:26 i340264 Exp $
#  Date   : $Date: 2017/10/05 17:46:26 $
#
#  Copyright HCSC, All rights reserved
#
VERSION=$(echo "\$Revision: 1.1 $"|sed -e 's/[$    ]//g' -e 's/Revision://')

UPGSCR="upgradeilo4"

HOSTNAME=$(hostname)
HOSTNAME="${HOSTNAME%%.*}"

rhs="${HOSTNAME#?}"
env="${HOSTNAME%${rhs}}"

#  Set the 
case $env in

	d)	KSSRVIP="10.130.132.123"
	;;
	t)	KSSRVIP="10.134.234.37"
	;;
	p)	KSSRVIP="10.136.234.41"
	;;
	*)	echo "${HOSTNAME}:ERROR:Can't determine env"
		exit 1
	;;

esac

fname="http://${KSSRVIP}/ks/${UPGSCR}"

cd /tmp
wget -q ${fname}
chmod 0775 ${UPGSCR}
echo Executing ./${UPGSCR}
ksh ./${UPGSCR}






upgrad sysglg ng 
-----

#!/bin/nsh
#
#  syslog-ng-upgrade.nsh - Upgrade syslog-ng
#
#  Author : Paul R. Schmidt 20180601
#  Version: $Id: syslog-ng-upgrade.nsh,v 1.1 2018/08/27 13:51:04 i340264 Exp i340264 $
#  Date   : $Date: 2018/08/27 13:51:04 $
#
#  Copyright HCSC, All rights reserved
#
#  RCSVERSION=$(echo "\$Revision: 1.1 $"|sed -e 's/[$    ]//g' -e 's/Revision://')
#
#  This script lives in Bladelogic and is run from there as well:
#    [/BladeLogic/Depot/ECS OpenSystems/Paul/Upgrade syslog-ng]
#    [/BladeLogic/Jobs/ECS OpenSystems/Paul/NSHScript_Jobs/Upgrade syslog-ng]
#
#  Since the ID10Ts that implemented the 1.0 boxes here had no clue
#  how to name servers effectively it's necessary to fall back on the
#  other stupid implementation they used to specify env (i.e.,
#  breaking the aliases file by putting a non-functional alias in it to
#  indicate env).

#  Set the hostname (and a FQDN is *not* a hostname it's a FQDN)
DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi
echo "${DEST}:INFO:${OS}:${ENV}"

#  We know our os and env

#  We don't do windows, er, sorry, redhat
if [ "${OS}" = "redhat" ]
then
    #  Redhat uses rsyslog
    echo "${DEST}:WARNING:OS is ${OS} skipping"
    exit 1
fi

#  Vars common to all platforms
BKUPLIST="syslog-ng.backup.list"
CERTSRVR="pwauslmgt02"
EMAIL="paul_r_schmidt@bcbsil.com"
FILES2BKUPTMP="syslog-ng.backup.tmp"
NEWHASH="1a71c0c7"
SYSLOGBKPFILE="syslog-ng.backup.tgz"
SYSLOGDIR="/opt/syslog-ng"
SYSLOGETCDIR="/opt/syslog-ng/etc"
SYSLOGSSLDIR="/opt/syslog-ng/ssl"
TIMESTAMP=$(date +"%Y%m%d%H%M%S")

#  For most boxes (i.e., suse) oslvl doesn't matter it's the same rpm
OSLVL="NA"

#  If we're running under aix
if [ "${OS}" = "aix" ]
then
    #  We also need to determine what version AIX we're running under
    OSLVL="`nexec -e oslevel | sed -e 's/\..*$//g'`"
elif [ "${OS}" = "sunos" ]
then
    #  Likewise for sunos
    OSLVL="$(nexec -e uname -r)"
    #  However, for sunos we will only run on 5.10
    if [ "${OSLVL}" != "5.10" ]
    then
    	echo "${DEST}:ERROR:SunOS release is ${OSLVL} skipping"
    	exit 1
	fi
fi

echo "${DEST}:INFO:OSLVL is ${OSLVL}"

#  Define the associative arrays we need
declare -A LOCS RPMS AIXRPMS PKGLIST SYSLGSTARTCMDS SYSLGSTOPCMDS SEMSERVERS VALIDPKGS LISTOPT

#  Where to get files for each platform
LOCS[aix]="pwausxpbrmgt01p/usr/local/bl_depot/syslog-ng/aix"
LOCS[sunos]="pwausxpbrmgt01p/usr/local/bl_depot/syslog-ng/sunos"
LOCS[suse]="pwausxpbrmgt01p/usr/local/bl_depot/syslog-ng/suse"

LOC="$LOCS[${OS}]"
echo "${DEST}:INFO:File source location is $LOC"

#  Where to put files for each platform - making it unique to this run
TMPDIR=$(nexec -e "echo /tmp/syslog-ng-upgrade"'.$$')
echo "${DEST}:INFO:TMPDIR is ${TMPDIR}"

#  Determine rpm file name for platform
#  SunOS and SuSE have the same pkg regardless of version of os
#  Aix of course has to have a difference rpm per os version so we
#  need a level of indirection
RPMS[aix]='$AIXRPMS[$OSLVL]'
RPMS[sunos]='syslog-ng-premium-edition-compact-6.0.8-solaris-10-sparc64.pkg.gz'
RPMS[suse]='syslog-ng-premium-edition-compact-6.0.8-1.sles11.x86_64.rpm'
AIXRPMS[5]='syslog-ng-premium-edition-client-5.0.14a-1.aix5.2.ppc.rpm'
AIXRPMS[6]='syslog-ng-premium-edition-client-5.6.1b-1.aix6.1.ppc.rpm'
AIXRPMS[7]='syslog-ng-premium-edition-compact-6.0.8-1.aix7.1.ppc.rpm'

#  Set it to the appropriate value for the OS
RPM="$RPMS[$OS]"

#  And resolve the indirection for aix
if [ "${OS}" = "aix" ]
then
    eval RPM=${RPM}
fi

RPMLOC="${LOC}/${RPM}"
echo "${DEST}:INFO:RPM is ${RPM}"
echo "${DEST}:INFO:RPMLOC is ${RPMLOC}"

#  Service start commands
SYSLGSTARTCMDS[aix]='startsrc -s syslog-ng'
SYSLGSTARTCMDS[sunos]='svcadm enable syslog-ng'
SYSLGSTARTCMDS[suse]='/etc/init.d/syslog-ng start'

#  Service stop commands
SYSLGSTOPCMDS[aix]='stopsrc -s syslog-ng'
SYSLGSTOPCMDS[sunos]='svcadm disable syslog-ng'
SYSLGSTOPCMDS[suse]='/etc/init.d/syslog-ng stop'

SYSLGSTART="$SYSLGSTARTCMDS[${OS}]"
SYSLGSTOP="$SYSLGSTOPCMDS[${OS}]"

echo "${DEST}:INFO:Service start command: ${SYSLGSTART}"
echo "${DEST}:INFO:Service stop  command: ${SYSLGSTOP}"

#  Where do we need to point this box
SEMSERVERS[dev]='twaulbsemslg.hcscint.net'
SEMSERVERS[test]='twaulbsemslg.hcscint.net'
SEMSERVERS[prod]='pwaulbsemslg.hcscint.net'

SEMSERVER="${SEMSERVERS[${ENV}]}"

echo "${DEST}:INFO:SEMSERVER is ${SEMSERVER}"

#  Due to BL being a POS we can't access the rpm file directly via rpm
#  We have to copy it to ${DEST} first and manipulate it there :/
#  So instead of being able to verify all our info before we make any
#  modifications to the DEST we'll have to make changes before we can tell
#  if we need to proceed or not

#  Get the name and version of the package we're going to install

echo "${DEST}:INFO:Creating ${TMPDIR}"
nexec -e  "mkdir ${TMPDIR}"
echo "${DEST}:INFO:${TMPDIR} created"

LPKG="${TMPDIR}/syslog-ng.rpm"
[ "${OS}" = "sunos" ] && LPKG="${TMPDIR}/syslog-ng.pkg.gz"
echo "${DEST}:INFO:Copying pkg to ${TMPDIR}"
cp //$RPMLOC //${DEST}/${LPKG}
echo "${DEST}:INFO:Pkg copied to ${TMPDIR}"

echo "${DEST}:INFO:Extracting info from ${LPKG}"

if [ "${OS}" = "sunos" ]
then
    echo "${DEST}:INFO:Uncompressing pkg"
    nexec -e "gunzip ${LPKG}"
    echo "${DEST}:INFO:Pkg uncompressed"
	LPKG="${LPKG%%.gz}"
	RPMDAT=$(nexec -e "pkginfo -l  -d ${LPKG}" | awk '$1 ~ /PKGINST:/ {name=$2} $1 ~ /VERSION:/ {ver=$2} END {print name,ver}' )
else
    RPMDAT=$(nexec -e "rpm -q --queryformat='%{NAME} %{VERSION}\n' -p ${LPKG}" )
fi
echo "${DEST}:INFO:Extracted info from ${LPKG}"

RPMPKG="${RPMDAT%% *}"
RPMVER="${RPMDAT##${RPMPKG} }"

echo "${DEST}:INFO:Current RPM name is ${RPMPKG}"
echo "${DEST}:INFO:Current RPM ver  is ${RPMVER}"
#
#  We have the desired/current package name and version,  now determine what
#  syslog-ng packages, if any, are installed, and what version(s) they
#  are, indicating if we should continue or not

#  This is the list of packages we're concerned with (as *packages* at
#  this point - we'll worry about tarballs afterwards
PKGLIST[BBsyslng]=0
PKGLIST[HCSC-syslog-ng]=0
PKGLIST[syslog-ng]=0
PKGLIST[syslog-ng-premium-edition]=0
PKGLIST[syslog-ng-premium-edition-client]=0
PKGLIST[syslog-ng-premium-edition-compact]=0

#  Don't leave any cruft lying about
function CleanUp {
    echo "${DEST}:INFO:Cleaning up ${TMPDIR}"
    ls -l //${DEST}/$TMPDIR/
    nexec -e "[ -d ${TMPDIR} ] && rm -rf ${TMPDIR}"
}

# Function to make the loop over the list of pkgs a little cleaner
function GetPkgVer {
    PKG2CHK="${1}"
    PKGDAT="NA NA"

    #  If this is a sunos box we have to work with the pkg system instead of rpm
    if [ "${OS}" = "sunos" ]
    then
        #  pkginfo sends its "not found" message to stderr so by
        #  discarding stderr we return an empty string if the pkg
        #  isn't there
        PKGDAT=$(nexec -e "pkginfo -l ${PKG2CHK} 2>/dev/null" | awk '$1 ~ /PKGINST:/ {name=$2} $1 ~ /VERSION:/ {ver=$2} END {if( name ) print name,ver}' )
        # echo "${DEST}:INFO:PKGDAT is \"${PKGDAT}\""
    else
        #  aix rpm also sends its "not found" message to stderr.
        #  However, suse rpm send the msg to stdout (same place the
        #  found output would go) therefore we need to redirect stderr to
        #  stdout so all the output goes to the same place

        PKGDAT="$(nexec -e "rpm -q --queryformat='%{NAME} %{VERSION}\n' ${PKG2CHK} 2>&1")"
        #  Then we have to evaluate it and discard a "not found" msg
        expr "${PKGDAT}" : '.*not installed$' > /dev/null && PKGDAT=""
    fi
    echo "${PKGDAT}"
}

echo "${DEST}:INFO:Checking for installed pkgs..."
PKGINSTALLED=0
#  For each of the packages in the list
for pkg in "${(@k)PKGLIST}"
do
        #  Get this pkg and version (if any)
        IPKG=$(GetPkgVer ${pkg})

        #  If this package has been installed here
        if [ -n "${IPKG}" ]
        then
        	#  Break the returned info into name and version
            PKGPKG="${IPKG%% *}"
            PKGVER="${IPKG##${PKGPKG} }"

            #  Is the installed pkg current?
            if [ "${PKGPKG}" = "${RPMPKG}" -a "${PKGVER}" = "${RPMVER}" ]
            then
                #  Yes, carp and die
                echo "${DEST}:ERROR:Current package ${RPMPKG} already installed"
                CleanUp
                exit 1
            fi

            #  Otherwise record the version for processing later
            echo "${DEST}:INFO:Saving pkg version ${PKGVER}"
            PKGLIST[${pkg}]="${PKGVER}"
            #  And indicate we have installed pkgs to handle
            PKGINSTALLED=1
        else
            #  Or keep it mark non-existent
            unset "PKGLIST[${pkg}]"
        fi
done
echo "${DEST}:INFO:PKGINSTALLED is ${PKGINSTALLED}"
echo "${DEST}:INFO:Done checking for installed pkgs..."

if [ "${PKGINSTALLED}" -eq 1 ]
then
	echo "${DEST}:INFO:Installed pkgs found"

	for pkg in "${(@k)PKGLIST}"
	do
		echo "${DEST}:INFO:${pkg} - ${PKGLIST[${pkg}]}"
	done
fi

#  We've verified whether the current package is already installed and
#  if not if *any* version of the *package* (vs the tarball) is installed.
#
#  Now it's time to see, if no pkg is installed if the tarball is.

#  We don't want to check for the tarball if a package is installed
#  because after a certain point the packages put their files in
#  /opt/syslog-ng
if [ "${PKGINSTALLED}" -ne 1 ]
then
	TARINSTALLED=0
	TARINSTALLED="$([ -d //${DEST}${SYSLOGDIR} ] && echo 1 || echo 0 )"
	echo "${DEST}:INFO:TARINSTALLED is ${TARINSTALLED}"

fi

#  This isn't an installation script, carp and die if we can't find
#  anything
if [ "${PKGINSTALLED}" -eq 0 -a "${TARINSTALLED}" -eq 0 ]
then
	echo "${DEST}:ERROR:No syslog-ng package found. Aborting..."
	CleanUp
	exit 2
fi

#  We won't get here if *something* doesn't need to be upgraded
#  And we want to backup the generated list of files to backup as well
#  We can just redirect because this will create the file
nexec -e "echo ${TMPDIR}/${BKUPLIST} > ${TMPDIR}/${BKUPLIST}"

#  Now generate the list of files to backup prior to removing the
#  existing software

if [ "${PKGINSTALLED}" -eq 1 ]
then
	#  We're dealing with packages

	#  Process all installed packages that apply
	for pkg in "${(@k)PKGLIST}"
	do
		#  If we're not on sunos (yay)
		if [ ${OS} != "sunos" ]
		then
			#  We can use rpm and append  as there may be more than one pkg
			#  AIX always has to be different
			if [ ${OS} = "aix" ]
			then
				#  AIX doesn't output the pkg name
				nexec -e "rpm -q --filesbypkg ${pkg} >> ${TMPDIR}/${FILES2BKUPTMP}"
			else
				#  But SuSE does
				nexec -e "rpm -q --filesbypkg ${pkg} | sed -e 's/^[^ ]* //g' >> ${TMPDIR}/${FILES2BKUPTMP}"
			fi
		else
			nexec -e "pkgchk -l BBsyslng | awk '/^Pathname:/ {print $2}' >> ${TMPDIR}/${FILES2BKUPTMP}"
		fi
	done
fi

if [ "${TARINSTALLED}" -eq 1 ]
then
	#  We're dealing with tarballs (maybe)
	#  The older packages install syslog-ng under /etc while the newer
	#  ones put it under /opt (same damn place the tarballs put it :/)

	#  Generating the list of files for tarballs (or otherwise under /opt)
	#  is much easier than it is for rpms
	nexec -e "find ${SYSLOGDIR} -print  >> ${TMPDIR}/${FILES2BKUPTMP}"
fi

nexec -e "sed 's&^[	 ][	 ]*/&&' < ${TMPDIR}/${FILES2BKUPTMP} | sort -u >> ${TMPDIR}/${BKUPLIST}"

echo "${DEST}:INFO:List of files to backup created"
echo "${DEST}:INFO:The list of files to backup is:"
# nexec -e "cat ${TMPDIR}/${BKUPLIST}"
echo "${DEST}:INFO:Elided..."

#  The list of files it backup is complete now try to back them up
#  properly

#  tar is literally one of the oldest commands in the entire *nix
#  universe.  How the *hell* does it end up having a different option
#  for the same thing on every platform?!?! O_o
LISTOPT[aix]="L"
LISTOPT[sunos]="I"
LISTOPT[suse]="T"

#  And again, no consistency in the supported option across versions
#  Which is why this is done via a pipe to gzip rather than using the
#  -z option (only suse supports it)

echo "${DEST}:INFO:OS is ${OS}"
echo "${DEST}:INFO:LISTOPT[${OS}] is ${LISTOPT[${OS}]}"
#  Determine the appropriate tar command pipe to execute based on OS
if [ "${OS}" = "suse" ]
then
	#  Since all the files (except the list of files) is a relative
	#  path, make sure we're running in the root directory
	#  And use the z option to get a compressed tarball
	echo "${DEST}:INFO:Running suse backup command:"
	echo "${DEST}:INFO:tar czfT ${TMPDIR}/${SYSLOGBKPFILE} ${TMPDIR}/${BKUPLIST}"
	nexec -e "cd / ; tar czfT ${TMPDIR}/${SYSLOGBKPFILE} ${TMPDIR}/${BKUPLIST}"
elif [ "${OS}" = "aix" ]
then
	#  Since all the files (except the list of files) is a relative
	#  path, make sure we're running in the root directory
	#  aix and sunos don't support the -z option so use pipe
	echo "${DEST}:INFO:Running non-suse backup command:"
	echo "${DEST}:INFO:tar cfL - ${TMPDIR}/${BKUPLIST} | gzip -v > ${TMPDIR}/${SYSLOGBKPFILE}"
	nexec -e "cd / ; tar cfL - ${TMPDIR}/${BKUPLIST} | gzip -v > ${TMPDIR}/${SYSLOGBKPFILE}"
else
	#  Stupid assed sunos too - both of the other will accept list
	#  option as part of the regular list of options
	#  Since all the files (except the list of files) is a relative
	#  path, make sure we're running in the root directory
	#  aix and sunos don't support the -z option so use pipe
	echo "${DEST}:INFO:Running non-suse backup command:"
	echo "${DEST}:INFO:tar cf - -I ${TMPDIR}/${BKUPLIST} | gzip -v > ${TMPDIR}/${SYSLOGBKPFILE}"
	nexec -e "cd / ; tar cf - -I ${TMPDIR}/${BKUPLIST} | gzip -v > ${TMPDIR}/${SYSLOGBKPFILE}"
fi

echo "${DEST}:INFO:Backup file created"
echo "${DEST}:INFO:Backup file contains:"
nexec -e "gunzip -c ${TMPDIR}/${SYSLOGBKPFILE} | tar tvf -"
echo "${DEST}:INFO:Elided..."

#  Ok, initial determinations and backup are complete
#  Remove the old instance so the new instance can be installed

echo "${DEST}:INFO:Starting pre-installation cleanup"

#  Syslog needs to be stopped before removing the instance so it
#  doesn't interfere with the removal
echo "${DEST}:INFO:Stopping syslog-ng"
echo "${DEST}:INFO:${SYSLGSTOP}"
nexec -e "${SYSLGSTOP}"

#  Is it installed via tarball?
if [ "${TARINSTALLED}" -eq 1 ]
then
	#  Yes
	echo "${DEST}:INFO:Removing instance installed via tarball"

	#  Removing a tarball installation shouldn't be any more
	#  complex than removing the base dir
	INSTRMCMD="rm -rf ${SYSLOGDIR}"
	echo "${DEST}:INFO:Removing old package"
	echo "${DEST}:INFO:${INSTRMCMD}"
	nexec -e "${INSTRMCMD}"
else
	#  Otherwise it's installed via package (either rpm or pkg)
	echo "${DEST}:INFO:Removing instance installed via package(s):"

	#  Process all installed packages that apply
	for pkg in "${(@k)PKGLIST}"
	do

		echo "${DEST}:INFO:Removing package ${pkg}"
		#  Sun just *has* to do things differently
		if [ "${OS}" != "sunos" ]
		then
			#  AIX and SuSE can use rpm
			INSTRMCMD="rpm -ev --nodeps ${pkg}"
		else
			#  For sunos there are of course a number of hoops to jump
			#  through

			#  First an appropriately modified defaults file needs to
			#  be created so that it doesn't prompt for a response.
			#  This will allow completely non-interactive execution
			#  This is the system default file
			SUNOSADMDEF="/var/sadm/install/admin/default"
			#  This is the temporary copy that will be modified appropriately
			SUNOSNEWADMDEF="${TMPDIR}/default"

			#  By removing any existing entry and adding it explicitly
			#  to the end of the file we guarantee its there and
			#  set appropriately
			nexec -e "sed -e 'g/^action=/d' < ${SUNADMDEF} > ${SUNOSNEWADMDEF}"
			nexec -e "echo 'action=nocheck' >> ${SUNOSNEWADMDEF}"

			#  Now that the pieces are in place build the remove cmd
			INSTRMCMD="pkgrm -n -a ${SUNOSNEWADMDEF} ${pkg}" 
		fi
		echo "${DEST}:INFO:Removing old package"
		echo "${DEST}:INFO:${INSTRMCMD}"
		nexec -e "${INSTRMCMD}"
	done
		
fi

#  Customize the conf file for this host/env
cp //${LOC}/template.conf //${DEST}/${TMPDIR}/
nexec -e sed -e 's/%%SEMSERVER%%/'$SEMSERVER'/g' ${TMPDIR}/template.conf > ${TMPDIR}/syslog-ng.conf
#  Accomodate BL stupidity
nexec -e "chmod 0666 ${TMPDIR}/template.conf"
echo "${DEST}:INFO:Customized conf file created"

#  Make sure the files are in place before we proceed

#  Check the template file in case this failing caused the sed to fail
if [[ ! -f //${DEST}${TMPDIR}/template.conf || ! -s //${DEST}${TMPDIR}/template.conf ]]
then
    echo "${DEST}:ERROR:template conf file copy failed"
    exit 1
fi  

#  Verify that the sed worked
if [[ ! -f //${DEST}${TMPDIR}/syslog-ng.conf || ! -s //${DEST}${TMPDIR}/syslog-ng.conf ]]
then
    echo "${DEST}:ERROR:conf file creation/customization failed"
    exit 1
fi  

#  Create a new cert tarball and copy it here
echo "${DEST}:INFO:Creating new cert tarball"
# cd //${CERTSRVR}/opt/ssl_storage/scripts.d
nexec ${CERTSRVR} "cd /opt/ssl_storage/scripts.d && ./mk_syslog-ng_ssl_certs.pl --email $EMAIL --host ${FQDN}"
echo "${DEST}:INFO:Copying new cert tarball using:"
cp //${CERTSRVR}/opt/ssl_storage/ssl.d/tar.d/${FQDN}.tar //${DEST}${TMPDIR}/

#  Everything is cleaned up and in place.  Install the new package.

#  Build the install command
if [ "${OS}" != "sunos" ]
then
	#  We're running on suse or aix so we can use the rpm command
	QUIETOPT="--quiet"

	#  Of course aix has to be different and doesn't support the quiet
	#  option
	if [ "${OS}" = "aix" ]
	then
		QUIETOPT=""
	fi

	INSTALLCMD="rpm ${QUIETOPT} -i ${LPKG}"
else
	#  We need the responses file for the install on SUNOS
	RESPONSES="responses"

	#  The pkgadd command has to have a relative path (morons) to the
	#  pkg being installed
	LPKG="./${LPKG##*/}"
	cp //${LOC}/${RESPONSES} //${DEST}${TMPDIR}
	INSTALLCMD="cd ${TMPDIR} ; yes | pkgadd -r ./${RESPONSES} -d ${LPKG} BBsyslng"
fi
echo "$DEST:INFO:Installing new package via cmd:"
echo "$DEST:INFO:${INSTALLCMD}"
nexec -e "${INSTALLCMD}"

echo "$DEST:INFO:New package installed"

#  Stupid stupid stupid aix
if [ "${OS}" = "aix" ]
then
	nexec -e "${SYSLGSTOP}"
fi

#  Drop the config file in place
#  Creating a backup first
echo "${DEST}:INFO:Backing up default conf file"
nexec -e "[ -f ${SYSLOGETCDIR}/syslog-ng.conf ] && cp ${SYSLOGETCDIR}/syslog-ng.conf ${SYSLOGETCDIR}/syslog-ng.conf.upgrade.${TIMESTAMP}"
echo "${DEST}:INFO:Placing the conf file"
nexec -e cp /${TMPDIR}/syslog-ng.conf ${SYSLOGETCDIR}/

# And make sure the directory it references is there as well
echo "${DEST}:INFO:Verifying conf.d dir exists"
nexec -e [ ! -d ${SYSLOGETCDIR}/conf.d ] && mkdir ${SYSLOGETCDIR}/conf.d || echo "${DEST}:INFO:${SYSLOGETCDIR}/conf.d already exists"
nexec -e chmod 0755 ${SYSLOGETCDIR}/conf.d

#  Unpack the certs
echo "${DEST}:INFO:Removing old certs"
#  Clear the old crap first and recreate the cert dir
nexec -e rm -rf ${SYSLOGSSLDIR}
#  And recreate it
nexec -e mkdir ${SYSLOGSSLDIR}
GRP="root"
if [ "${OS}" = "aix" ]
then
	GRP="system"
fi
nexec -e chown root:${GRP} ${SYSLOGSSLDIR}
nexec -e chmod 0755 ${SYSLOGSSLDIR}

echo "${DEST}:INFO:Unpacking the certs"
UNTARCMD="tar xf /${TMPDIR}/${FQDN}.tar"
if [ "${OS}" = "suse" ]
then
	UNTARCMD="tar xf /${TMPDIR}/${FQDN}.tar -C ${SYSLOGSSLDIR}"
fi
echo "${DEST}:INFO:Unpacking news certs"
echo "${DEST}:INFO:${UNTARCMD}"
cd //${DEST}${SYSLOGSSLDIR}
nexec -e "${UNTARCMD}"
echo "${DEST}:INFO:Cert dir contains:"
nexec -e ls -l ${SYSLOGSSLDIR}

#  And recreate them
echo "${DEST}:INFO:Creating cert symlinks"
nexec -e ln -s ${SYSLOGSSLDIR}/cert.d/${FQDN}-server.pem ${SYSLOGSSLDIR}/cert.d/server.pem
nexec -e ln -s ${SYSLOGSSLDIR}/key.d/${FQDN}-server.key ${SYSLOGSSLDIR}/key.d/server.key
#  Drop the proper hash into place
#  This is done manually until the openssl packages can be
#  appopriately updated to generate a proper hash
nexec -e ln -s ${SYSLOGSSLDIR}/ca.d/sem-ca.pem ${SYSLOGSSLDIR}/ca.d/${NEWHASH}.0

#  Restart syslog-ng
echo "${DEST}:INFO:Restarting syslog-ng"
nexec -e "${SYSLGSTOP}"
sleep 3
nexec -e "${SYSLGSTART}"
cd //${DEST}/tmp/
#  Save the backup file before we remove the working dir
cp //${DEST}/${TMPDIR}/${SYSLOGBKPFILE} //${DEST}${SYSLOGDIR}

CleanUp
echo "${DEST}:INFO:Finished"







bulk user add =
-------------------


#!/bin/nsh
#This script reads the file /var/run/user_list and will attempt to add the users listed there to the server.
#The script will also check to see if the group listed exists
#The file /var/run/user_list should be in the following, comma delimited format.
#
# USER_LOGIN_NAME,UID,GID,GROUP_NAME,COMMENT(GECOS),HOMEDIR,SHELL,PASSWORDEXPIRE(STANDARD or NONE),LOGIN or NOLOGIN,PASSWORD
#
# Example:
#test,5000,5000,test_grp,test user,/home/test,/bin/ksh,STANDARD,NOLOGIN,blue1234
#test1,5001,5000,test_grp,test user,/home/test1,/bin/ksh,NONE,LOGIN,blue1234


DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi
#echo "${DEST}:INFO:${OS}:${ENV}"

#  We know our os and env

#  We don't do windows, er, sorry, redhat
##if [ "${OS}" = "redhat" ]
##then
##    #  Redhat uses rsyslog
##    echo "${DEST}:WARNING:OS is ${OS} skipping"
##    exit 1
##fi




target=$NSH_RUNCMD_HOST	
targetlc=`echo ${target} | tr '[:upper:]' '[:lower:]'`

#
# read the , delimited file into an array
#


typeset -i COUNT=1

while IFS=, read LNAME LUID LGID GNAME COMMENT HDIR SHELL PWEXPIR RLOGIN PASSWORD; do
	#echo "$LNAME $LUID $LGID $GNAME $COMMENT $HDIR $SHELL $PWEXPIR $PASSWORD $RLOGIN"
	A_LNAME[$COUNT]=$LNAME
	A_LUID[$COUNT]=$LUID
	A_LGID[$COUNT]=$LGID
	A_GNAME[$COUNT]=$GNAME
	A_COMMENT[$COUNT]=$COMMENT
	A_HDIR[$COUNT]=$HDIR
	A_SHELL[$COUNT]=$SHELL
	A_PWEXPIR[$COUNT]=$PWEXPIR
	A_RLOGIN[$COUNT]=$RLOGIN
	A_PASSWORD[$COUNT]=$PASSWORD
	((COUNT += 1))
done < //pwausxpbrmgt01/var/run/user_list


#
# Verify each group exists, if not create it
# 

#get count of groups to verify
GROUPCOUNT=${#A_LGID[@]}

#run for loop or each group
for GROUP in `seq $GROUPCOUNT`
do
	GRPEXISTS=`nexec ${target} "if (grep $A_LGID[$GROUP] /etc/group >/dev/null); then echo "YES"; else echo "NO"; fi"`
	if [ $GRPEXISTS = "NO" ]
	then
		nexec $target "groupadd -g $A_LGID[$GROUP] $A_GNAME[$GROUP]"
	fi
done


#
# add user accounts
#

#get count of total users to add
USERCOUNT=${#A_LNAME[@]}

#run for loop or each user
for ACCOUNT in `seq $USERCOUNT`
do	
	#
	# process password expiration
	#

	#make sure value is upper case
	PWEXPIR_UPPER=`echo $A_PWEXPIR[$ACCOUNT] | tr '[:lower:]' '[:upper:]'`
	case $PWEXPIR_UPPER in
		STANDARD)
			PWEXPIRVALUE="90"
			;;
		NONE)
	    	PWEXPIRVALUE="-1"
			;;
	esac	
	if [ $OS = "redhat" ]
	then			
		RESULT=`nexec ${target} "useradd -u $A_LUID[$ACCOUNT] -g $A_LGID[$ACCOUNT] -m -d $A_HDIR[$ACCOUNT] -c \"$A_COMMENT[$ACCOUNT]\" -s $A_SHELL[$ACCOUNT] -K PASS_MAX_DAYS=$PWEXPIRVALUE $A_LNAME[$ACCOUNT] > /dev/null ; echo \\$?"`
		#nexec ${target} "useradd -u $A_LUID[$ACCOUNT] -g $A_LGID[$ACCOUNT] -m -d $A_HDIR[$ACCOUNT] -c \"$A_COMMENT[$ACCOUNT]\" -s $A_SHELL[$ACCOUNT] -K PASS_MAX_DAYS=$PWEXPIRVALUE $A_LNAME[$ACCOUNT]; echo \$?"
		# case for the results of the user add, most commonly assumed the target will already exist. Script continues for these expected errors at this time
		# may change this dependent on input from script user "Edward Wilson"
	elif [ $OS = "suse" ]
	then
		RESULT=`nexec ${target} "useradd -u $A_LUID[$ACCOUNT] -g $A_LGID[$ACCOUNT] -m -d $A_HDIR[$ACCOUNT] -c \"$A_COMMENT[$ACCOUNT]\" -s $A_SHELL[$ACCOUNT] $A_LNAME[$ACCOUNT] > /dev/null ; echo \\$?"`
		#set password expire
		nexec ${target} "passwd -x${PWEXPIRVALUE} $A_LNAME[$ACCOUNT]"
	else
		echo "$OS is not redhat or suse Linux. Terminating script."
		exit 1
	fi 
	case $RESULT in
		0)
			echo "user account $A_LNAME[$ACCOUNT] added locally to $target"
			;;
		4)
			echo "$A_LUID[$ACCOUNT] already exists on $target"
			;;
		9)
			echo "$A_LNAME[$ACCOUNT] already exists on $target"
			;;
		*)
			echo "An unexptected error has occured while processing account $A_LNAME[$ACCOUNT] exiting loop and terminating script"
			exit 1
			;;
	esac
	#set user password
	nexec ${target} "echo $A_PASSWORD[$ACCOUNT] | passwd --stdin $A_LNAME[$ACCOUNT]"
done

#process LOGIN or NOLOGIN to update /etc/ssh/sshd_config DenyUsers clause
#for linux LOGIN is the default state so we only need to take action of NOLOGIN is set for the user
LOGINCOUNT=${#A_RLOGIN[@]}
for ALLOWLOGIN in `seq $LOGINCOUNT`
do
	RLOGIN_UPPER=`echo $A_RLOGIN[$ALLOWLOGIN] | tr '[:lower:]' '[:upper:]'`
	if [ $RLOGIN_UPPER = "NOLOGIN" ]
	then
		if grep -q -i "denyusers" //${target}/etc/ssh/sshd_config
		then
			if grep -q -i "denyusers.*$A_LNAME[$ALLOWLOGIN]" //${target}/etc/ssh/sshd_config
			then
				echo "$A_LNAME[$ALLOWLOGIN] is already denied login on $target."
			else
				sed -i -e "s/\(DenyUsers .*\)/\1 $A_LNAME[$ALLOWLOGIN]/" //${target}/etc/ssh/sshd_config
			fi
		else
		nexec $target "echo DenyUsers $A_LNAME[$ALLOWLOGIN] >> /etc/ssh/sshd_config"
		fi
	fi
done
			








check ntp service statu s
------


#---------------------------------------------------------------------------------------------------------
# NSH script to be run by Blade Logic
# Targets are passed with -f flag
#---------------------------------------------------------------------------------------------------------

use strict;
use warnings;
use Getopt::Std;

my %cmd_opt;
getopts('f:',\%cmd_opt);
my $targets =  $cmd_opt{f};

# Will store output on pbrxmast for later processing
# -----------------------------------------------------
my $dst_srv = 'pwausxpbrmgt01';
my $dst_path = '/var/ntp_status';

# Determine target servers, convert names to upper case
# -----------------------------------------------------
open FD, "<$targets" or die "Could not open $targets";
my $first = 0;
my @TARGETS = <FD>;
my $count;
my $total = scalar @TARGETS;

# Cleanup output files on dchislmgt01 and enter the main loop
# -----------------------------------------------------------
system "nexec $dst_srv rm -rf $dst_path";
system "nexec $dst_srv mkdir $dst_path";

$count = 0;
my $rc = 0;
my $rc1 = 0;

foreach ( sort @TARGETS ) {
		$count++;
        chomp;
        tr /A-Z/a-z/;
        my $server = $_;
        print "OUTPUT (copy) $server: $count of $total\n";
        $rc1 = system "cp //$dst_srv/home/i312337/check_ntp.bash //$server/tmp/";
        if ( $rc1 ) {
        		print "BL_AGENT HAD ERROR EXECUTING copy on $server\n";
        }
        system ( "nexec $server chmod 700 /tmp/check_ntp.bash" );
        system ( "nexec $server /tmp/check_ntp.bash" );
        system ( "nexec $server rm /tmp/check_ntp.bash" );
        $rc = system "cp //$server/tmp/$server.ntp.status //$dst_srv/$dst_path/";
        if ( $rc ) {
        		print "BL_AGENT HAD ERROR EXECUTING copy on $server\n";
        }
        system ( "nexec $server rm /tmp/$server.ntp.status" );
}

print "---> FINISHED processing ALL hosts\n";








enable auditd 

-----

#!/bin/nsh

#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

#
# end of determine OS and env
#

#verify this is a linux sles server, if not end script
if [ $OS -ne "suse" ]
then
	echo "This script is designed to be run only on SLES."
	exit 1
fi

#check to see if audit is installed
AUDITPKG=`nexec $DEST "rpm -qa | grep '^audit-[0-9]'"

if [ -z $AUDITPKG ]
then
	#install audit
	nexec $DEST "zypper -n in audit"
fi

#check to see if sysconfig is setup for auditd
#the value of AUDITD_DISABLE_CONTEXTS in the auditd file must be set to no

#check current value
AUDITSYSCFG=`cat /etc/sysconfig/auditd | grep "AUDITD_DISABLE_CONTEXTS" | awk -F= '{print $2}' | sed 's/"//g'`

#if it is already no, take no actions, otherwise set it to no
if [ $AUDITSYSCFG = "no" ]
then
 echo "The host $DEST is already configured to use auditd. No action taken."
else
 sed -i -e 's/AUDITD_DISABLE_CONTEXTS="yes"/AUDITD_DISABLE_CONTEXTS="no"/' //$DEST/etc/sysconfig/auditd
fi






gather hp hardwar info 
-----

#!/bin/nsh

target=$NSH_RUNCMD_HOST	
targetlc=`echo ${target} | tr '[:upper:]' '[:lower:]'`

#clean-up just in case previous files exist
rm //${target}/tmp/gather_HP_info.bash
rm //${target}/tmp/${target}_hphwinfo

#copy script to server
cp //pwausxpbrmgt01/home/i312337/gather_HP_info.bash //${target}/tmp

#set script to exectutable
nexec ${target} "chmod 700 /tmp/gather_HP_info.bash"

#execute script 
nexec ${target} "/tmp/gather_HP_info.bash"

#rename data file
nexec ${target} "mv /tmp/hphwinfo /tmp/${target}_hphwinfo"


#copy data file to home server
cp //${target}/tmp/${target}_hphwinfo //pwausxpbrmgt01/var/HPinfo 

#clean-up script
rm //${target}/tmp/gather_HP_info.bash








install service century 
------


#!/bin/nsh


#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

#  For modern/2.0 boxes the first character of the hostname should be
#  the indicator of env
ENV=`echo ${DEST} | tr '[A-Z]' '[a-z]' | sed -e 's/^\(.\).*$/\1/'`

#  If it's not already [dpt]
if [[ "$ENV" != "d" && "$ENV" != "t" && "$ENV" != "p" ]]
then
    #  Then look in the aliases file for the broken alias that
    #  indicates env
    #  The sed is necessary because once again aix is stupid.
    #  Every other platform is perfectly happy to match the word in
    #  the case stmt if it has leading whitespace but noooo aix can't do
    #  that, that'd make too damn much sense.
    ENV=$(awk -F: '$1 ~ /ecsunix_smdb_env/ {print $2}' //${DEST}/etc/aliases | sed -e 's/^[    ][  ]*//g')

    #  Set the ENV based on the RHS of the alias
    case "${ENV}" in

        #  Development and Sandbox are Dev
        Dev*|Sand*) ENV="d"
        ;;

        #  Production, Production_2.0, and Disaster Recovery are Prod
        Dis*|Prod*) ENV="p"
        ;;

        #  And Test and Test_2.0 are Test
        Test*) ENV="t"
        ;;

        #  Anything else is invalid
        #  Which isn't to say that some idiot might not put garbage
        #  here (ghod knows there's enough other stupid stuff here).
        *) ENV="UNKNOWN"
        ;;
    esac
fi

case "${ENV}" in

    #  Set dev
    d) ENV="dev"
    ;;

    #  Set prod
    p) ENV="prod"
    ;;

    #  Set test
    t) ENV="test"
    ;;

    #  Anything else
    *) ENV="UNKNOWN"
    ;;

esac

#  Get the OS name of the target server
OS=$(nexec -e uname | tr '[A-Z]' '[a-z]')

#  Non-aix OSes require further work

#  If this is a linux box
if [ "${OS}" = "linux" ]
then
        #  And it has a redhat-release
        if [ -f //${DEST}/etc/redhat-release ]
        then
                #  It's redhat or RH derived, i.e., centos or fedora
                OS="redhat"
        else
                #  Otherwise it's SuSE
                #  This is making a vast assumption in general but in
                #  this env currently that's the only other option
                OS="suse"
        fi
elif [ "${OS}" = "sunos" ]
then
        #  Handle Solaris accordingly
        OS="sunos"
elif [ "${OS}" != "aix" ]
then
        #  NFI if it's not aix
        OS="UNKNOWN"
fi

#
#echo "OS=$OS Env=$ENV Target=$targetlc echo Destination=$DEST"

DEST_IP=`host $DEST | tail -1 | awk '{ print $4 }'`

#
# end of determine OS and env
#

#OS SPECIFIC VARIABLES
case $OS in
suse)
INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current-suse11-x86_64.tgz
;;

redhat)
INSTALL_PKG_SOURCE=//pwausxpbrmgt01/usr/local/bl_depot/centrify/centrify-infrastructure-services-current-rhel5-x86_64.tgz
;;

*)
echo "OS Type for $DEST is not Suse or RedHat Linux. OS=$OS This script is meant to only run against Linux HCSC hosts.  Exiting."
exit 2
;;
esac #OS CASE

PKG_FILE=`basename $INSTALL_PKG_SOURCE`



#copy package and run install command
mkdir -p //${DEST}/var/tmp/stage/centrify
cp -f ${INSTALL_PKG_SOURCE} //${DEST}/var/tmp/stage/centrify/
nexec $DEST "cd /var/tmp/stage/centrify ; gzip -d -c ./${PKG_FILE} | tar -xvf -"

RPM_FILE=`nexec $DEST "find /var/tmp/stage/centrify -name '*ssh*' -type f"`
echo "RPM File is:  $RPM_FILE"

#get installed release number
INST_RELEASE=`nexec $DEST "rpm -q --queryformat '%{RELEASE}' CentrifyDC-openssh"`

#get package file releaes number
PKG_RELEASE=`nexec $DEST "rpm -qp --queryformat '%{RELEASE}' ${RPM_FILE}"`

echo "Release Num for Installed Package:  $INST_RELEASE"
echo "Release Num for Retrieved Package:  $PKG_RELEASE"

if [ -z $INST_RELEASE ] || [ -z $PKG_RELEASE ]
then
	echo "There was an issue retrieving the release numbers.  Please verify centrify-sshd is installed or that the package was copied and unzipped properly in /var/tmp/stage/centrify. Exiting script."
	exit 2
fi	

if [ $INST_RELEASE != $PKG_RELEASE ]
then
	echo "The installed CentrifyDC-openssh RPM does not match the current release.  Installing the current version."
	#remove installed package
	nexec $DEST "rpm -e CentrifyDC-openssh"
	#add package
	nexec $DEST "rpm -i ${RPM_FILE}"
	#restart service
	nexec $DEST "service centrify-sshd restart"
else
	echo "The installed release of CentrifyDC-openssh RPM matches the current release.  No action taken."
fi

if grep -q "adclient.netlogon.packet.security.type: 3" //$DEST/etc/centrifydc/centrifydc.conf
then
	echo "Security type option set in config file. No changed made."
else
	echo "Adding security type option to config file."
	echo "adclient.netlogon.packet.security.type: 3" >> //$DEST/etc/centrifydc/centrifydc.conf
	nexec $DEST "adreload"
fi

#clean-up tmp files
rm -rf //${DEST}/var/tmp/stage/centrify






install trnemicro 
-----


#!/bin/nsh
#
# determine OS and env
#

DEST="`echo ${1} | sed -e 's/\..*$//'`"
FQDN=`host ${DEST} | awk '{print tolower($1)}'`

. //pwausxpbrmgt01p/usr/local/bl_depot/personal/Paul/envsetup.nsh

OS=$(GetOS)
ENV=$(GetEnv)

DEST_IP=${DESTIP}

#
# end of determine OS and env
#


#check to see if proxy host can be resolved might be needed
#check host resolution
#if nexec $DEST "host pwaulbxdpxy.hcscint.net"
#then
#	echo "Proxy Resolved"
#	exit 0
#else
#	echo "Proxy Not Resolved"
#	exit 1
#fi





#variable
BLDEPOT='//pwausxpbrmgt01/usr/local/bl_depot'
INSTCMD_RESULT='0'

case $OS in 

#AIX work here
aix)
#OS variables
INSTPKGSRC=$BLDEPOT/TrendMicro/Agent_AIX.bff
PKGNAM=`basename $INSTPKGSRC`
INSTCMD="/usr/sbin/installp -a -d /var/tmp/stage/$PKGNAM ds_agent"


#port check with bash script, copy script and set perms
#cp //pwausxpbrmgt01/usr/local/bl_depot/AIX/test_port.bash //$DEST/var/run
#chmod 700 //$DEST/var/run/test_port.bash

#check opt filesystem for 2GB free
#Get Freespace from lsvg command
LINE=`nexec $DEST "lsvg rootvg | grep \"FREE PPs:\"" | awk -F\( '{ print $2 }' | sed 's/)//'`

#separate numeric and metric value
NUMBER=`echo $LINE | awk '{ print $1 }'`
SIZE=`echo $LINE | awk '{ print $2 }'`

echo "Numeric value: $NUMBER"
echo "Metric value: $SIZE"

OPT_SPACE_KB=`df -k //$DEST/opt | tail -1 | awk '{ print $3 }'`

if  [ ${OPT_SPACE_KB} -lt '2048000' ]
then
	if [ $NUMBER > '2048' ]
	then
		nexec $DEST "chfs -a size=+2048M /opt"
	else
		1>&2 echo "The /opt fileystem is lower than the required 2GB Limit and there is not enough free PPs to extend /opt.
		Please clean-up the /opt filesystem or add additional disk space to rootvg and then run this job again against $DEST."
		exit 3
	fi
fi

#check var filesystem for 200MB free

#need to Get Freespace from lsvg command after resize of /opt
LINE=`nexec $DEST "lsvg rootvg | grep \"FREE PPs:\"" | awk -F\( '{ print $2 }' | sed 's/)//'`

#separate numeric and metric value
NUMBER=`echo $LINE | awk '{ print $1 }'`
SIZE=`echo $LINE | awk '{ print $2 }'`

echo "Numeric value: $NUMBER"
echo "Metric value: $SIZE"

VAR_SPACE_KB=`df -k //$DEST/var | tail -1 | awk '{ print $3 }'`

if  [ ${VAR_SPACE_KB} -lt '204800' ]
then
	if [ $NUMBER > '500' ]
	then
		nexec $DEST "chfs -a size=+500M /var"
	else
		1>&2 echo "The /var fileystem is lower than the required 200MB free requirement and there is not enough free PPs to extend /var.
		Please clean-up the /var filesystem or add additional disk space to rootvg and then run this job again against $DEST."
		exit 3
	fi
fi

;;

#Solaris stuff here
sunos)
#variables
#need to check for 10 or 11
SUNOSVER=`nexec $DEST "uname -r"`
echo "OS Version is:  $SUNOSVER"

if [ ${SUNOSVER} = "5.10" ]
then
	INSTPKGSRC=$BLDEPOT/TrendMicro/Agent_SOL10.pkg
	ADMFILESRC=$BLDEPOT/TrendMicro/Admin
	#we need to copy this auto-answer file over so Solaris doesn't ask a bunch of questions
	#why didn't they just include a -y like rpm :(
	cp $ADMFILESRC //$DEST/var/sadm/install/admin
	PKGNAM=`basename $INSTPKGSRC`
	INSTCMD="pkgadd -a Admin -G -d /var/tmp/stage/$PKGNAM ds-agent"
else
	INSTPKGSRC=$BLDEPOT/TrendMicro/Agent_SOL11.
	PKGNAM=`basename $INSTPKGSRC`
	INSTCMD=
fi

OPT_SPACE_KB=`df -k //$DEST/opt | tail -1 | awk '{ print $3 }'`

if  [ ${OPT_SPACE_KB} -lt '2048000' ]
then
	1>&2 echo "The /opt fileystem is lower than the required 2GB Limit.
	Please clean-up or extend the /opt filesystem  and run this job again against $DEST."
	exit 3
fi
;;

esac



#make stage dir if its not there
if [ ! -d /var/tmp/stage ]
then
	mkdir -p /var/tmp/stage
fi

#copy package to target
cp $INSTPKGSRC //$DEST/var/tmp/stage/

#Install Package
nexec $DEST "$INSTCMD ; echo \"\${?}\" > /tmp/instcmd_result"
INSTCMD_RESULT=`cat //$DEST/tmp/instcmd_result`

if [ $INSTCMD_RESULT -ne '0' ]
then
	#exit clean-up
	rm //$DEST/tmp/instcmd_result
	rm //$DEST/var/tmp/$PKGNAM
	1>&2 echo "It appears something went wrong with the Package install/upgrade.  Please review the bladelogic job logs for $DEST and look at local logs to determine the cause of the issue."
	exit 4
fi

sleep 60

#register client
nexec $DEST "LD_LIBRARY_PATH=; /opt/ds_agent/dsa_control -r"
nexec $DEST "LD_LIBRARY_PATH=; /opt/ds_agent/dsa_control -a dsm://agents.deepsecurity.trendmicro.com:443/ \"tenantID:D1D8B885-5817-A967-9EF3-9E6914F8FAA9\" \"token:41B1F2F9-8F80-E33B-921B-81A46F0BE6B0\" \"policyid:167\" \"groupid:1\""

#clean-up
rm //$DEST/tmp/instcmd_result
rm //$DEST/var/tmp/stage/$PKGNAM

exit 0





gather lscpu otuptu 
-------------------------


#!/bin/nsh

target=$NSH_RUNCMD_HOST	
targetlc=`echo ${target} | tr '[:upper:]' '[:lower:]'`
nexec ${target} "echo $HOSTNAME ; lscpu | grep -i Socket > /tmp/lscput.out.${targetlc}"
cp //${target}/tmp/lscput.out.${targetlc} //pwausxpbrmgt01/var/lscpu_output





overite ssh 
====

#!/bin/nsh

DEST="`echo ${1} | sed -e 's/\..*$//'`"
touch //$DEST/tmp/override_sssd_auth































































































































































































































































































































































































































































































































